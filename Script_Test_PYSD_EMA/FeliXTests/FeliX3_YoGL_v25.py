"""
Python model 'FeliX3_YoGL_v25.py'
Translated using PySD
"""

from pathlib import Path
import numpy as np
import xarray as xr

from pysd.py_backend.functions import (
    sum,
    zidz,
    pulse,
    ramp,
    if_then_else,
    step,
    not_implemented_function,
)
from pysd.py_backend.statefuls import (
    Integ,
    Initial,
    Smooth,
    SampleIfTrue,
    DelayFixed,
    Trend,
)
from pysd.py_backend.lookups import HardcodedLookups
from pysd import Component

__pysd_version__ = "3.14.2"

__data = {"scope": None, "time": lambda: 0}

_root = Path(__file__).parent


_subscript_dict = {
    "YoGL cohorts": [
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "SchoolEnrollment": ['"5-9"', '"10-14"', '"15-19"', '"20-24"'],
    "PrimaryEdButOldest": [
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
    ],
    '"15 to 24"': ['"15-19"', '"20-24"'],
    '"25 to 54"': ['"25-29"', '"30-34"', '"35-39"', '"40-44"', '"45-49"', '"50-54"'],
    '"55 to 64"': ['"55-59"', '"60-64"'],
    "Labor force type": ["skill", "unskill"],
    '"15 to 39"': ['"15-19"', '"20-24"', '"25-29"', '"30-34"', '"35-39"'],
    '"65+"': [
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    '"0 to 19"': ['"0-4"', '"5-9"', '"10-14"', '"15-19"'],
    '"20 to 39"': ['"20-24"', '"25-29"', '"30-34"', '"35-39"'],
    '"40 to 64"': ['"40-44"', '"45-49"', '"50-54"', '"55-59"', '"60-64"'],
    '"Non-working oldage"': [
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "MYS": [
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    '"Non-working age"': [
        '"0-4"',
        '"5-9"',
        '"10-14"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "SecondaryGraduation": ['"15-19"', '"20-24"', '"25-29"'],
    "TertiaryGraduation": ['"20-24"', '"25-29"', '"30-34"'],
    "NextCohort": [
        '"5-9"',
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "Fossil Fuels": ["Coal", "Oil", "Gas"],
    "WorkingAge": [
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
    ],
    "PlantFood": ["Pulses", "Grains", "VegFruits", "OtherCrops"],
    "AnimalFood": ["PasMeat", "CropMeat", "Dairy", "Eggs"],
    "FoodCategories": [
        "PasMeat",
        "CropMeat",
        "Dairy",
        "Eggs",
        "Pulses",
        "Grains",
        "VegFruits",
        "OtherCrops",
    ],
    "Young": ['"15-19"', '"20-24"', '"25-29"', '"30-34"', '"35-39"', '"40-44"'],
    "MiddleAged": ['"45-49"', '"50-54"', '"55-59"', '"60-64"', '"65-69"'],
    "Education": ["noEd", "primary", "secondary", "tertiary"],
    "Childhood": ['"0-4"', '"5-9"', '"10-14"'],
    "OldAge": [
        '"75-79"',
        '"80-84"',
        '"70-74"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "AllButOldest": [
        '"0-4"',
        '"5-9"',
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
    ],
    "AllButYoungest": [
        '"5-9"',
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "Fertile": [
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
    ],
    "PreviousCohort": [
        '"0-4"',
        '"5-9"',
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
    ],
    "TertiaryEdButYoungest": [
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "Gender": ["male", "female"],
    "SecondaryEdPrevious": [
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
    ],
    "PrimaryEdButYoungest": [
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "PrimaryEdCohorts": [
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "PrimaryEdPrevious": [
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
    ],
    "SecondaryEdButYoungest": [
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "SecondaryEdCohorts": [
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "Cohorts": [
        '"0-4"',
        '"5-9"',
        '"10-14"',
        '"15-19"',
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "TertiaryEdCohorts": [
        '"20-24"',
        '"25-29"',
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
        '"100+"',
    ],
    "TertiaryEdPrevious": [
        '"30-34"',
        '"35-39"',
        '"40-44"',
        '"45-49"',
        '"50-54"',
        '"55-59"',
        '"60-64"',
        '"65-69"',
        '"70-74"',
        '"75-79"',
        '"80-84"',
        '"85-89"',
        '"90-94"',
        '"95-99"',
    ],
}

component = Component()

#######################################################################
#                          CONTROL VARIABLES                          #
#######################################################################

_control_vars = {
    "initial_time": lambda: 1900,
    "final_time": lambda: 2100,
    "time_step": lambda: 0.125,
    "saveper": lambda: 1,
}


def _init_outer_references(data):
    for key in data:
        __data[key] = data[key]


@component.add(name="Time")
def time():
    """
    Current time of the model.
    """
    return __data["time"]()


@component.add(
    name="FINAL TIME", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def final_time():
    """
    The final time for the simulation.
    """
    return __data["time"].final_time()


@component.add(
    name="INITIAL TIME", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def initial_time():
    """
    The initial time for the simulation.
    """
    return __data["time"].initial_time()


@component.add(
    name="SAVEPER",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def saveper():
    """
    The frequency with which output is stored.
    """
    return __data["time"].saveper()


@component.add(
    name="TIME STEP",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_step():
    """
    The time step for the simulation.
    """
    return __data["time"].time_step()


#######################################################################
#                           MODEL VARIABLES                           #
#######################################################################


@component.add(
    name="SC Init", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sc_init():
    return 2


@component.add(
    name="Share of Investment in Revenue Coal",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_investment_in_coal": 1, "coal_revenue": 1},
)
def share_of_investment_in_revenue_coal():
    return total_investment_in_coal() / coal_revenue()


@component.add(
    name="Total Investment in Coal",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_coal_exploration": 1,
        "investment_in_coal_production": 1,
        "investment_in_coal_technology": 1,
        "share_of_upstream_investment_in_total_investment_coal": 1,
    },
)
def total_investment_in_coal():
    return (
        investment_in_coal_exploration()
        + investment_in_coal_production()
        + investment_in_coal_technology()
    ) / share_of_upstream_investment_in_total_investment_coal()


@component.add(
    name="Share of Upstream Investment in Total Investment Coal",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def share_of_upstream_investment_in_total_investment_coal():
    """
    Data from World Energy Investment 2023
    """
    return 0.753623


@component.add(
    name="IO Var S",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_io_var_s": 1},
    other_deps={
        "_smooth_io_var_s": {
            "initial": {"io_s": 1, "time": 1},
            "step": {"io_s": 1, "time": 1},
        }
    },
)
def io_var_s():
    return 5 + _smooth_io_var_s()


_smooth_io_var_s = Smooth(
    lambda: step(__data["time"], io_s() - 5, 2020),
    lambda: 1,
    lambda: step(__data["time"], io_s() - 5, 2020),
    lambda: 1,
    "_smooth_io_var_s",
)


@component.add(name="ODR S", units="Year", comp_type="Constant", comp_subtype="Normal")
def odr_s():
    return 6


@component.add(
    name="ODR Var S",
    units="{6}",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_odr_var_s": 1},
    other_deps={
        "_smooth_odr_var_s": {
            "initial": {"odr_s": 1, "time": 1},
            "step": {"odr_s": 1, "time": 1},
        }
    },
)
def odr_var_s():
    return 6 + _smooth_odr_var_s()


_smooth_odr_var_s = Smooth(
    lambda: step(__data["time"], odr_s() - 6, 2020),
    lambda: 1,
    lambda: step(__data["time"], odr_s() - 6, 2020),
    lambda: 1,
    "_smooth_odr_var_s",
)


@component.add(
    name="Oil Discovery and Recovery Technology Development Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def oil_discovery_and_recovery_technology_development_time_variation():
    return 6


@component.add(
    name="Relative Productivity of Investment in Oil Production Compared to Exploration Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_oil_production_compared_to_exploration_variation():
    return 10


@component.add(name="CDR S", units="Year", comp_type="Constant", comp_subtype="Normal")
def cdr_s():
    return 6


@component.add(
    name="CDR Var S",
    units="$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_cdr_var_s": 1},
    other_deps={
        "_smooth_cdr_var_s": {
            "initial": {"cdr_s": 1, "time": 1},
            "step": {"cdr_s": 1, "time": 1},
        }
    },
)
def cdr_var_s():
    return 6 + _smooth_cdr_var_s()


_smooth_cdr_var_s = Smooth(
    lambda: step(__data["time"], cdr_s() - 6, 2020),
    lambda: 1,
    lambda: step(__data["time"], cdr_s() - 6, 2020),
    lambda: 1,
    "_smooth_cdr_var_s",
)


@component.add(
    name="Coal Discovery and Recovery Technology Development Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def coal_discovery_and_recovery_technology_development_time_variation():
    return 6


@component.add(
    name="RPGPE Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rpgpe_var_s": 1},
    other_deps={
        "_smooth_rpgpe_var_s": {
            "initial": {"rpgpe_s": 1, "time": 1},
            "step": {"rpgpe_s": 1, "time": 1},
        }
    },
)
def rpgpe_var_s():
    return 0.3 + _smooth_rpgpe_var_s()


_smooth_rpgpe_var_s = Smooth(
    lambda: step(__data["time"], rpgpe_s() - 0.3, 2020),
    lambda: 1,
    lambda: step(__data["time"], rpgpe_s() - 0.3, 2020),
    lambda: 1,
    "_smooth_rpgpe_var_s",
)


@component.add(
    name="RPOPE S", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def rpope_s():
    return 10


@component.add(
    name="RPOPE Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rpope_var_s": 1},
    other_deps={
        "_smooth_rpope_var_s": {
            "initial": {"rpope_s": 1, "time": 1},
            "step": {"rpope_s": 1, "time": 1},
        }
    },
)
def rpope_var_s():
    return 10 + _smooth_rpope_var_s()


_smooth_rpope_var_s = Smooth(
    lambda: step(__data["time"], rpope_s() - 10, 2020),
    lambda: 1,
    lambda: step(__data["time"], rpope_s() - 10, 2020),
    lambda: 1,
    "_smooth_rpope_var_s",
)


@component.add(name="SCo S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def sco_s():
    return 0.1


@component.add(
    name="SCo Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_sco_var_s": 1},
    other_deps={
        "_smooth_sco_var_s": {
            "initial": {"sco_s": 1, "time": 1},
            "step": {"sco_s": 1, "time": 1},
        }
    },
)
def sco_var_s():
    return 0.1 + _smooth_sco_var_s()


_smooth_sco_var_s = Smooth(
    lambda: step(__data["time"], sco_s() - 0.1, 2020),
    lambda: 1,
    lambda: step(__data["time"], sco_s() - 0.1, 2020),
    lambda: 1,
    "_smooth_sco_var_s",
)


@component.add(
    name="Sensitivity of Coal Price to Supply and Demand Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_coal_price_to_supply_and_demand_variation():
    return 0.1


@component.add(
    name="Sensitivity of Gas Price to Supply and Demand Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_gas_price_to_supply_and_demand_variation():
    return 1.11429


@component.add(
    name="Gas Discovery and Recovery Technology Development Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gas_discovery_and_recovery_technology_development_time_variation():
    return 6


@component.add(name="GDR S", units="Year", comp_type="Constant", comp_subtype="Normal")
def gdr_s():
    return 6


@component.add(
    name="GDR Var S",
    units="$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_gdr_var_s": 1},
    other_deps={
        "_smooth_gdr_var_s": {
            "initial": {"gdr_s": 1, "time": 1},
            "step": {"gdr_s": 1, "time": 1},
        }
    },
)
def gdr_var_s():
    return 6 + _smooth_gdr_var_s()


_smooth_gdr_var_s = Smooth(
    lambda: step(__data["time"], gdr_s() - 6, 2020),
    lambda: 1,
    lambda: step(__data["time"], gdr_s() - 6, 2020),
    lambda: 1,
    "_smooth_gdr_var_s",
)


@component.add(name="IC S", units="Year", comp_type="Constant", comp_subtype="Normal")
def ic_s():
    return 5


@component.add(
    name="IC Var S",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_ic_var_s": 1},
    other_deps={
        "_smooth_ic_var_s": {
            "initial": {"ic_s": 1, "time": 1},
            "step": {"ic_s": 1, "time": 1},
        }
    },
)
def ic_var_s():
    return 5 + _smooth_ic_var_s()


_smooth_ic_var_s = Smooth(
    lambda: step(__data["time"], ic_s() - 5, 2020),
    lambda: 1,
    lambda: step(__data["time"], ic_s() - 5, 2020),
    lambda: 1,
    "_smooth_ic_var_s",
)


@component.add(name="IG S", units="Year", comp_type="Constant", comp_subtype="Normal")
def ig_s():
    return 5


@component.add(
    name="IG Var S",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_ig_var_s": 1},
    other_deps={
        "_smooth_ig_var_s": {
            "initial": {"ig_s": 1, "time": 1},
            "step": {"ig_s": 1, "time": 1},
        }
    },
)
def ig_var_s():
    return 5 + _smooth_ig_var_s()


_smooth_ig_var_s = Smooth(
    lambda: step(__data["time"], ig_s() - 5, 2020),
    lambda: 1,
    lambda: step(__data["time"], ig_s() - 5, 2020),
    lambda: 1,
    "_smooth_ig_var_s",
)


@component.add(
    name="RPGPE S", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def rpgpe_s():
    return 0.3


@component.add(
    name="Sensitivity of Oil Price to Supply and Demand Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_oil_price_to_supply_and_demand_variation():
    return 1.4


@component.add(name="SO S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def so_s():
    return 1.4


@component.add(
    name="SO Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_so_var_s": 1},
    other_deps={
        "_smooth_so_var_s": {
            "initial": {"so_s": 1, "time": 1},
            "step": {"so_s": 1, "time": 1},
        }
    },
)
def so_var_s():
    return 1.4 + _smooth_so_var_s()


_smooth_so_var_s = Smooth(
    lambda: step(__data["time"], so_s() - 1.4, 2020),
    lambda: 1,
    lambda: step(__data["time"], so_s() - 1.4, 2020),
    lambda: 1,
    "_smooth_so_var_s",
)


@component.add(
    name="Investment in Coal Exploration and Production Delay Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def investment_in_coal_exploration_and_production_delay_variation():
    return 5


@component.add(
    name="Investment in Gas Exploration and Production Delay Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def investment_in_gas_exploration_and_production_delay_variation():
    return 5


@component.add(
    name="Investment in Oil Exploration and Production Delay Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def investment_in_oil_exploration_and_production_delay_variation():
    return 5


@component.add(name="IO S", units="Year", comp_type="Constant", comp_subtype="Normal")
def io_s():
    return 5


@component.add(
    name="Share of Upstream Investment in Total Investment Gas",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def share_of_upstream_investment_in_total_investment_gas():
    """
    Data from World Energy Investment 2023
    """
    return 0.9


@component.add(
    name="SG Init",
    units="Dmnl",
    limits=(0.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def sg_init():
    """
    A CONSTANT
    """
    return 0.05


@component.add(
    name="Relative Productivity of Investment in Coal Production Compared to Exploration Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_coal_production_compared_to_exploration_variation():
    return 10


@component.add(
    name="Relative Productivity of Investment in Gas Production Compared to Exploration Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_gas_production_compared_to_exploration_variation():
    return 0.3


@component.add(
    name="Share of Investment in Revenue Gas",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_investment_in_gas": 1, "gas_revenue": 1},
)
def share_of_investment_in_revenue_gas():
    return total_investment_in_gas() / gas_revenue()


@component.add(
    name="RPCPE S", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def rpcpe_s():
    return 10


@component.add(
    name="RPCPE Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rpcpe_var_s": 1},
    other_deps={
        "_smooth_rpcpe_var_s": {
            "initial": {"rpcpe_s": 1, "time": 1},
            "step": {"rpcpe_s": 1, "time": 1},
        }
    },
)
def rpcpe_var_s():
    return 10 + _smooth_rpcpe_var_s()


_smooth_rpcpe_var_s = Smooth(
    lambda: step(__data["time"], rpcpe_s() - 10, 2020),
    lambda: 1,
    lambda: step(__data["time"], rpcpe_s() - 10, 2020),
    lambda: 1,
    "_smooth_rpcpe_var_s",
)


@component.add(
    name="SG S",
    units="Dmnl",
    limits=(0.0, 3.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def sg_s():
    return 1.11429


@component.add(
    name="Total Investment in Gas",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_exploration": 1,
        "investment_in_gas_production": 1,
        "investment_in_gas_technology": 1,
        "share_of_upstream_investment_in_total_investment_gas": 1,
    },
)
def total_investment_in_gas():
    return (
        investment_in_gas_exploration()
        + investment_in_gas_production()
        + investment_in_gas_technology()
    ) / share_of_upstream_investment_in_total_investment_gas()


@component.add(
    name="SG Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_sg_var_s": 1},
    other_deps={
        "_smooth_sg_var_s": {
            "initial": {"sg_s": 1, "time": 1},
            "step": {"sg_s": 1, "time": 1},
        }
    },
)
def sg_var_s():
    return 1.11429 + _smooth_sg_var_s()


_smooth_sg_var_s = Smooth(
    lambda: step(__data["time"], sg_s() - 1.11429, 2020),
    lambda: 1,
    lambda: step(__data["time"], sg_s() - 1.11429, 2020),
    lambda: 1,
    "_smooth_sg_var_s",
)


@component.add(
    name="Inflow IROFRULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_irofru": 1},
)
def inflow_irofrulv1():
    return effectiveness_irofru()


@component.add(
    name="Effectiveness IROFDU",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_discovery_technology": 1,
        "effectiveness_of_investment_in_oil_discovery_technology": 1,
    },
)
def effectiveness_irofdu():
    return (
        investment_in_oil_discovery_technology()
        * effectiveness_of_investment_in_oil_discovery_technology()
    )


@component.add(
    name="Effectiveness IROFRU",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_recovery_technology": 1,
        "effectiveness_of_investment_in_oil_recovery_technology": 1,
    },
)
def effectiveness_irofru():
    return (
        investment_in_oil_recovery_technology()
        * effectiveness_of_investment_in_oil_recovery_technology()
    )


@component.add(
    name="Increase in Ratio of Oil Fraction Recoverable to Unrecoverable LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3": {
            "initial": {"effectiveness_irofru": 1, "delay_time_irofru": 1},
            "step": {"inflow_irofrulv3": 1, "outflow_irofrulv3": 1},
        }
    },
)
def increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3()


_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3 = Integ(
    lambda: inflow_irofrulv3() - outflow_irofrulv3(),
    lambda: effectiveness_irofru() * delay_time_irofru(),
    "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3",
)


@component.add(
    name="Inflow IROFRULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irofrulv2": 1},
)
def inflow_irofrulv3():
    return outflow_irofrulv2()


@component.add(
    name="Inflow IROFDULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irofdulv2": 1},
)
def inflow_irofdulv3():
    return outflow_irofdulv2()


@component.add(
    name="Outflow IROFDULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1": 1,
        "delay_time_irofdu": 1,
    },
)
def outflow_irofdulv1():
    return (
        increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1()
        / delay_time_irofdu()
    )


@component.add(
    name="Outflow IROFDULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2": 1,
        "delay_time_irofdu": 1,
    },
)
def outflow_irofdulv2():
    return (
        increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2()
        / delay_time_irofdu()
    )


@component.add(
    name="Outflow IROFDULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3": 1,
        "delay_time_irofdu": 1,
    },
)
def outflow_irofdulv3():
    return (
        increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3()
        / delay_time_irofdu()
    )


@component.add(
    name="Inflow IROFDULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_irofdu": 1},
)
def inflow_irofdulv1():
    return effectiveness_irofdu()


@component.add(
    name="Inflow IROFDULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irofdulv1": 1},
)
def inflow_irofdulv2():
    return outflow_irofdulv1()


@component.add(
    name="Outflow IROFRULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3": 1,
        "delay_time_irofru": 1,
    },
)
def outflow_irofrulv3():
    return (
        increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3()
        / delay_time_irofru()
    )


@component.add(
    name="Increase in Ratio of Oil Fraction Discoverable to Undiscoverable LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2": {
            "initial": {
                "increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3": 1
            },
            "step": {"inflow_irofdulv2": 1, "outflow_irofdulv2": 1},
        }
    },
)
def increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2()


_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2 = Integ(
    lambda: inflow_irofdulv2() - outflow_irofdulv2(),
    lambda: increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3(),
    "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv2",
)


@component.add(
    name="Delay Time IROFDU",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_discovery_technology_development_time": 1},
)
def delay_time_irofdu():
    return oil_discovery_technology_development_time() / 3


@component.add(
    name="Delay Time IROFRU",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_recovery_technology_development_time": 1},
)
def delay_time_irofru():
    return oil_recovery_technology_development_time() / 3


@component.add(
    name="Increase in Ratio of Oil Fraction Recoverable to Unrecoverable LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2": {
            "initial": {
                "increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3": 1
            },
            "step": {"inflow_irofrulv2": 1, "outflow_irofrulv2": 1},
        }
    },
)
def increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2()


_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2 = Integ(
    lambda: inflow_irofrulv2() - outflow_irofrulv2(),
    lambda: increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3(),
    "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2",
)


@component.add(
    name="Outflow IROFRULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2": 1,
        "delay_time_irofru": 1,
    },
)
def outflow_irofrulv2():
    return (
        increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv2()
        / delay_time_irofru()
    )


@component.add(
    name="Increase in Ratio of Oil Fraction Discoverable to Undiscoverable LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1": {
            "initial": {
                "increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3": 1
            },
            "step": {"inflow_irofdulv1": 1, "outflow_irofdulv1": 1},
        }
    },
)
def increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1()


_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1 = Integ(
    lambda: inflow_irofdulv1() - outflow_irofdulv1(),
    lambda: increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3(),
    "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv1",
)


@component.add(
    name="Outflow IROFRULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1": 1,
        "delay_time_irofru": 1,
    },
)
def outflow_irofrulv1():
    return (
        increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1()
        / delay_time_irofru()
    )


@component.add(
    name="Increase in Ratio of Oil Fraction Discoverable to Undiscoverable LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3": {
            "initial": {"effectiveness_irofdu": 1, "delay_time_irofdu": 1},
            "step": {"inflow_irofdulv3": 1, "outflow_irofdulv3": 1},
        }
    },
)
def increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3()


_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3 = Integ(
    lambda: inflow_irofdulv3() - outflow_irofdulv3(),
    lambda: effectiveness_irofdu() * delay_time_irofdu(),
    "_integ_increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable_lv3",
)


@component.add(
    name="Increase in Ratio of Oil Fraction Recoverable to Unrecoverable LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1": {
            "initial": {
                "increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3": 1
            },
            "step": {"inflow_irofrulv1": 1, "outflow_irofrulv1": 1},
        }
    },
)
def increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1()


_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1 = Integ(
    lambda: inflow_irofrulv1() - outflow_irofrulv1(),
    lambda: increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv3(),
    "_integ_increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable_lv1",
)


@component.add(
    name="Inflow IROFRULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irofrulv1": 1},
)
def inflow_irofrulv2():
    return outflow_irofrulv1()


@component.add(
    name='"95 gj"',
    units="$/GJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mtoe_to_gj": 1, "mtoe_per_barrel": 1},
)
def nvs_95_gj():
    return 9.5 * mtoe_to_gj() * mtoe_per_barrel()


@component.add(
    name="Area Harvested Accumulative",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_area_harvested_accumulative": 1},
    other_deps={
        "_integ_area_harvested_accumulative": {
            "initial": {"init_aha": 1},
            "step": {"inflow_aha": 1, "outflow_aha": 1},
        }
    },
)
def area_harvested_accumulative():
    return _integ_area_harvested_accumulative()


_integ_area_harvested_accumulative = Integ(
    lambda: inflow_aha() - outflow_aha(),
    lambda: init_aha(),
    "_integ_area_harvested_accumulative",
)


@component.add(
    name="Outflow IBETRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_biomass_energy_technology_ratio_lv2": 1,
        "delay_time_ibetr": 1,
    },
)
def outflow_ibetrlv2():
    return increase_in_biomass_energy_technology_ratio_lv2() / delay_time_ibetr()


@component.add(
    name="Outflow IBETRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_biomass_energy_technology_ratio_lv3": 1,
        "delay_time_ibetr": 1,
    },
)
def outflow_ibetrlv3():
    return increase_in_biomass_energy_technology_ratio_lv3() / delay_time_ibetr()


@component.add(
    name="Inflow IRGFDULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_irgfdu": 1},
)
def inflow_irgfdulv1():
    return effectiveness_irgfdu()


@component.add(
    name="Inflow IRGFDULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irgfdulv1": 1},
)
def inflow_irgfdulv2():
    return outflow_irgfdulv1()


@component.add(
    name="Delay Time FPLCLV",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time_to_adjust_forest_protected_land": 1},
)
def delay_time_fplclv():
    return time_to_adjust_forest_protected_land() / 3


@component.add(
    name="Delay Time IBETR",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_energy_technology_development_time": 1},
)
def delay_time_ibetr():
    return biomass_energy_technology_development_time() / 3


@component.add(
    name="Delay Time IBITR",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_installation_technology_development_time": 1},
)
def delay_time_ibitr():
    return biomass_installation_technology_development_time() / 3


@component.add(
    name="Inflow IRGFRULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irgfrulv2": 1},
)
def inflow_irgfrulv3():
    return outflow_irgfrulv2()


@component.add(
    name="Inflow ISETLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_isetr": 1},
)
def inflow_isetlv1():
    return effectiveness_isetr()


@component.add(
    name="Delay Time IRGFDU",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_discovery_technology_development_time": 1},
)
def delay_time_irgfdu():
    return gas_discovery_technology_development_time() / 3


@component.add(
    name="Delay Time IRGFRU",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_recovery_technology_development_time": 1},
)
def delay_time_irgfru():
    return gas_recovery_technology_development_time() / 3


@component.add(
    name="Delay Time ISETR",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_technology_development_time": 1},
)
def delay_time_isetr():
    return solar_energy_technology_development_time() / 3


@component.add(
    name="Delay Time ISITR",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_installation_technology_development_time": 1},
)
def delay_time_isitr():
    return solar_installation_technology_development_time() / 3


@component.add(
    name="Inflow ISITRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_isitrlv2": 1},
)
def inflow_isitrlv3():
    return outflow_isitrlv2()


@component.add(
    name="Increase in Solar Installation Technology Ratio LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_solar_installation_technology_ratio_lv2": 1},
    other_deps={
        "_integ_increase_in_solar_installation_technology_ratio_lv2": {
            "initial": {"increase_in_solar_installation_technology_ratio_lv3": 1},
            "step": {"inflow_isitrlv2": 1, "outflow_isitrlv2": 1},
        }
    },
)
def increase_in_solar_installation_technology_ratio_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_solar_installation_technology_ratio_lv2()


_integ_increase_in_solar_installation_technology_ratio_lv2 = Integ(
    lambda: inflow_isitrlv2() - outflow_isitrlv2(),
    lambda: increase_in_solar_installation_technology_ratio_lv3(),
    "_integ_increase_in_solar_installation_technology_ratio_lv2",
)


@component.add(
    name="Increase in Solar Installation Technology Ratio LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_solar_installation_technology_ratio_lv3": 1},
    other_deps={
        "_integ_increase_in_solar_installation_technology_ratio_lv3": {
            "initial": {"effectiveness_isitr": 1, "delay_time_isitr": 1},
            "step": {"inflow_isitrlv3": 1, "outflow_isitrlv3": 1},
        }
    },
)
def increase_in_solar_installation_technology_ratio_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_solar_installation_technology_ratio_lv3()


_integ_increase_in_solar_installation_technology_ratio_lv3 = Integ(
    lambda: inflow_isitrlv3() - outflow_isitrlv3(),
    lambda: effectiveness_isitr() * delay_time_isitr(),
    "_integ_increase_in_solar_installation_technology_ratio_lv3",
)


@component.add(
    name="Effectiveness IBETR",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_biomass_energy_efficiency": 1,
        "effectiveness_of_investment_in_biomass_energy_technology": 1,
    },
)
def effectiveness_ibetr():
    return (
        investment_in_biomass_energy_efficiency()
        * effectiveness_of_investment_in_biomass_energy_technology()
    )


@component.add(
    name="Effectiveness IBITR",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_biomass_energy_installation": 1,
        "effectiveness_of_investment_in_biomass_installation_technology": 1,
    },
)
def effectiveness_ibitr():
    return (
        investment_in_biomass_energy_installation()
        * effectiveness_of_investment_in_biomass_installation_technology()
    )


@component.add(
    name="Outflow ISETLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_solar_energy_technology_ratio_lv2": 1,
        "delay_time_isetr": 1,
    },
)
def outflow_isetlv2():
    return increase_in_solar_energy_technology_ratio_lv2() / delay_time_isetr()


@component.add(
    name="Outflow ISETLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_solar_energy_technology_ratio_lv3": 1,
        "delay_time_isetr": 1,
    },
)
def outflow_isetlv3():
    return increase_in_solar_energy_technology_ratio_lv3() / delay_time_isetr()


@component.add(
    name="Effectiveness IRGFDU",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_discovery_technology": 1,
        "effectiveness_of_investment_in_gas_discovery_technology": 1,
    },
)
def effectiveness_irgfdu():
    return (
        investment_in_gas_discovery_technology()
        * effectiveness_of_investment_in_gas_discovery_technology()
    )


@component.add(
    name="Effectiveness IRGFRU",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_recovery_technology": 1,
        "effectiveness_of_investment_in_gas_recovery_technology": 1,
    },
)
def effectiveness_irgfru():
    return (
        investment_in_gas_recovery_technology()
        * effectiveness_of_investment_in_gas_recovery_technology()
    )


@component.add(
    name="Effectiveness ISETR",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_solar_energy_technology": 1,
        "investment_in_solar_energy_efficiency": 1,
    },
)
def effectiveness_isetr():
    return (
        effectiveness_of_investment_in_solar_energy_technology()
        * investment_in_solar_energy_efficiency()
    )


@component.add(
    name="Effectiveness ISITR",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_solar_installation_technology": 1,
        "investment_in_solar_energy_installation": 1,
    },
)
def effectiveness_isitr():
    return (
        effectiveness_of_investment_in_solar_installation_technology()
        * investment_in_solar_energy_installation()
    )


@component.add(
    name="INIT APO per bbl",
    units="$/Barrel",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"init_apo": 1, "mtoe_per_barrel": 1},
)
def init_apo_per_bbl():
    return init_apo() * mtoe_per_barrel()


@component.add(
    name="Outflow IBITRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_biomass_installation_technology_ratio_lv2": 1,
        "delay_time_ibitr": 1,
    },
)
def outflow_ibitrlv2():
    return increase_in_biomass_installation_technology_ratio_lv2() / delay_time_ibitr()


@component.add(
    name="Increase in Ratio of Gas Fraction Discoverable to Undiscoverable LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1": {
            "initial": {
                "increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3": 1
            },
            "step": {"inflow_irgfdulv1": 1, "outflow_irgfdulv1": 1},
        }
    },
)
def increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1()


_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1 = Integ(
    lambda: inflow_irgfdulv1() - outflow_irgfdulv1(),
    lambda: increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3(),
    "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1",
)


@component.add(
    name="Increase in Ratio of Gas Fraction Discoverable to Undiscoverable LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2": {
            "initial": {
                "increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3": 1
            },
            "step": {"inflow_irgfdulv2": 1, "outflow_irgfdulv2": 1},
        }
    },
)
def increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2()


_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2 = Integ(
    lambda: inflow_irgfdulv2() - outflow_irgfdulv2(),
    lambda: increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3(),
    "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2",
)


@component.add(
    name="Increase in Ratio of Gas Fraction Discoverable to Undiscoverable LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3": {
            "initial": {"effectiveness_irgfdu": 1, "delay_time_irgfdu": 1},
            "step": {"inflow_irgfdulv3": 1, "outflow_irgfdulv3": 1},
        }
    },
)
def increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3()


_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3 = Integ(
    lambda: inflow_irgfdulv3() - outflow_irgfdulv3(),
    lambda: effectiveness_irgfdu() * delay_time_irgfdu(),
    "_integ_increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3",
)


@component.add(
    name="Increase in Ratio of Gas Fraction Recoverable to Unrecoverable LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1": {
            "initial": {
                "increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3": 1
            },
            "step": {"inflow_irgfrulv1": 1, "outflow_irgfrulv1": 1},
        }
    },
)
def increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1()


_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1 = Integ(
    lambda: inflow_irgfrulv1() - outflow_irgfrulv1(),
    lambda: increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3(),
    "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1",
)


@component.add(
    name="Outflow AHA",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "inflow_aha": 1, "area_harvested_accumulative": 1},
)
def outflow_aha():
    return if_then_else(
        time() == 1900, lambda: inflow_aha(), lambda: area_harvested_accumulative()
    )


@component.add(
    name="Increase in Ratio of Gas Fraction Recoverable to Unrecoverable LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3": {
            "initial": {"effectiveness_irgfru": 1, "delay_time_irgfru": 1},
            "step": {"inflow_irgfrulv3": 1, "outflow_irgfrulv3": 1},
        }
    },
)
def increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3()


_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3 = Integ(
    lambda: inflow_irgfrulv3() - outflow_irgfrulv3(),
    lambda: effectiveness_irgfru() * delay_time_irgfru(),
    "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3",
)


@component.add(
    name="Forest Protected Land Change LV1",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_forest_protected_land_change_lv1": 1},
    other_deps={
        "_integ_forest_protected_land_change_lv1": {
            "initial": {"forest_protected_land_change_lv3": 1},
            "step": {"inflow_fplclv1": 1, "outflow_fplclv1": 1},
        }
    },
)
def forest_protected_land_change_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_forest_protected_land_change_lv1()


_integ_forest_protected_land_change_lv1 = Integ(
    lambda: inflow_fplclv1() - outflow_fplclv1(),
    lambda: forest_protected_land_change_lv3(),
    "_integ_forest_protected_land_change_lv1",
)


@component.add(
    name="Forest Protected Land Change LV2",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_forest_protected_land_change_lv2": 1},
    other_deps={
        "_integ_forest_protected_land_change_lv2": {
            "initial": {"forest_protected_land_change_lv3": 1},
            "step": {"inflow_fplclv2": 1, "outflow_fplclv2": 1},
        }
    },
)
def forest_protected_land_change_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_forest_protected_land_change_lv2()


_integ_forest_protected_land_change_lv2 = Integ(
    lambda: inflow_fplclv2() - outflow_fplclv2(),
    lambda: forest_protected_land_change_lv3(),
    "_integ_forest_protected_land_change_lv2",
)


@component.add(
    name="Forest Protected Land Change LV3",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_forest_protected_land_change_lv3": 1},
    other_deps={
        "_integ_forest_protected_land_change_lv3": {
            "initial": {"fraction_fplc": 1, "delay_time_fplclv": 1},
            "step": {"inflow_fplclv3": 1, "outflow_fplclv3": 1},
        }
    },
)
def forest_protected_land_change_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_forest_protected_land_change_lv3()


_integ_forest_protected_land_change_lv3 = Integ(
    lambda: inflow_fplclv3() - outflow_fplclv3(),
    lambda: fraction_fplc() * delay_time_fplclv(),
    "_integ_forest_protected_land_change_lv3",
)


@component.add(
    name="Fraction FPLC",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"current_to_max_forest_protected_land": 1, "forest_protected_land": 1},
)
def fraction_fplc():
    return current_to_max_forest_protected_land() * forest_protected_land()


@component.add(
    name="Increase in Biomass Energy Technology Ratio LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_biomass_energy_technology_ratio_lv1": 1},
    other_deps={
        "_integ_increase_in_biomass_energy_technology_ratio_lv1": {
            "initial": {"increase_in_biomass_energy_technology_ratio_lv3": 1},
            "step": {"inflow_ibetrlv1": 1, "outflow_ibetrlv1": 1},
        }
    },
)
def increase_in_biomass_energy_technology_ratio_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_biomass_energy_technology_ratio_lv1()


_integ_increase_in_biomass_energy_technology_ratio_lv1 = Integ(
    lambda: inflow_ibetrlv1() - outflow_ibetrlv1(),
    lambda: increase_in_biomass_energy_technology_ratio_lv3(),
    "_integ_increase_in_biomass_energy_technology_ratio_lv1",
)


@component.add(
    name="Increase in Biomass Energy Technology Ratio LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_biomass_energy_technology_ratio_lv2": 1},
    other_deps={
        "_integ_increase_in_biomass_energy_technology_ratio_lv2": {
            "initial": {"increase_in_biomass_energy_technology_ratio_lv3": 1},
            "step": {"inflow_ibetrlv2": 1, "outflow_ibetrlv2": 1},
        }
    },
)
def increase_in_biomass_energy_technology_ratio_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_biomass_energy_technology_ratio_lv2()


_integ_increase_in_biomass_energy_technology_ratio_lv2 = Integ(
    lambda: inflow_ibetrlv2() - outflow_ibetrlv2(),
    lambda: increase_in_biomass_energy_technology_ratio_lv3(),
    "_integ_increase_in_biomass_energy_technology_ratio_lv2",
)


@component.add(
    name="Increase in Biomass Energy Technology Ratio LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_biomass_energy_technology_ratio_lv3": 1},
    other_deps={
        "_integ_increase_in_biomass_energy_technology_ratio_lv3": {
            "initial": {"effectiveness_ibetr": 1, "delay_time_ibetr": 1},
            "step": {"inflow_ibetrlv3": 1, "outflow_ibetrlv3": 1},
        }
    },
)
def increase_in_biomass_energy_technology_ratio_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_biomass_energy_technology_ratio_lv3()


_integ_increase_in_biomass_energy_technology_ratio_lv3 = Integ(
    lambda: inflow_ibetrlv3() - outflow_ibetrlv3(),
    lambda: effectiveness_ibetr() * delay_time_ibetr(),
    "_integ_increase_in_biomass_energy_technology_ratio_lv3",
)


@component.add(
    name="Increase in Biomass Installation Technology Ratio LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_biomass_installation_technology_ratio_lv1": 1},
    other_deps={
        "_integ_increase_in_biomass_installation_technology_ratio_lv1": {
            "initial": {"increase_in_biomass_installation_technology_ratio_lv3": 1},
            "step": {"inflow_ibitrlv1": 1, "outflow_ibitrlv1": 1},
        }
    },
)
def increase_in_biomass_installation_technology_ratio_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_biomass_installation_technology_ratio_lv1()


_integ_increase_in_biomass_installation_technology_ratio_lv1 = Integ(
    lambda: inflow_ibitrlv1() - outflow_ibitrlv1(),
    lambda: increase_in_biomass_installation_technology_ratio_lv3(),
    "_integ_increase_in_biomass_installation_technology_ratio_lv1",
)


@component.add(
    name="Increase in Biomass Installation Technology Ratio LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_biomass_installation_technology_ratio_lv2": 1},
    other_deps={
        "_integ_increase_in_biomass_installation_technology_ratio_lv2": {
            "initial": {"increase_in_biomass_installation_technology_ratio_lv3": 1},
            "step": {"inflow_ibitrlv2": 1, "outflow_ibitrlv2": 1},
        }
    },
)
def increase_in_biomass_installation_technology_ratio_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_biomass_installation_technology_ratio_lv2()


_integ_increase_in_biomass_installation_technology_ratio_lv2 = Integ(
    lambda: inflow_ibitrlv2() - outflow_ibitrlv2(),
    lambda: increase_in_biomass_installation_technology_ratio_lv3(),
    "_integ_increase_in_biomass_installation_technology_ratio_lv2",
)


@component.add(
    name="Increase in Biomass Installation Technology Ratio LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_biomass_installation_technology_ratio_lv3": 1},
    other_deps={
        "_integ_increase_in_biomass_installation_technology_ratio_lv3": {
            "initial": {"effectiveness_ibitr": 1, "delay_time_ibitr": 1},
            "step": {"inflow_ibitrlv3": 1, "outflow_ibitrlv3": 1},
        }
    },
)
def increase_in_biomass_installation_technology_ratio_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_biomass_installation_technology_ratio_lv3()


_integ_increase_in_biomass_installation_technology_ratio_lv3 = Integ(
    lambda: inflow_ibitrlv3() - outflow_ibitrlv3(),
    lambda: effectiveness_ibitr() * delay_time_ibitr(),
    "_integ_increase_in_biomass_installation_technology_ratio_lv3",
)


@component.add(
    name="Outflow FPLCLV3",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_protected_land_change_lv3": 1, "delay_time_fplclv": 1},
)
def outflow_fplclv3():
    return forest_protected_land_change_lv3() / delay_time_fplclv()


@component.add(
    name="Outflow IBETRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_biomass_energy_technology_ratio_lv1": 1,
        "delay_time_ibetr": 1,
    },
)
def outflow_ibetrlv1():
    return increase_in_biomass_energy_technology_ratio_lv1() / delay_time_ibetr()


@component.add(
    name="Inflow AHA",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area_harvested": 1},
)
def inflow_aha():
    return area_harvested()


@component.add(
    name="Outflow ISITRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_solar_installation_technology_ratio_lv3": 1,
        "delay_time_isitr": 1,
    },
)
def outflow_isitrlv3():
    return increase_in_solar_installation_technology_ratio_lv3() / delay_time_isitr()


@component.add(
    name="Outflow IBITRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_biomass_installation_technology_ratio_lv1": 1,
        "delay_time_ibitr": 1,
    },
)
def outflow_ibitrlv1():
    return increase_in_biomass_installation_technology_ratio_lv1() / delay_time_ibitr()


@component.add(
    name="Outflow IRGFDULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3": 1,
        "delay_time_irgfdu": 1,
    },
)
def outflow_irgfdulv3():
    return (
        increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv3()
        / delay_time_irgfdu()
    )


@component.add(
    name="Outflow IRGFRULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1": 1,
        "delay_time_irgfru": 1,
    },
)
def outflow_irgfrulv1():
    return (
        increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv1()
        / delay_time_irgfru()
    )


@component.add(
    name="Inflow IRGFDULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irgfdulv2": 1},
)
def inflow_irgfdulv3():
    return outflow_irgfdulv2()


@component.add(
    name="Inflow IRGFRULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_irgfru": 1},
)
def inflow_irgfrulv1():
    return effectiveness_irgfru()


@component.add(
    name="Inflow IRGFRULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irgfrulv1": 1},
)
def inflow_irgfrulv2():
    return outflow_irgfrulv1()


@component.add(
    name="Increase in Ratio of Gas Fraction Recoverable to Unrecoverable LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2": {
            "initial": {
                "increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3": 1
            },
            "step": {"inflow_irgfrulv2": 1, "outflow_irgfrulv2": 1},
        }
    },
)
def increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2()


_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2 = Integ(
    lambda: inflow_irgfrulv2() - outflow_irgfrulv2(),
    lambda: increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3(),
    "_integ_increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2",
)


@component.add(
    name="Outflow ISITRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_solar_installation_technology_ratio_lv1": 1,
        "delay_time_isitr": 1,
    },
)
def outflow_isitrlv1():
    return increase_in_solar_installation_technology_ratio_lv1() / delay_time_isitr()


@component.add(
    name="Increase in Solar Energy Technology Ratio LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_solar_energy_technology_ratio_lv1": 1},
    other_deps={
        "_integ_increase_in_solar_energy_technology_ratio_lv1": {
            "initial": {"increase_in_solar_energy_technology_ratio_lv3": 1},
            "step": {"inflow_isetlv1": 1, "outflow_isetlv1": 1},
        }
    },
)
def increase_in_solar_energy_technology_ratio_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_solar_energy_technology_ratio_lv1()


_integ_increase_in_solar_energy_technology_ratio_lv1 = Integ(
    lambda: inflow_isetlv1() - outflow_isetlv1(),
    lambda: increase_in_solar_energy_technology_ratio_lv3(),
    "_integ_increase_in_solar_energy_technology_ratio_lv1",
)


@component.add(
    name="Increase in Solar Energy Technology Ratio LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_solar_energy_technology_ratio_lv2": 1},
    other_deps={
        "_integ_increase_in_solar_energy_technology_ratio_lv2": {
            "initial": {"increase_in_solar_energy_technology_ratio_lv3": 1},
            "step": {"inflow_isetlv2": 1, "outflow_isetlv2": 1},
        }
    },
)
def increase_in_solar_energy_technology_ratio_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_solar_energy_technology_ratio_lv2()


_integ_increase_in_solar_energy_technology_ratio_lv2 = Integ(
    lambda: inflow_isetlv2() - outflow_isetlv2(),
    lambda: increase_in_solar_energy_technology_ratio_lv3(),
    "_integ_increase_in_solar_energy_technology_ratio_lv2",
)


@component.add(
    name="Increase in Solar Energy Technology Ratio LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_solar_energy_technology_ratio_lv3": 1},
    other_deps={
        "_integ_increase_in_solar_energy_technology_ratio_lv3": {
            "initial": {"effectiveness_isetr": 1, "delay_time_isetr": 1},
            "step": {"inflow_isetlv3": 1, "outflow_isetlv3": 1},
        }
    },
)
def increase_in_solar_energy_technology_ratio_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_solar_energy_technology_ratio_lv3()


_integ_increase_in_solar_energy_technology_ratio_lv3 = Integ(
    lambda: inflow_isetlv3() - outflow_isetlv3(),
    lambda: effectiveness_isetr() * delay_time_isetr(),
    "_integ_increase_in_solar_energy_technology_ratio_lv3",
)


@component.add(
    name="Increase in Solar Installation Technology Ratio LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_solar_installation_technology_ratio_lv1": 1},
    other_deps={
        "_integ_increase_in_solar_installation_technology_ratio_lv1": {
            "initial": {"increase_in_solar_installation_technology_ratio_lv3": 1},
            "step": {"inflow_isitrlv1": 1, "outflow_isitrlv1": 1},
        }
    },
)
def increase_in_solar_installation_technology_ratio_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_solar_installation_technology_ratio_lv1()


_integ_increase_in_solar_installation_technology_ratio_lv1 = Integ(
    lambda: inflow_isitrlv1() - outflow_isitrlv1(),
    lambda: increase_in_solar_installation_technology_ratio_lv3(),
    "_integ_increase_in_solar_installation_technology_ratio_lv1",
)


@component.add(
    name="Inflow IBETRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ibetrlv1": 1},
)
def inflow_ibetrlv2():
    return outflow_ibetrlv1()


@component.add(
    name="Inflow IBETRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ibetrlv2": 1},
)
def inflow_ibetrlv3():
    return outflow_ibetrlv2()


@component.add(
    name="Outflow IRGFRULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3": 1,
        "delay_time_irgfru": 1,
    },
)
def outflow_irgfrulv3():
    return (
        increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv3()
        / delay_time_irgfru()
    )


@component.add(
    name="Outflow ISETLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_solar_energy_technology_ratio_lv1": 1,
        "delay_time_isetr": 1,
    },
)
def outflow_isetlv1():
    return increase_in_solar_energy_technology_ratio_lv1() / delay_time_isetr()


@component.add(
    name="Inflow IBITRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ibitrlv2": 1},
)
def inflow_ibitrlv3():
    return outflow_ibitrlv2()


@component.add(
    name="Outflow FPLCLV1",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_protected_land_change_lv1": 1, "delay_time_fplclv": 1},
)
def outflow_fplclv1():
    return forest_protected_land_change_lv1() / delay_time_fplclv()


@component.add(
    name="Outflow FPLCLV2",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_protected_land_change_lv2": 1, "delay_time_fplclv": 1},
)
def outflow_fplclv2():
    return forest_protected_land_change_lv2() / delay_time_fplclv()


@component.add(
    name="Outflow ISITRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_solar_installation_technology_ratio_lv2": 1,
        "delay_time_isitr": 1,
    },
)
def outflow_isitrlv2():
    return increase_in_solar_installation_technology_ratio_lv2() / delay_time_isitr()


@component.add(
    name="Inflow FPLCLV2",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_fplclv1": 1},
)
def inflow_fplclv2():
    return outflow_fplclv1()


@component.add(
    name="Inflow FPLCLV3",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_fplclv2": 1},
)
def inflow_fplclv3():
    return outflow_fplclv2()


@component.add(
    name="Inflow IBETRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_ibetr": 1},
)
def inflow_ibetrlv1():
    return effectiveness_ibetr()


@component.add(
    name="Inflow ISITRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_isitrlv1": 1},
)
def inflow_isitrlv2():
    return outflow_isitrlv1()


@component.add(
    name="Outflow IRGFDULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2": 1,
        "delay_time_irgfdu": 1,
    },
)
def outflow_irgfdulv2():
    return (
        increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv2()
        / delay_time_irgfdu()
    )


@component.add(
    name="Outflow IBITRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_biomass_installation_technology_ratio_lv3": 1,
        "delay_time_ibitr": 1,
    },
)
def outflow_ibitrlv3():
    return increase_in_biomass_installation_technology_ratio_lv3() / delay_time_ibitr()


@component.add(
    name="Inflow IBITRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ibitrlv1": 1},
)
def inflow_ibitrlv2():
    return outflow_ibitrlv1()


@component.add(
    name="Inflow ISITRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_isitr": 1},
)
def inflow_isitrlv1():
    return effectiveness_isitr()


@component.add(
    name="Outflow IRGFDULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1": 1,
        "delay_time_irgfdu": 1,
    },
)
def outflow_irgfdulv1():
    return (
        increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable_lv1()
        / delay_time_irgfdu()
    )


@component.add(
    name="Inflow ISETLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_isetlv2": 1},
)
def inflow_isetlv3():
    return outflow_isetlv2()


@component.add(
    name="Inflow FPLCLV1",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_fplc": 1},
)
def inflow_fplclv1():
    return fraction_fplc()


@component.add(
    name="Inflow ISETLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_isetlv1": 1},
)
def inflow_isetlv2():
    return outflow_isetlv1()


@component.add(
    name="Outflow IRGFRULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2": 1,
        "delay_time_irgfru": 1,
    },
)
def outflow_irgfrulv2():
    return (
        increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable_lv2()
        / delay_time_irgfru()
    )


@component.add(
    name="Inflow IBITRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_ibitr": 1},
)
def inflow_ibitrlv1():
    return effectiveness_ibitr()


@component.add(
    name="Inflow IWETRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_iwetrlv1": 1},
)
def inflow_iwetrlv2():
    return outflow_iwetrlv1()


@component.add(
    name="Inflow IWETRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_iwetrlv2": 1},
)
def inflow_iwetrlv3():
    return outflow_iwetrlv2()


@component.add(
    name="Increase in Wind Energy Technology Ratio LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_wind_energy_technology_ratio_lv1": 1},
    other_deps={
        "_integ_increase_in_wind_energy_technology_ratio_lv1": {
            "initial": {"increase_in_wind_energy_technology_ratio_lv3": 1},
            "step": {"inflow_iwetrlv1": 1, "outflow_iwetrlv1": 1},
        }
    },
)
def increase_in_wind_energy_technology_ratio_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_wind_energy_technology_ratio_lv1()


_integ_increase_in_wind_energy_technology_ratio_lv1 = Integ(
    lambda: inflow_iwetrlv1() - outflow_iwetrlv1(),
    lambda: increase_in_wind_energy_technology_ratio_lv3(),
    "_integ_increase_in_wind_energy_technology_ratio_lv1",
)


@component.add(
    name="Increase in Wind Energy Technology Ratio LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_wind_energy_technology_ratio_lv2": 1},
    other_deps={
        "_integ_increase_in_wind_energy_technology_ratio_lv2": {
            "initial": {"increase_in_wind_energy_technology_ratio_lv3": 1},
            "step": {"inflow_iwetrlv2": 1, "outflow_iwetrlv2": 1},
        }
    },
)
def increase_in_wind_energy_technology_ratio_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_wind_energy_technology_ratio_lv2()


_integ_increase_in_wind_energy_technology_ratio_lv2 = Integ(
    lambda: inflow_iwetrlv2() - outflow_iwetrlv2(),
    lambda: increase_in_wind_energy_technology_ratio_lv3(),
    "_integ_increase_in_wind_energy_technology_ratio_lv2",
)


@component.add(
    name="Increase in Wind Energy Technology Ratio LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_wind_energy_technology_ratio_lv3": 1},
    other_deps={
        "_integ_increase_in_wind_energy_technology_ratio_lv3": {
            "initial": {"effectiveness_iwetr": 1, "delay_time_iwetr": 1},
            "step": {"inflow_iwetrlv3": 1, "outflow_iwetrlv3": 1},
        }
    },
)
def increase_in_wind_energy_technology_ratio_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_wind_energy_technology_ratio_lv3()


_integ_increase_in_wind_energy_technology_ratio_lv3 = Integ(
    lambda: inflow_iwetrlv3() - outflow_iwetrlv3(),
    lambda: effectiveness_iwetr() * delay_time_iwetr(),
    "_integ_increase_in_wind_energy_technology_ratio_lv3",
)


@component.add(
    name="Outflow IWETRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_wind_energy_technology_ratio_lv1": 1,
        "delay_time_iwetr": 1,
    },
)
def outflow_iwetrlv1():
    return increase_in_wind_energy_technology_ratio_lv1() / delay_time_iwetr()


@component.add(
    name="Outflow IWETRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_wind_energy_technology_ratio_lv2": 1,
        "delay_time_iwetr": 1,
    },
)
def outflow_iwetrlv2():
    return increase_in_wind_energy_technology_ratio_lv2() / delay_time_iwetr()


@component.add(
    name="Delay Time IWETR",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_technology_development_time": 1},
)
def delay_time_iwetr():
    return wind_energy_technology_development_time() / 3


@component.add(
    name="Outflow EGMeYA",
    units="Ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"expected_grassland_meat_yield_accumulative": 1},
)
def outflow_egmeya():
    return expected_grassland_meat_yield_accumulative() / 1


@component.add(
    name="Effectiveness IWETR",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_wind_energy_efficiency": 1,
        "effectiveness_of_investment_in_wind_energy_technology": 1,
    },
)
def effectiveness_iwetr():
    return (
        investment_in_wind_energy_efficiency()
        * effectiveness_of_investment_in_wind_energy_technology()
    )


@component.add(
    name="Outflow IWETRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_wind_energy_technology_ratio_lv3": 1,
        "delay_time_iwetr": 1,
    },
)
def outflow_iwetrlv3():
    return increase_in_wind_energy_technology_ratio_lv3() / delay_time_iwetr()


@component.add(
    name="Expected Grassland Meat Yield Accumulative",
    units="Ton/ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_expected_grassland_meat_yield_accumulative": 1},
    other_deps={
        "_integ_expected_grassland_meat_yield_accumulative": {
            "initial": {"initial_grassland_meat_yield": 1},
            "step": {"inflow_egmeya": 1, "outflow_egmeya": 1},
        }
    },
)
def expected_grassland_meat_yield_accumulative():
    """
    For coverting DELAY1I function only. Added by Q Ye in July 2024
    """
    return _integ_expected_grassland_meat_yield_accumulative()


_integ_expected_grassland_meat_yield_accumulative = Integ(
    lambda: inflow_egmeya() - outflow_egmeya(),
    lambda: initial_grassland_meat_yield() * 1,
    "_integ_expected_grassland_meat_yield_accumulative",
)


@component.add(
    name="Inflow IWETRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_iwetr": 1},
)
def inflow_iwetrlv1():
    return effectiveness_iwetr()


@component.add(
    name="Inflow EGMeYA",
    units="Ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_meat_yield": 1},
)
def inflow_egmeya():
    return grassland_meat_yield()


@component.add(
    name="Inflow IWITRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_iwitrlv1": 1},
)
def inflow_iwitrlv2():
    return outflow_iwitrlv1()


@component.add(
    name="Inflow IWITRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ourflow_iwitrlv2": 1},
)
def inflow_iwitrlv3():
    return ourflow_iwitrlv2()


@component.add(
    name="Increase in Wind Installation Technology Ratio LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_wind_installation_technology_ratio_lv1": 1},
    other_deps={
        "_integ_increase_in_wind_installation_technology_ratio_lv1": {
            "initial": {"increase_in_wind_installation_technology_ratio_lv3": 1},
            "step": {"inflow_iwitrlv1": 1, "outflow_iwitrlv1": 1},
        }
    },
)
def increase_in_wind_installation_technology_ratio_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_wind_installation_technology_ratio_lv1()


_integ_increase_in_wind_installation_technology_ratio_lv1 = Integ(
    lambda: inflow_iwitrlv1() - outflow_iwitrlv1(),
    lambda: increase_in_wind_installation_technology_ratio_lv3(),
    "_integ_increase_in_wind_installation_technology_ratio_lv1",
)


@component.add(
    name="Increase in Wind Installation Technology Ratio LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_wind_installation_technology_ratio_lv2": 1},
    other_deps={
        "_integ_increase_in_wind_installation_technology_ratio_lv2": {
            "initial": {"increase_in_wind_installation_technology_ratio_lv3": 1},
            "step": {"inflow_iwitrlv2": 1, "ourflow_iwitrlv2": 1},
        }
    },
)
def increase_in_wind_installation_technology_ratio_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_wind_installation_technology_ratio_lv2()


_integ_increase_in_wind_installation_technology_ratio_lv2 = Integ(
    lambda: inflow_iwitrlv2() - ourflow_iwitrlv2(),
    lambda: increase_in_wind_installation_technology_ratio_lv3(),
    "_integ_increase_in_wind_installation_technology_ratio_lv2",
)


@component.add(
    name="Increase in Wind Installation Technology Ratio LV3",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_increase_in_wind_installation_technology_ratio_lv3": 1},
    other_deps={
        "_integ_increase_in_wind_installation_technology_ratio_lv3": {
            "initial": {"effectiveness_iwitr": 1, "delay_time_iwir": 1},
            "step": {"inflow_iwitrlv3": 1, "outflow_iwitrlv3": 1},
        }
    },
)
def increase_in_wind_installation_technology_ratio_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_wind_installation_technology_ratio_lv3()


_integ_increase_in_wind_installation_technology_ratio_lv3 = Integ(
    lambda: inflow_iwitrlv3() - outflow_iwitrlv3(),
    lambda: effectiveness_iwitr() * delay_time_iwir(),
    "_integ_increase_in_wind_installation_technology_ratio_lv3",
)


@component.add(
    name="Delay Time IRCFDU",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_discovery_technology_development_time": 1},
)
def delay_time_ircfdu():
    return coal_discovery_technology_development_time() / 3


@component.add(
    name="Delay Time IRCFRU",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_recovery_technology_development_time": 1},
)
def delay_time_ircfru():
    return coal_recovery_technology_development_time() / 3


@component.add(
    name="Delay Time IWIR",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_installation_technology_development_time": 1},
)
def delay_time_iwir():
    return wind_installation_technology_development_time() / 3


@component.add(
    name="Increase in Ratio of Coal Fraction Discoverable to Undiscoverable LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2": {
            "initial": {
                "increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3": 1
            },
            "step": {"inflow_ircfdulv2": 1, "outflow_ircfdulv2": 1},
        }
    },
)
def increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return (
        _integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2()
    )


_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2 = Integ(
    lambda: inflow_ircfdulv2() - outflow_ircfdulv2(),
    lambda: increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3(),
    "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2",
)


@component.add(
    name="Effectiveness IRCFDU",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_coal_discovery_technology": 1,
        "investment_in_coal_discovery_technology": 1,
    },
)
def effectiveness_ircfdu():
    return (
        effectiveness_of_investment_in_coal_discovery_technology()
        * investment_in_coal_discovery_technology()
    )


@component.add(
    name="Effectiveness IRCFRU",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_coal_recovery_technology": 1,
        "effectiveness_of_investment_in_coal_recovery_technology": 1,
    },
)
def effectiveness_ircfru():
    return (
        investment_in_coal_recovery_technology()
        * effectiveness_of_investment_in_coal_recovery_technology()
    )


@component.add(
    name="Effectiveness IWITR",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_wind_energy_installation": 1,
        "effectiveness_of_investment_in_wind_installation_technology": 1,
    },
)
def effectiveness_iwitr():
    return (
        investment_in_wind_energy_installation()
        * effectiveness_of_investment_in_wind_installation_technology()
    )


@component.add(
    name="Increase in Ratio of Coal Fraction Recoverable to Unrecoverable LV3",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3": {
            "initial": {"effectiveness_ircfru": 1, "delay_time_ircfru": 1},
            "step": {"inflow_ircfrulv3": 1, "outflow_ircfrulv3": 1},
        }
    },
)
def increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3()


_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3 = Integ(
    lambda: inflow_ircfrulv3() - outflow_ircfrulv3(),
    lambda: effectiveness_ircfru() * delay_time_ircfru(),
    "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3",
)


@component.add(
    name="Outflow IRCFRULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2": 1,
        "delay_time_ircfru": 1,
    },
)
def outflow_ircfrulv2():
    return (
        increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2()
        / delay_time_ircfru()
    )


@component.add(
    name="Inflow IRCFDULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_ircfdu": 1},
)
def inflow_ircfdulv1():
    return effectiveness_ircfdu()


@component.add(
    name="Inflow IRCFDULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ircfdulv1": 1},
)
def inflow_ircfdulv2():
    return outflow_ircfdulv1()


@component.add(
    name="Inflow IRCFDULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ircfdulv2": 1},
)
def inflow_ircfdulv3():
    return outflow_ircfdulv2()


@component.add(
    name="Increase in Ratio of Coal Fraction Discoverable to Undiscoverable LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1": {
            "initial": {
                "increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3": 1
            },
            "step": {"inflow_ircfdulv1": 1, "outflow_ircfdulv1": 1},
        }
    },
)
def increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return (
        _integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1()
    )


_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1 = Integ(
    lambda: inflow_ircfdulv1() - outflow_ircfdulv1(),
    lambda: increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3(),
    "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1",
)


@component.add(
    name="Inflow IRCFRULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_ircfru": 1},
)
def inflow_ircfrulv1():
    return effectiveness_ircfru()


@component.add(
    name="Increase in Ratio of Coal Fraction Discoverable to Undiscoverable LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3": {
            "initial": {"effectiveness_ircfdu": 1, "delay_time_ircfdu": 1},
            "step": {"inflow_ircfdulv3": 1, "outflow_ircfdulv3": 1},
        }
    },
)
def increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return (
        _integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3()
    )


_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3 = Integ(
    lambda: inflow_ircfdulv3() - outflow_ircfdulv3(),
    lambda: effectiveness_ircfdu() * delay_time_ircfdu(),
    "_integ_increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3",
)


@component.add(
    name="Increase in Ratio of Coal Fraction Recoverable to Unrecoverable LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1": {
            "initial": {
                "increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3": 1
            },
            "step": {"inflow_ircfrulv1": 1, "outflow_ircfrulv1": 1},
        }
    },
)
def increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1()


_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1 = Integ(
    lambda: inflow_ircfrulv1() - outflow_ircfrulv1(),
    lambda: increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3(),
    "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1",
)


@component.add(
    name="Increase in Ratio of Coal Fraction Recoverable to Unrecoverable LV2",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2": 1
    },
    other_deps={
        "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2": {
            "initial": {
                "increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3": 1
            },
            "step": {"inflow_ircfrulv2": 1, "outflow_ircfrulv2": 1},
        }
    },
)
def increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2()


_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2 = Integ(
    lambda: inflow_ircfrulv2() - outflow_ircfrulv2(),
    lambda: increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3(),
    "_integ_increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv2",
)


@component.add(
    name="Outflow IRCFDULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3": 1,
        "delay_time_ircfdu": 1,
    },
)
def outflow_ircfdulv3():
    return (
        increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv3()
        / delay_time_ircfdu()
    )


@component.add(
    name="Outflow IRCFRULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1": 1,
        "delay_time_ircfru": 1,
    },
)
def outflow_ircfrulv1():
    return (
        increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv1()
        / delay_time_ircfru()
    )


@component.add(
    name="Outflow IRCFRULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3": 1,
        "delay_time_ircfru": 1,
    },
)
def outflow_ircfrulv3():
    return (
        increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable_lv3()
        / delay_time_ircfru()
    )


@component.add(
    name="Outflow IWITRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_wind_installation_technology_ratio_lv1": 1,
        "delay_time_iwir": 1,
    },
)
def outflow_iwitrlv1():
    return increase_in_wind_installation_technology_ratio_lv1() / delay_time_iwir()


@component.add(
    name="Outflow IWITRLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_wind_installation_technology_ratio_lv3": 1,
        "delay_time_iwir": 1,
    },
)
def outflow_iwitrlv3():
    return increase_in_wind_installation_technology_ratio_lv3() / delay_time_iwir()


@component.add(
    name="Outflow IRCFDULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2": 1,
        "delay_time_ircfdu": 1,
    },
)
def outflow_ircfdulv2():
    return (
        increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv2()
        / delay_time_ircfdu()
    )


@component.add(
    name="Inflow IRCFRULV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ircfrulv2": 1},
)
def inflow_ircfrulv3():
    return outflow_ircfrulv2()


@component.add(
    name="Inflow IRCFRULV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ircfrulv1": 1},
)
def inflow_ircfrulv2():
    return outflow_ircfrulv1()


@component.add(
    name="Inflow IWITRLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effectiveness_iwitr": 1},
)
def inflow_iwitrlv1():
    return effectiveness_iwitr()


@component.add(
    name="Ourflow IWITRLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_wind_installation_technology_ratio_lv2": 1,
        "delay_time_iwir": 1,
    },
)
def ourflow_iwitrlv2():
    return increase_in_wind_installation_technology_ratio_lv2() / delay_time_iwir()


@component.add(
    name="Outflow IRCFDULV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1": 1,
        "delay_time_ircfdu": 1,
    },
)
def outflow_ircfdulv1():
    return (
        increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable_lv1()
        / delay_time_ircfdu()
    )


@component.add(
    name="CCS Improvement Change LV1",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ccs_improvement_change_lv1": 1},
    other_deps={
        "_integ_ccs_improvement_change_lv1": {
            "initial": {"ccs_improvement_change_lv3": 1},
            "step": {"inflow_ccsiclv1": 1, "outflow_ccsiclv1": 1},
        }
    },
)
def ccs_improvement_change_lv1():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_ccs_improvement_change_lv1()


_integ_ccs_improvement_change_lv1 = Integ(
    lambda: inflow_ccsiclv1() - outflow_ccsiclv1(),
    lambda: ccs_improvement_change_lv3(),
    "_integ_ccs_improvement_change_lv1",
)


@component.add(
    name="CCS Improvement Change LV2",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ccs_improvement_change_lv2": 1},
    other_deps={
        "_integ_ccs_improvement_change_lv2": {
            "initial": {"ccs_improvement_change_lv3": 1},
            "step": {"inflow_ccsiclv2": 1, "outflow_ccsiclv2": 1},
        }
    },
)
def ccs_improvement_change_lv2():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_ccs_improvement_change_lv2()


_integ_ccs_improvement_change_lv2 = Integ(
    lambda: inflow_ccsiclv2() - outflow_ccsiclv2(),
    lambda: ccs_improvement_change_lv3(),
    "_integ_ccs_improvement_change_lv2",
)


@component.add(
    name="CCS Improvement Change LV3",
    units="1",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ccs_improvement_change_lv3": 1},
    other_deps={
        "_integ_ccs_improvement_change_lv3": {
            "initial": {"delay_time_ccsic": 1, "pressure_ccsic": 1},
            "step": {"inflow_ccsiclv3": 1, "outflow_ccsiclv3": 1},
        }
    },
)
def ccs_improvement_change_lv3():
    """
    For coverting DELAY3 function only. Added by Q Ye in July 2024
    """
    return _integ_ccs_improvement_change_lv3()


_integ_ccs_improvement_change_lv3 = Integ(
    lambda: inflow_ccsiclv3() - outflow_ccsiclv3(),
    lambda: delay_time_ccsic() * pressure_ccsic(),
    "_integ_ccs_improvement_change_lv3",
)


@component.add(
    name="Delay Time CCSIC",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time_to_improve_ccs": 1},
)
def delay_time_ccsic():
    return time_to_improve_ccs() / 3


@component.add(
    name="Outflow CCSICLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ccs_improvement_change_lv2": 1, "delay_time_ccsic": 1},
)
def outflow_ccsiclv2():
    return ccs_improvement_change_lv2() / delay_time_ccsic()


@component.add(
    name="Outflow CCSICLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ccs_improvement_change_lv3": 1, "delay_time_ccsic": 1},
)
def outflow_ccsiclv3():
    return ccs_improvement_change_lv3() / delay_time_ccsic()


@component.add(
    name="Outflow EGMYA",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"expected_grassland_milk_yield_accumulative": 1},
)
def outflow_egmya():
    return expected_grassland_milk_yield_accumulative() / 1


@component.add(
    name="Expected Crop Yield Accumulative",
    units="Ton/ha",
    subscripts=["PlantFood"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_expected_crop_yield_accumulative": 1},
    other_deps={
        "_integ_expected_crop_yield_accumulative": {
            "initial": {"init_crop_yield": 1},
            "step": {"inflow_exya": 1, "outflow_exya": 1},
        }
    },
)
def expected_crop_yield_accumulative():
    """
    For coverting DELAY1I function only. Added by Q Ye in July 2024
    """
    return _integ_expected_crop_yield_accumulative()


_integ_expected_crop_yield_accumulative = Integ(
    lambda: inflow_exya() - outflow_exya(),
    lambda: init_crop_yield(),
    "_integ_expected_crop_yield_accumulative",
)


@component.add(
    name="Expected Grassland Milk Yield Accumulative",
    units="Ton/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_expected_grassland_milk_yield_accumulative": 1},
    other_deps={
        "_integ_expected_grassland_milk_yield_accumulative": {
            "initial": {"initial_grassland_milk_yield": 1},
            "step": {"inflow_egmya": 1, "outflow_egmya": 1},
        }
    },
)
def expected_grassland_milk_yield_accumulative():
    """
    For coverting DELAY1I function only. Added by Q Ye in July 2024
    """
    return _integ_expected_grassland_milk_yield_accumulative()


_integ_expected_grassland_milk_yield_accumulative = Integ(
    lambda: inflow_egmya() - outflow_egmya(),
    lambda: initial_grassland_milk_yield(),
    "_integ_expected_grassland_milk_yield_accumulative",
)


@component.add(
    name="Inflow CCSICLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pressure_ccsic": 1},
)
def inflow_ccsiclv1():
    return pressure_ccsic()


@component.add(
    name="Inflow CCSICLV2",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ccsiclv1": 1},
)
def inflow_ccsiclv2():
    return outflow_ccsiclv1()


@component.add(
    name="Inflow CCSICLV3",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ccsiclv2": 1},
)
def inflow_ccsiclv3():
    return outflow_ccsiclv2()


@component.add(
    name="Inflow EGMYA",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_milk_yield": 1},
)
def inflow_egmya():
    return grassland_milk_yield()


@component.add(
    name="Outflow CCSICLV1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ccs_improvement_change_lv1": 1, "delay_time_ccsic": 1},
)
def outflow_ccsiclv1():
    return ccs_improvement_change_lv1() / delay_time_ccsic()


@component.add(
    name="Inflow PVA",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"meatbased_diet_followers": 1},
)
def inflow_pva():
    return meatbased_diet_followers()


@component.add(
    name="Inflow EXYA",
    units="Ton/(ha*Year)",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"crop_yield_for_each_category": 1},
)
def inflow_exya():
    return crop_yield_for_each_category()


@component.add(
    name="Outflow EXYA",
    units="Ton/(ha*Year)",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"expected_crop_yield_accumulative": 1},
)
def outflow_exya():
    return expected_crop_yield_accumulative() / 1


@component.add(
    name="Pressure CCSIC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "presure_to_adjust_total_c_emission_from_fossil_fuels": 1,
        "effectiveness_of_pressure_to_adjust_c_emission": 1,
    },
)
def pressure_ccsic():
    return (
        presure_to_adjust_total_c_emission_from_fossil_fuels()
        * effectiveness_of_pressure_to_adjust_c_emission()
    )


@component.add(
    name="Potential Vegetarians Accumulative",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_potential_vegetarians_accumulative": 1},
    other_deps={
        "_integ_potential_vegetarians_accumulative": {
            "initial": {"initial_meatbased_diet_followers": 1},
            "step": {"inflow_pva": 1, "outflow_pva": 1},
        }
    },
)
def potential_vegetarians_accumulative():
    """
    For coverting DELAY1I function only. Added by Q Ye in July 2024
    """
    return _integ_potential_vegetarians_accumulative()


_integ_potential_vegetarians_accumulative = Integ(
    lambda: inflow_pva() - outflow_pva(),
    lambda: initial_meatbased_diet_followers(),
    "_integ_potential_vegetarians_accumulative",
)


@component.add(
    name="Outflow PVA",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_vegetarians_accumulative": 1},
)
def outflow_pva():
    return potential_vegetarians_accumulative() / 1


@component.add(
    name="Init AHA",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_aha():
    return xr.DataArray(
        [2.19830e07, 2.83354e08, 4.06016e07, 6.32654e07],
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    )


@component.add(name="Delay Time PERPA", comp_type="Constant", comp_subtype="Normal")
def delay_time_perpa():
    return 1


@component.add(
    name="Enrollment Rate to Primary Education Accumulative",
    units="People",
    subscripts=["Gender"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_enrollment_rate_to_primary_education_accumulative": 1},
    other_deps={
        "_integ_enrollment_rate_to_primary_education_accumulative": {
            "initial": {"inflow_erpea": 1, "average_primary_education_duration": 1},
            "step": {"inflow_erpea": 1, "outflow_erpea": 1},
        }
    },
)
def enrollment_rate_to_primary_education_accumulative():
    """
    For coverting DELAY1 function only. Added by Q Ye in July 2024
    """
    return _integ_enrollment_rate_to_primary_education_accumulative()


_integ_enrollment_rate_to_primary_education_accumulative = Integ(
    lambda: inflow_erpea() - outflow_erpea(),
    lambda: inflow_erpea() * average_primary_education_duration(),
    "_integ_enrollment_rate_to_primary_education_accumulative",
)


@component.add(
    name="Enrollment Rate to Secondary Education Accumulative",
    units="People",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_enrollment_rate_to_secondary_education_accumulative": 1,
        "_integ_enrollment_rate_to_secondary_education_accumulative_1": 1,
    },
    other_deps={
        "_integ_enrollment_rate_to_secondary_education_accumulative": {
            "initial": {"inflow_ersea": 1, "average_secondary_education_duration": 1},
            "step": {"inflow_ersea": 1, "outflow_ersea": 1},
        },
        "_integ_enrollment_rate_to_secondary_education_accumulative_1": {
            "initial": {"inflow_ersea": 1, "average_secondary_education_duration": 1},
            "step": {"inflow_ersea": 1, "outflow_ersea": 1},
        },
    },
)
def enrollment_rate_to_secondary_education_accumulative():
    """
    For coverting DELAY1 function only. Added by Q Ye in July 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[
        :, ['"10-14"']
    ] = _integ_enrollment_rate_to_secondary_education_accumulative().values
    value.loc[
        :, ['"15-19"']
    ] = _integ_enrollment_rate_to_secondary_education_accumulative_1().values
    return value


_integ_enrollment_rate_to_secondary_education_accumulative = Integ(
    lambda: (
        inflow_ersea().loc[:, '"10-14"'].reset_coords(drop=True)
        - outflow_ersea().loc[:, '"10-14"'].reset_coords(drop=True)
    ).expand_dims({"SchoolEnrollment": ['"10-14"']}, 1),
    lambda: (
        inflow_ersea().loc[:, '"10-14"'].reset_coords(drop=True)
        * average_secondary_education_duration()
    ).expand_dims({"SchoolEnrollment": ['"10-14"']}, 1),
    "_integ_enrollment_rate_to_secondary_education_accumulative",
)

_integ_enrollment_rate_to_secondary_education_accumulative_1 = Integ(
    lambda: (
        inflow_ersea().loc[:, '"15-19"'].reset_coords(drop=True)
        - outflow_ersea().loc[:, '"15-19"'].reset_coords(drop=True)
    ).expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    lambda: (
        inflow_ersea().loc[:, '"15-19"'].reset_coords(drop=True)
        * average_secondary_education_duration()
    ).expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    "_integ_enrollment_rate_to_secondary_education_accumulative_1",
)


@component.add(
    name="Primary Enrollment Rate Previous Accumulative",
    units="People",
    subscripts=["Gender"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_primary_enrollment_rate_previous_accumulative": 1},
    other_deps={
        "_integ_primary_enrollment_rate_previous_accumulative": {
            "initial": {"delay_time_perpa": 1, "init_perpa": 1},
            "step": {"inflow_perpa": 1, "outflow_perpa": 1},
        }
    },
)
def primary_enrollment_rate_previous_accumulative():
    """
    For coverting DELAY1I function only. Added by Q Ye in July 2024
    """
    return _integ_primary_enrollment_rate_previous_accumulative()


_integ_primary_enrollment_rate_previous_accumulative = Integ(
    lambda: inflow_perpa() - outflow_perpa(),
    lambda: xr.DataArray(
        delay_time_perpa() * init_perpa(),
        {"Gender": _subscript_dict["Gender"]},
        ["Gender"],
    ),
    "_integ_primary_enrollment_rate_previous_accumulative",
)


@component.add(
    name="Inflow ERPEA",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_primary_education": 1},
)
def inflow_erpea():
    return enrollment_rate_to_primary_education()


@component.add(
    name="Inflow ERSEA",
    units="People/Year",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_secondary_education": 2},
)
def inflow_ersea():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = (
        enrollment_rate_to_secondary_education()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1)
        .values
    )
    value.loc[:, ['"15-19"']] = (
        enrollment_rate_to_secondary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    return value


@component.add(
    name="Outflow ERPEA",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "enrollment_rate_to_primary_education_accumulative": 1,
        "average_primary_education_duration": 1,
    },
)
def outflow_erpea():
    return (
        enrollment_rate_to_primary_education_accumulative()
        / average_primary_education_duration()
    )


@component.add(
    name="Inflow PERPA",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_primary_education": 1},
)
def inflow_perpa():
    return enrollment_rate_to_primary_education()


@component.add(
    name="Init PERPA", units="People", comp_type="Constant", comp_subtype="Normal"
)
def init_perpa():
    return 0


@component.add(
    name="Outflow PERPA",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "primary_enrollment_rate_previous_accumulative": 1,
        "delay_time_perpa": 1,
    },
)
def outflow_perpa():
    return primary_enrollment_rate_previous_accumulative() / delay_time_perpa()


@component.add(
    name="Outflow ERSEA",
    units="People/Year",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "enrollment_rate_to_secondary_education_accumulative": 2,
        "average_secondary_education_duration": 2,
    },
)
def outflow_ersea():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = (
        (
            enrollment_rate_to_secondary_education_accumulative()
            .loc[:, '"10-14"']
            .reset_coords(drop=True)
            / average_secondary_education_duration()
        )
        .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1)
        .values
    )
    value.loc[:, ['"15-19"']] = (
        (
            enrollment_rate_to_secondary_education_accumulative()
            .loc[:, '"15-19"']
            .reset_coords(drop=True)
            / average_secondary_education_duration()
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    return value


@component.add(
    name="Enrollment Rate to Tertiary Education Accumulative",
    units="People",
    subscripts=["Gender", "SecondaryGraduation"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_enrollment_rate_to_tertiary_education_accumulative": 1},
    other_deps={
        "_integ_enrollment_rate_to_tertiary_education_accumulative": {
            "initial": {"inflow_ertea": 1, "average_tertiary_education_duration": 1},
            "step": {"inflow_ertea": 1, "outflow_ertea": 1},
        }
    },
)
def enrollment_rate_to_tertiary_education_accumulative():
    """
    For coverting DELAY1 function only. Added by Q Ye in July 2024
    """
    return _integ_enrollment_rate_to_tertiary_education_accumulative()


_integ_enrollment_rate_to_tertiary_education_accumulative = Integ(
    lambda: inflow_ertea() - outflow_ertea(),
    lambda: inflow_ertea() * average_tertiary_education_duration(),
    "_integ_enrollment_rate_to_tertiary_education_accumulative",
)


@component.add(
    name="Inflow ERTEA",
    units="People/Year",
    subscripts=["Gender", "SecondaryGraduation"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_tertiary_education": 1},
)
def inflow_ertea():
    return (
        enrollment_rate_to_tertiary_education()
        .loc[:, _subscript_dict["SecondaryGraduation"]]
        .rename({"MYS": "SecondaryGraduation"})
    )


@component.add(
    name="Outflow ERTEA",
    units="People/Year",
    subscripts=["Gender", "SecondaryGraduation"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "enrollment_rate_to_tertiary_education_accumulative": 1,
        "average_tertiary_education_duration": 1,
    },
)
def outflow_ertea():
    return (
        enrollment_rate_to_tertiary_education_accumulative()
        / average_tertiary_education_duration()
    )


@component.add(
    name="SO Init", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def so_init():
    """
    A CONSTANT
    """
    return 0.095


@component.add(
    name="Total Investment in Oil",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_exploration": 1,
        "investment_in_oil_production": 1,
        "investment_in_oil_technology": 1,
        "share_of_upstream_investment_in_total_investment_oil": 1,
    },
)
def total_investment_in_oil():
    return (
        investment_in_oil_exploration()
        + investment_in_oil_production()
        + investment_in_oil_technology()
    ) / share_of_upstream_investment_in_total_investment_oil()


@component.add(
    name="Share of Investment in Revenue Oil",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_investment_in_oil": 1, "oil_revenue": 1},
)
def share_of_investment_in_revenue_oil():
    return total_investment_in_oil() / oil_revenue()


@component.add(
    name="Share of Upstream Investment in Total Investment Oil",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def share_of_upstream_investment_in_total_investment_oil():
    """
    Data from World Energy Investment 2023
    """
    return 0.65


@component.add(
    name='"Initial Meat-based Diet Followers Female"',
    subscripts=["Education", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_meatbased_diet_followers_female():
    """
    For original data, please see the excel file 'InitialValues.xlsx','Diet','I3' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "Education": _subscript_dict["Education"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["Education", "Cohorts"],
    )
    value.loc[["noEd"], :] = xr.DataArray(
        [
            [
                9.18850e07,
                8.00404e07,
                5.91789e07,
                4.27795e07,
                3.40475e07,
                2.90060e07,
                2.47110e07,
                2.05249e07,
                1.65649e07,
                1.29426e07,
                9.75216e06,
                7.05763e06,
                4.65308e06,
                2.46278e06,
                1.12046e06,
                4.31770e05,
                1.52535e05,
                4.12820e04,
                1.11720e04,
                2.54000e03,
                5.17000e02,
            ]
        ],
        {"Education": ["noEd"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["primary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.19116e07,
                1.05796e07,
                9.21584e06,
                7.85123e06,
                6.68868e06,
                5.55560e06,
                4.48371e06,
                3.50326e06,
                2.63968e06,
                1.91033e06,
                1.25948e06,
                6.66617e05,
                3.03281e05,
                1.16870e05,
                4.12880e04,
                1.11740e04,
                3.02400e03,
                6.88000e02,
                1.40000e02,
            ]
        ],
        {"Education": ["primary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["secondary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.12297e07,
                9.78214e06,
                8.33368e06,
                7.09969e06,
                5.89699e06,
                4.75923e06,
                3.71854e06,
                2.80188e06,
                2.02772e06,
                1.33687e06,
                7.07579e05,
                3.21918e05,
                1.24052e05,
                4.38250e04,
                1.18610e04,
                3.21000e03,
                7.30000e02,
                1.49000e02,
            ]
        ],
        {"Education": ["secondary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["tertiary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.95643e06,
                1.66674e06,
                1.41994e06,
                1.17940e06,
                9.51846e05,
                7.43707e05,
                5.60377e05,
                4.05544e05,
                2.67374e05,
                1.41516e05,
                6.43840e04,
                2.48110e04,
                8.76500e03,
                2.37200e03,
                6.42000e02,
                1.46000e02,
                3.00000e01,
            ]
        ],
        {"Education": ["tertiary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    return value


@component.add(
    name='"Initial Meat-based Diet Followers Male"',
    subscripts=["Education", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_meatbased_diet_followers_male():
    """
    For original data, please see the excel file 'InitialValues.xlsx','Diet','C3' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "Education": _subscript_dict["Education"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["Education", "Cohorts"],
    )
    value.loc[["noEd"], :] = xr.DataArray(
        [
            [
                9.28938e07,
                8.09191e07,
                5.45859e07,
                3.71262e07,
                2.86053e07,
                2.43696e07,
                2.07612e07,
                1.72442e07,
                1.39171e07,
                1.08739e07,
                8.19336e06,
                5.92953e06,
                3.90932e06,
                2.06913e06,
                9.41365e05,
                3.62756e05,
                1.28154e05,
                3.46830e04,
                9.38600e03,
                2.13500e03,
                4.34000e02,
            ]
        ],
        {"Education": ["noEd"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["primary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.72850e07,
                1.53523e07,
                1.33732e07,
                1.13930e07,
                9.70604e06,
                8.06182e06,
                6.50638e06,
                5.08364e06,
                3.83048e06,
                2.77211e06,
                1.82764e06,
                9.67337e05,
                4.40096e05,
                1.69592e05,
                5.99130e04,
                1.62150e04,
                4.38900e03,
                9.98000e02,
                2.03000e02,
            ]
        ],
        {"Education": ["primary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["secondary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.30365e07,
                1.13560e07,
                9.67449e06,
                8.24197e06,
                6.84576e06,
                5.52495e06,
                4.31682e06,
                3.25268e06,
                2.35396e06,
                1.55196e06,
                8.21423e05,
                3.73712e05,
                1.44011e05,
                5.08760e04,
                1.37690e04,
                3.72600e03,
                8.48000e02,
                1.72000e02,
            ]
        ],
        {"Education": ["secondary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["tertiary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.00000e00,
                2.27120e06,
                1.93490e06,
                1.64839e06,
                1.36915e06,
                1.10499e06,
                8.63363e05,
                6.50536e05,
                4.70793e05,
                3.10392e05,
                1.64285e05,
                7.47420e04,
                2.88020e04,
                1.01750e04,
                2.75300e03,
                7.45000e02,
                1.70000e02,
                3.40000e01,
            ]
        ],
        {"Education": ["tertiary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    return value


@component.add(
    name="Initial Vegetarian Diet Followers Female",
    subscripts=["Education", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_vegetarian_diet_followers_female():
    """
    Original data please see the excel file 'InitialValues.xlsx','Diet','I26' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "Education": _subscript_dict["Education"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["Education", "Cohorts"],
    )
    value.loc[["noEd"], :] = xr.DataArray(
        [
            [
                2.56150e07,
                2.23130e07,
                1.64974e07,
                1.19257e07,
                9.49150e06,
                8.08607e06,
                6.88874e06,
                5.72178e06,
                4.61782e06,
                3.60805e06,
                2.71863e06,
                1.96747e06,
                1.29715e06,
                6.86556e05,
                3.12353e05,
                1.20366e05,
                4.25230e04,
                1.15080e04,
                3.11500e03,
                7.08000e02,
                1.44000e02,
            ]
        ],
        {"Education": ["noEd"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["primary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                3.32061e06,
                2.94931e06,
                2.56912e06,
                2.18871e06,
                1.86462e06,
                1.54875e06,
                1.24994e06,
                9.76614e05,
                7.35869e05,
                5.32548e05,
                3.51107e05,
                1.85834e05,
                8.45470e04,
                3.25800e04,
                1.15100e04,
                3.11500e03,
                8.43000e02,
                1.92000e02,
                3.90000e01,
            ]
        ],
        {"Education": ["primary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["secondary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                3.13054e06,
                2.72699e06,
                2.32320e06,
                1.97920e06,
                1.64392e06,
                1.32674e06,
                1.03662e06,
                7.81087e05,
                5.65272e05,
                3.72682e05,
                1.97254e05,
                8.97420e04,
                3.45820e04,
                1.22170e04,
                3.30600e03,
                8.95000e02,
                2.04000e02,
                4.10000e01,
            ]
        ],
        {"Education": ["secondary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["tertiary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.00000e00,
                5.45398e05,
                4.64640e05,
                3.95839e05,
                3.28783e05,
                2.65348e05,
                2.07325e05,
                1.56217e05,
                1.13054e05,
                7.45360e04,
                3.94510e04,
                1.79480e04,
                6.91600e03,
                2.44300e03,
                6.61000e02,
                1.79000e02,
                4.10000e01,
                8.00000e00,
            ]
        ],
        {"Education": ["tertiary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    return value


@component.add(
    name="Initial Vegetarian Diet Followers Male",
    subscripts=["Education", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_vegetarian_diet_followers_male():
    """
    Original data please see the excel file 'InitialValues.xlsx','Diet','C26' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "Education": _subscript_dict["Education"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["Education", "Cohorts"],
    )
    value.loc[["noEd"], :] = xr.DataArray(
        [
            [
                2.58962e07,
                2.25580e07,
                1.52170e07,
                1.03498e07,
                7.97436e06,
                6.79358e06,
                5.78764e06,
                4.80720e06,
                3.87970e06,
                3.03134e06,
                2.28408e06,
                1.65299e06,
                1.08981e06,
                5.76816e05,
                2.62426e05,
                1.01126e05,
                3.57260e04,
                9.66900e03,
                2.61700e03,
                5.95000e02,
                1.21000e02,
            ]
        ],
        {"Education": ["noEd"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["primary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                4.81859e06,
                4.27979e06,
                3.72809e06,
                3.17606e06,
                2.70578e06,
                2.24741e06,
                1.81380e06,
                1.41718e06,
                1.06783e06,
                7.72788e05,
                5.09497e05,
                2.69667e05,
                1.22687e05,
                4.72770e04,
                1.67020e04,
                4.52000e03,
                1.22300e03,
                2.78000e02,
                5.70000e01,
            ]
        ],
        {"Education": ["primary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["secondary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                3.63422e06,
                3.16574e06,
                2.69698e06,
                2.29763e06,
                1.90841e06,
                1.54020e06,
                1.20341e06,
                9.06758e05,
                6.56220e05,
                4.32644e05,
                2.28990e05,
                1.04180e05,
                4.01460e04,
                1.41830e04,
                3.83800e03,
                1.03900e03,
                2.36000e02,
                4.80000e01,
            ]
        ],
        {"Education": ["secondary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    value.loc[["tertiary"], :] = xr.DataArray(
        [
            [
                1.00000e00,
                1.00000e00,
                1.00000e00,
                1.00000e00,
                6.33148e05,
                5.39397e05,
                4.59527e05,
                3.81682e05,
                3.08041e05,
                2.40682e05,
                1.81352e05,
                1.31244e05,
                8.65290e04,
                4.57980e04,
                2.08360e04,
                8.02900e03,
                2.83700e03,
                7.68000e02,
                2.08000e02,
                4.70000e01,
                1.00000e01,
            ]
        ],
        {"Education": ["tertiary"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Education", "Cohorts"],
    ).values
    return value


@component.add(
    name="Reference meat diet decomposition multiplier female",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_meat_diet_decomposition_multiplier_female():
    """
    Original data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'b22' added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = xr.DataArray(
        [
            [
                0.0133507,
                0.0169109,
                0.0213612,
                0.0226963,
                0.0244764,
                0.0222512,
                0.0222512,
                0.0222512,
                0.0222512,
                0.0222512,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
                0.0200261,
            ]
        ],
        {"FoodCategories": ["PasMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["CropMeat"], :] = xr.DataArray(
        [
            [
                0.0417936,
                0.0529386,
                0.0668698,
                0.0710491,
                0.0766216,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
                0.0626904,
            ]
        ],
        {"FoodCategories": ["CropMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0388913,
                0.0492623,
                0.062226,
                0.0661152,
                0.0713007,
                0.0648188,
                0.0648188,
                0.0648188,
                0.0648188,
                0.0648188,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
                0.0583369,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.00580467,
                0.00735258,
                0.00928747,
                0.00986794,
                0.0106419,
                0.00967445,
                0.00967445,
                0.00967445,
                0.00967445,
                0.00967445,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
                0.008707,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0116093,
                0.0147052,
                0.0185749,
                0.0197359,
                0.0212838,
                0.0193489,
                0.0193489,
                0.0193489,
                0.0193489,
                0.0193489,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.271658,
                0.344101,
                0.434654,
                0.461819,
                0.498041,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
                0.407488,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0464373,
                0.0588206,
                0.0742998,
                0.0789435,
                0.0851351,
                0.0773956,
                0.0773956,
                0.0773956,
                0.0773956,
                0.0773956,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
                0.069656,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.150921,
                0.191167,
                0.241474,
                0.256566,
                0.276689,
                0.251536,
                0.251536,
                0.251536,
                0.251536,
                0.251536,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Reference meat diet decomposition multiplier male",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_meat_diet_decomposition_multiplier_male():
    """
    Original data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'b22' added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = xr.DataArray(
        [
            [
                0.0140924,
                0.017801,
                0.0235863,
                0.0307067,
                0.0311517,
                0.0289266,
                0.0289266,
                0.0289266,
                0.0289266,
                0.0267015,
                0.0267015,
                0.0267015,
                0.0267015,
                0.0244764,
                0.0244764,
                0.0244764,
                0.0244764,
                0.0244764,
                0.0244764,
                0.0244764,
                0.0244764,
            ]
        ],
        {"FoodCategories": ["PasMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["CropMeat"], :] = xr.DataArray(
        [
            [
                0.0441155,
                0.0557248,
                0.0738354,
                0.0961253,
                0.0975184,
                0.0905528,
                0.0905528,
                0.0905528,
                0.0905528,
                0.0835872,
                0.0835872,
                0.0835872,
                0.0835872,
                0.0766216,
                0.0766216,
                0.0766216,
                0.0766216,
                0.0766216,
                0.0766216,
                0.0766216,
                0.0766216,
            ]
        ],
        {"FoodCategories": ["CropMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0410519,
                0.051855,
                0.0687079,
                0.0894499,
                0.0907463,
                0.0842644,
                0.0842644,
                0.0842644,
                0.0842644,
                0.0777826,
                0.0777826,
                0.0777826,
                0.0777826,
                0.0713007,
                0.0713007,
                0.0713007,
                0.0713007,
                0.0713007,
                0.0713007,
                0.0713007,
                0.0713007,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.00612715,
                0.00773956,
                0.0102549,
                0.0133507,
                0.0135442,
                0.0125768,
                0.0125768,
                0.0125768,
                0.0125768,
                0.0116093,
                0.0116093,
                0.0116093,
                0.0116093,
                0.0106419,
                0.0106419,
                0.0106419,
                0.0106419,
                0.0106419,
                0.0106419,
                0.0106419,
                0.0106419,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0122543,
                0.0154791,
                0.0205098,
                0.0267015,
                0.0270885,
                0.0251536,
                0.0251536,
                0.0251536,
                0.0251536,
                0.0232187,
                0.0232187,
                0.0232187,
                0.0232187,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.286751,
                0.362211,
                0.47993,
                0.624815,
                0.63387,
                0.588593,
                0.588593,
                0.588593,
                0.588593,
                0.543317,
                0.543317,
                0.543317,
                0.543317,
                0.498041,
                0.498041,
                0.498041,
                0.498041,
                0.498041,
                0.498041,
                0.498041,
                0.498041,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0490172,
                0.0619165,
                0.0820393,
                0.106806,
                0.108354,
                0.100614,
                0.100614,
                0.100614,
                0.100614,
                0.0928747,
                0.0928747,
                0.0928747,
                0.0928747,
                0.0851351,
                0.0851351,
                0.0851351,
                0.0851351,
                0.0851351,
                0.0851351,
                0.0851351,
                0.0851351,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.159306,
                0.201228,
                0.266628,
                0.347119,
                0.35215,
                0.326996,
                0.326996,
                0.326996,
                0.326996,
                0.301843,
                0.301843,
                0.301843,
                0.301843,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Reference vegetarian diet decomposition multiplier female",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_vegetarian_diet_decomposition_multiplier_female():
    """
    Original data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'b48' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = 0
    value.loc[["CropMeat"], :] = 0
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0406327,
                0.0514681,
                0.0650123,
                0.0690756,
                0.0744932,
                0.0677211,
                0.0677211,
                0.0677211,
                0.0677211,
                0.0677211,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
                0.060949,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.0116093,
                0.0147052,
                0.0185749,
                0.0197359,
                0.0212838,
                0.0193489,
                0.0193489,
                0.0193489,
                0.0193489,
                0.0193489,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
                0.017414,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0220577,
                0.0279398,
                0.0352924,
                0.0374982,
                0.0404392,
                0.0367629,
                0.0367629,
                0.0367629,
                0.0367629,
                0.0367629,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
                0.0330866,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.301843,
                0.382334,
                0.482948,
                0.513133,
                0.553378,
                0.503071,
                0.503071,
                0.503071,
                0.503071,
                0.503071,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
                0.452764,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0534029,
                0.0676437,
                0.0854447,
                0.090785,
                0.0979054,
                0.0890049,
                0.0890049,
                0.0890049,
                0.0890049,
                0.0890049,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
                0.0801044,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.150921,
                0.191167,
                0.241474,
                0.256566,
                0.276689,
                0.251536,
                0.251536,
                0.251536,
                0.251536,
                0.251536,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
                0.226382,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Reference vegetarian diet decomposition multiplier male",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_vegetarian_diet_decomposition_multiplier_male():
    """
    Original data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'b48' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = 0
    value.loc[["CropMeat"], :] = 0
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.04289,
                0.0541769,
                0.0717844,
                0.0934552,
                0.0948096,
                0.0880375,
                0.0880375,
                0.0880375,
                0.0880375,
                0.0812654,
                0.0812654,
                0.0812654,
                0.0812654,
                0.0744932,
                0.0744932,
                0.0744932,
                0.0744932,
                0.0744932,
                0.0744932,
                0.0744932,
                0.0744932,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.0122543,
                0.0154791,
                0.0205098,
                0.0267015,
                0.0270885,
                0.0251536,
                0.0251536,
                0.0251536,
                0.0251536,
                0.0232187,
                0.0232187,
                0.0232187,
                0.0232187,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
                0.0212838,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0232832,
                0.0294103,
                0.0389687,
                0.0507328,
                0.0514681,
                0.0477918,
                0.0477918,
                0.0477918,
                0.0477918,
                0.0441155,
                0.0441155,
                0.0441155,
                0.0441155,
                0.0404392,
                0.0404392,
                0.0404392,
                0.0404392,
                0.0404392,
                0.0404392,
                0.0404392,
                0.0404392,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.318612,
                0.402457,
                0.533256,
                0.694238,
                0.7043,
                0.653993,
                0.653993,
                0.653993,
                0.653993,
                0.603685,
                0.603685,
                0.603685,
                0.603685,
                0.553378,
                0.553378,
                0.553378,
                0.553378,
                0.553378,
                0.553378,
                0.553378,
                0.553378,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0563698,
                0.0712039,
                0.0943452,
                0.122827,
                0.124607,
                0.115706,
                0.115706,
                0.115706,
                0.115706,
                0.106806,
                0.106806,
                0.106806,
                0.106806,
                0.0979054,
                0.0979054,
                0.0979054,
                0.0979054,
                0.0979054,
                0.0979054,
                0.0979054,
                0.0979054,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.159306,
                0.201228,
                0.266628,
                0.347119,
                0.35215,
                0.326996,
                0.326996,
                0.326996,
                0.326996,
                0.301843,
                0.301843,
                0.301843,
                0.301843,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
                0.276689,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Vegan diet decomposition multiplier female",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def vegan_diet_decomposition_multiplier_female():
    """
    Original data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'y48' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = 0
    value.loc[["CropMeat"], :] = 0
    value.loc[["Dairy"], :] = 0
    value.loc[["Eggs"], :] = 0
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.058047,
                0.073526,
                0.092875,
                0.098679,
                0.106419,
                0.096744,
                0.096744,
                0.096744,
                0.096744,
                0.096744,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
                0.08707,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.17414,
                0.220577,
                0.278624,
                0.296038,
                0.319257,
                0.290233,
                0.290233,
                0.290233,
                0.290233,
                0.290233,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
                0.26121,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.116093,
                0.147052,
                0.185749,
                0.197359,
                0.212838,
                0.193489,
                0.193489,
                0.193489,
                0.193489,
                0.193489,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
                0.17414,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.232187,
                0.294103,
                0.371499,
                0.394717,
                0.425676,
                0.386978,
                0.386978,
                0.386978,
                0.386978,
                0.386978,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Vegan diet decomposition multiplier male",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def vegan_diet_decomposition_multiplier_male():
    """
    Original data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'y48' Added by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = 0
    value.loc[["CropMeat"], :] = 0
    value.loc[["Dairy"], :] = 0
    value.loc[["Eggs"], :] = 0
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.061271,
                0.077396,
                0.102549,
                0.133507,
                0.135442,
                0.125768,
                0.125768,
                0.125768,
                0.125768,
                0.116093,
                0.116093,
                0.116093,
                0.116093,
                0.106419,
                0.106419,
                0.106419,
                0.106419,
                0.106419,
                0.106419,
                0.106419,
                0.106419,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.183814,
                0.232187,
                0.307647,
                0.400522,
                0.406327,
                0.377303,
                0.377303,
                0.377303,
                0.377303,
                0.34828,
                0.34828,
                0.34828,
                0.34828,
                0.319257,
                0.319257,
                0.319257,
                0.319257,
                0.319257,
                0.319257,
                0.319257,
                0.319257,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.122543,
                0.154791,
                0.205098,
                0.267015,
                0.270885,
                0.251536,
                0.251536,
                0.251536,
                0.251536,
                0.232187,
                0.232187,
                0.232187,
                0.232187,
                0.212838,
                0.212838,
                0.212838,
                0.212838,
                0.212838,
                0.212838,
                0.212838,
                0.212838,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.245086,
                0.309582,
                0.410197,
                0.534029,
                0.541769,
                0.503071,
                0.503071,
                0.503071,
                0.503071,
                0.464373,
                0.464373,
                0.464373,
                0.464373,
                0.425676,
                0.425676,
                0.425676,
                0.425676,
                0.425676,
                0.425676,
                0.425676,
                0.425676,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Ts",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_ts": 1},
    other_deps={
        "_smooth_ts": {
            "initial": {"ts_sa": 1, "current_year": 1, "time": 1},
            "step": {
                "ts_sa": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def ts():
    return 0.904986 + _smooth_ts()


_smooth_ts = Smooth(
    lambda: step(__data["time"], ts_sa() - 0.904986, current_year()),
    lambda: sa_effective_change_delay(),
    lambda: step(__data["time"], ts_sa() - 0.904986, current_year()),
    lambda: 1,
    "_smooth_ts",
)


@component.add(
    name="RCs",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcs": 1},
    other_deps={
        "_smooth_rcs": {
            "initial": {"rcs_sa": 1, "current_year": 1, "time": 1},
            "step": {
                "rcs_sa": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def rcs():
    return 0.125608 + _smooth_rcs()


_smooth_rcs = Smooth(
    lambda: step(__data["time"], rcs_sa() - 0.125608, current_year()),
    lambda: sa_effective_change_delay(),
    lambda: step(__data["time"], rcs_sa() - 0.125608, current_year()),
    lambda: 1,
    "_smooth_rcs",
)


@component.add(
    name="Cs",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_cs": 1},
    other_deps={
        "_smooth_cs": {
            "initial": {"cs_sa": 1, "current_year": 1, "time": 1},
            "step": {
                "cs_sa": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def cs():
    return 0.595487 + _smooth_cs()


_smooth_cs = Smooth(
    lambda: step(__data["time"], cs_sa() - 0.595487, current_year()),
    lambda: sa_effective_change_delay(),
    lambda: step(__data["time"], cs_sa() - 0.595487, current_year()),
    lambda: 1,
    "_smooth_cs",
)


@component.add(
    name="Cu",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_cu": 1},
    other_deps={
        "_smooth_cu": {
            "initial": {"cu_sa": 1, "current_year": 1, "time": 1},
            "step": {
                "cu_sa": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def cu():
    return 0.133783 + _smooth_cu()


_smooth_cu = Smooth(
    lambda: step(__data["time"], cu_sa() - 0.133783, current_year()),
    lambda: sa_effective_change_delay(),
    lambda: step(__data["time"], cu_sa() - 0.133783, current_year()),
    lambda: 1,
    "_smooth_cu",
)


@component.add(
    name="Healthy diet decomposition multiplier male",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def healthy_diet_decomposition_multiplier_male():
    """
    Original data please see the excel file New_DietData, sheet Model Input, B74 add by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = xr.DataArray(
        [
            [
                0.00821038,
                0.010371,
                0.0137416,
                0.01789,
                0.0181493,
                0.0168529,
                0.0168529,
                0.0168529,
                0.0168529,
                0.0155565,
                0.0155565,
                0.0155565,
                0.0155565,
                0.0142601,
                0.0142601,
                0.0142601,
                0.0142601,
                0.0142601,
                0.0142601,
                0.0142601,
                0.0142601,
            ]
        ],
        {"FoodCategories": ["PasMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["CropMeat"], :] = xr.DataArray(
        [
            [
                0.02506,
                0.0316548,
                0.0419426,
                0.0546045,
                0.0553959,
                0.051439,
                0.051439,
                0.051439,
                0.051439,
                0.0474822,
                0.0474822,
                0.0474822,
                0.0474822,
                0.0435253,
                0.0435253,
                0.0435253,
                0.0435253,
                0.0435253,
                0.0435253,
                0.0435253,
                0.0435253,
            ]
        ],
        {"FoodCategories": ["CropMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0476692,
                0.0602138,
                0.0797832,
                0.103869,
                0.105374,
                0.0978474,
                0.0978474,
                0.0978474,
                0.0978474,
                0.0903206,
                0.0903206,
                0.0903206,
                0.0903206,
                0.0827939,
                0.0827939,
                0.0827939,
                0.0827939,
                0.0827939,
                0.0827939,
                0.0827939,
                0.0827939,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.00453409,
                0.00572727,
                0.00758864,
                0.00987955,
                0.0100227,
                0.00930682,
                0.00930682,
                0.00930682,
                0.00930682,
                0.00859091,
                0.00859091,
                0.00859091,
                0.00859091,
                0.007875,
                0.007875,
                0.007875,
                0.007875,
                0.007875,
                0.007875,
                0.007875,
                0.007875,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0421548,
                0.0532482,
                0.0705538,
                0.0918531,
                0.0931843,
                0.0865283,
                0.0865283,
                0.0865283,
                0.0865283,
                0.0798722,
                0.0798722,
                0.0798722,
                0.0798722,
                0.0732162,
                0.0732162,
                0.0732162,
                0.0732162,
                0.0732162,
                0.0732162,
                0.0732162,
                0.0732162,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.179106,
                0.226239,
                0.299767,
                0.390262,
                0.395918,
                0.367638,
                0.367638,
                0.367638,
                0.367638,
                0.339358,
                0.339358,
                0.339358,
                0.339358,
                0.311078,
                0.311078,
                0.311078,
                0.311078,
                0.311078,
                0.311078,
                0.311078,
                0.311078,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0720461,
                0.0910056,
                0.120582,
                0.156985,
                0.15926,
                0.147884,
                0.147884,
                0.147884,
                0.147884,
                0.136508,
                0.136508,
                0.136508,
                0.136508,
                0.125133,
                0.125133,
                0.125133,
                0.125133,
                0.125133,
                0.125133,
                0.125133,
                0.125133,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.229462,
                0.289846,
                0.384047,
                0.499985,
                0.507231,
                0.471,
                0.471,
                0.471,
                0.471,
                0.43477,
                0.43477,
                0.43477,
                0.43477,
                0.398539,
                0.398539,
                0.398539,
                0.398539,
                0.398539,
                0.398539,
                0.398539,
                0.398539,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Healthy diet decomposition multiplier female",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def healthy_diet_decomposition_multiplier_female():
    """
    Original data please see the excel file New_DietData, sheet Model Input, B74 add by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = xr.DataArray(
        [
            [
                0.00777826,
                0.00985246,
                0.0124452,
                0.013223,
                0.0142601,
                0.0129638,
                0.0129638,
                0.0129638,
                0.0129638,
                0.0129638,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
                0.0116674,
            ]
        ],
        {"FoodCategories": ["PasMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["CropMeat"], :] = xr.DataArray(
        [
            [
                0.0237411,
                0.0300721,
                0.0379857,
                0.0403599,
                0.0435253,
                0.0395685,
                0.0395685,
                0.0395685,
                0.0395685,
                0.0395685,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
                0.0356116,
            ]
        ],
        {"FoodCategories": ["CropMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0451603,
                0.0572031,
                0.0722565,
                0.0767725,
                0.0827939,
                0.0752672,
                0.0752672,
                0.0752672,
                0.0752672,
                0.0752672,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
                0.0677405,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.00429545,
                0.00544091,
                0.00687273,
                0.00730227,
                0.007875,
                0.00715909,
                0.00715909,
                0.00715909,
                0.00715909,
                0.00715909,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
                0.00644318,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0399361,
                0.0505858,
                0.0638978,
                0.0678914,
                0.0732162,
                0.0665602,
                0.0665602,
                0.0665602,
                0.0665602,
                0.0665602,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
                0.0599042,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.169679,
                0.214927,
                0.271487,
                0.288455,
                0.311078,
                0.282799,
                0.282799,
                0.282799,
                0.282799,
                0.282799,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
                0.254519,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0682542,
                0.0864553,
                0.109207,
                0.116032,
                0.125133,
                0.113757,
                0.113757,
                0.113757,
                0.113757,
                0.113757,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
                0.102381,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.217385,
                0.275354,
                0.347816,
                0.369554,
                0.398539,
                0.362308,
                0.362308,
                0.362308,
                0.362308,
                0.362308,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
                0.326077,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Flexitarian diet decomposition multiplier male",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def flexitarian_diet_decomposition_multiplier_male():
    """
    Data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'y22' Added by Q. Ye
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = xr.DataArray(
        [
            [
                0.00275722,
                0.0034828,
                0.00461471,
                0.00600783,
                0.0060949,
                0.00565955,
                0.00565955,
                0.00565955,
                0.00565955,
                0.0052242,
                0.0052242,
                0.0052242,
                0.0052242,
                0.00478885,
                0.00478885,
                0.00478885,
                0.00478885,
                0.00478885,
                0.00478885,
                0.00478885,
                0.00478885,
            ]
        ],
        {"FoodCategories": ["PasMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["CropMeat"], :] = xr.DataArray(
        [
            [
                0.0154404,
                0.0195037,
                0.0258424,
                0.0336439,
                0.0341314,
                0.0316935,
                0.0316935,
                0.0316935,
                0.0316935,
                0.0292555,
                0.0292555,
                0.0292555,
                0.0292555,
                0.0268176,
                0.0268176,
                0.0268176,
                0.0268176,
                0.0268176,
                0.0268176,
                0.0268176,
                0.0268176,
            ]
        ],
        {"FoodCategories": ["CropMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0488947,
                0.0617617,
                0.0818342,
                0.106539,
                0.108083,
                0.100363,
                0.100363,
                0.100363,
                0.100363,
                0.0926425,
                0.0926425,
                0.0926425,
                0.0926425,
                0.0849223,
                0.0849223,
                0.0849223,
                0.0849223,
                0.0849223,
                0.0849223,
                0.0849223,
                0.0849223,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.00465663,
                0.00588206,
                0.00779373,
                0.0101466,
                0.0102936,
                0.00955835,
                0.00955835,
                0.00955835,
                0.00955835,
                0.0088231,
                0.0088231,
                0.0088231,
                0.0088231,
                0.00808784,
                0.00808784,
                0.00808784,
                0.00808784,
                0.00808784,
                0.00808784,
                0.00808784,
                0.00808784,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.0432577,
                0.0546413,
                0.0723997,
                0.0942562,
                0.0956222,
                0.0887921,
                0.0887921,
                0.0887921,
                0.0887921,
                0.0819619,
                0.0819619,
                0.0819619,
                0.0819619,
                0.0751318,
                0.0751318,
                0.0751318,
                0.0751318,
                0.0751318,
                0.0751318,
                0.0751318,
                0.0751318,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.183741,
                0.232094,
                0.307524,
                0.400362,
                0.406164,
                0.377153,
                0.377153,
                0.377153,
                0.377153,
                0.348141,
                0.348141,
                0.348141,
                0.348141,
                0.319129,
                0.319129,
                0.319129,
                0.319129,
                0.319129,
                0.319129,
                0.319129,
                0.319129,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0739057,
                0.0933545,
                0.123695,
                0.161037,
                0.16337,
                0.151701,
                0.151701,
                0.151701,
                0.151701,
                0.140032,
                0.140032,
                0.140032,
                0.140032,
                0.128363,
                0.128363,
                0.128363,
                0.128363,
                0.128363,
                0.128363,
                0.128363,
                0.128363,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.235466,
                0.297431,
                0.394096,
                0.513069,
                0.520505,
                0.483326,
                0.483326,
                0.483326,
                0.483326,
                0.446147,
                0.446147,
                0.446147,
                0.446147,
                0.408968,
                0.408968,
                0.408968,
                0.408968,
                0.408968,
                0.408968,
                0.408968,
                0.408968,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Flexitarian diet decomposition multiplier female",
    subscripts=["FoodCategories", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def flexitarian_diet_decomposition_multiplier_female():
    """
    Data please see the excel file 'New_DietData.xlsx' , 'Model Input' , 'y22' Added by Q. Ye
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Cohorts"],
    )
    value.loc[["PasMeat"], :] = xr.DataArray(
        [
            [
                0.0026121,
                0.00330866,
                0.00417936,
                0.00444057,
                0.00478885,
                0.0043535,
                0.0043535,
                0.0043535,
                0.0043535,
                0.0043535,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
                0.00391815,
            ]
        ],
        {"FoodCategories": ["PasMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["CropMeat"], :] = xr.DataArray(
        [
            [
                0.0146278,
                0.0185285,
                0.0234044,
                0.0248672,
                0.0268176,
                0.0243796,
                0.0243796,
                0.0243796,
                0.0243796,
                0.0243796,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
                0.0219416,
            ]
        ],
        {"FoodCategories": ["CropMeat"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Dairy"], :] = xr.DataArray(
        [
            [
                0.0463213,
                0.0586736,
                0.074114,
                0.0787461,
                0.0849223,
                0.0772021,
                0.0772021,
                0.0772021,
                0.0772021,
                0.0772021,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
                0.0694819,
            ]
        ],
        {"FoodCategories": ["Dairy"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Eggs"], :] = xr.DataArray(
        [
            [
                0.00441155,
                0.00558796,
                0.00705848,
                0.00749963,
                0.00808784,
                0.00735258,
                0.00735258,
                0.00735258,
                0.00735258,
                0.00735258,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
                0.00661732,
            ]
        ],
        {"FoodCategories": ["Eggs"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Pulses"], :] = xr.DataArray(
        [
            [
                0.040981,
                0.0519092,
                0.0655695,
                0.0696676,
                0.0751318,
                0.0683016,
                0.0683016,
                0.0683016,
                0.0683016,
                0.0683016,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
                0.0614714,
            ]
        ],
        {"FoodCategories": ["Pulses"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["Grains"], :] = xr.DataArray(
        [
            [
                0.17407,
                0.220489,
                0.278513,
                0.29592,
                0.319129,
                0.290117,
                0.290117,
                0.290117,
                0.290117,
                0.290117,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
                0.261106,
            ]
        ],
        {"FoodCategories": ["Grains"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["VegFruits"], :] = xr.DataArray(
        [
            [
                0.0700159,
                0.0886868,
                0.112025,
                0.119027,
                0.128363,
                0.116693,
                0.116693,
                0.116693,
                0.116693,
                0.116693,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
                0.105024,
            ]
        ],
        {"FoodCategories": ["VegFruits"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    value.loc[["OtherCrops"], :] = xr.DataArray(
        [
            [
                0.223073,
                0.28256,
                0.356917,
                0.379225,
                0.408968,
                0.371789,
                0.371789,
                0.371789,
                0.371789,
                0.371789,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
                0.33461,
            ]
        ],
        {"FoodCategories": ["OtherCrops"], "Cohorts": _subscript_dict["Cohorts"]},
        ["FoodCategories", "Cohorts"],
    ).values
    return value


@component.add(
    name="Marginal emission",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"emission_shock_year": 1, "year_period": 1, "time": 1},
)
def marginal_emission():
    return 1000000000.0 * pulse(
        __data["time"], emission_shock_year(), width=year_period()
    )


@component.add(
    name="Emission shock year",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def emission_shock_year():
    return 2020


@component.add(
    name="Shock Scenario SWITCH",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def shock_scenario_switch():
    """
    0: no emission shock 1: there is an emission shock in the current year
    """
    return 0


@component.add(
    name="Shock emission addition",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"shock_scenario_switch": 1, "co2_to_c": 1, "marginal_emission": 1},
)
def shock_emission_addition():
    """
    1 Ton CO2 is equaivalent to 1 / 3.644
    """
    return if_then_else(
        shock_scenario_switch() == 0,
        lambda: 0,
        lambda: marginal_emission() / co2_to_c(),
    )


@component.add(
    name="Climate mortality saturation",
    units="percent",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "climate_mortality_saturation_0": 1,
        "_smooth_climate_mortality_saturation": 1,
    },
    other_deps={
        "_smooth_climate_mortality_saturation": {
            "initial": {
                "climate_mortality_saturation_sa": 1,
                "climate_mortality_saturation_0": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "climate_mortality_saturation_sa": 1,
                "climate_mortality_saturation_0": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def climate_mortality_saturation():
    """
    The parameter that defines the saturation level of the logistic function representing temperature-mortality relation. "..0" is the value that defines the original function calibrated to Bressler et al. 2021, "... SA" is the value that can be user-set to cover the uncertainty range after the current year.
    """
    return climate_mortality_saturation_0() + _smooth_climate_mortality_saturation()


_smooth_climate_mortality_saturation = Smooth(
    lambda: step(
        __data["time"],
        climate_mortality_saturation_sa() - climate_mortality_saturation_0(),
        current_year(),
    ),
    lambda: sa_effective_change_delay(),
    lambda: step(
        __data["time"],
        climate_mortality_saturation_sa() - climate_mortality_saturation_0(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_climate_mortality_saturation",
)


@component.add(
    name="Climate Damage Steepness",
    units="1/DegreesC",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"climate_damage_steepness_0": 1, "_smooth_climate_damage_steepness": 1},
    other_deps={
        "_smooth_climate_damage_steepness": {
            "initial": {
                "climate_damage_steepness_sa": 1,
                "climate_damage_steepness_0": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "climate_damage_steepness_sa": 1,
                "climate_damage_steepness_0": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def climate_damage_steepness():
    """
    This function starts with the parameter values defined by the original calibration (parameter "...0") e.g. to Nordhaus, until the present year, and it allows for user-defined values to cover future uncertainty (parameter "... SA").
    """
    return climate_damage_steepness_0() + _smooth_climate_damage_steepness()


_smooth_climate_damage_steepness = Smooth(
    lambda: step(
        __data["time"],
        climate_damage_steepness_sa() - climate_damage_steepness_0(),
        current_year(),
    ),
    lambda: sa_effective_change_delay(),
    lambda: step(
        __data["time"],
        climate_damage_steepness_sa() - climate_damage_steepness_0(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_climate_damage_steepness",
)


@component.add(
    name="Climate mortality inflection",
    units="DegreesC",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "climate_mortality_inflection_0": 1,
        "_smooth_climate_mortality_inflection": 1,
    },
    other_deps={
        "_smooth_climate_mortality_inflection": {
            "initial": {
                "climate_mortality_inflection_sa": 1,
                "climate_mortality_inflection_0": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "climate_mortality_inflection_sa": 1,
                "climate_mortality_inflection_0": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def climate_mortality_inflection():
    """
    The parameter that defines the inflection of the logistic function representing temperature-mortality relation. "..0" is the value that defines the original function calibrated to Bressler et al. 2021, "... SA" is the value that can be user-set to cover the uncertainty range after the current year.
    """
    return climate_mortality_inflection_0() + _smooth_climate_mortality_inflection()


_smooth_climate_mortality_inflection = Smooth(
    lambda: step(
        __data["time"],
        climate_mortality_inflection_sa() - climate_mortality_inflection_0(),
        current_year(),
    ),
    lambda: sa_effective_change_delay(),
    lambda: step(
        __data["time"],
        climate_mortality_inflection_sa() - climate_mortality_inflection_0(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_climate_mortality_inflection",
)


@component.add(
    name="Climate Damage Inflection",
    units="DegreesC",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "climate_damage_inflection_0": 1,
        "_smooth_climate_damage_inflection": 1,
    },
    other_deps={
        "_smooth_climate_damage_inflection": {
            "initial": {
                "climate_damage_inflection_sa": 1,
                "climate_damage_inflection_0": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "climate_damage_inflection_sa": 1,
                "climate_damage_inflection_0": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def climate_damage_inflection():
    """
    This function starts with the parameter values defined by the original calibration (parameter "...0") e.g. to Nordhaus, until the present year, and it allows for user-defined values to cover future uncertainty (parameter "... SA").
    """
    return climate_damage_inflection_0() + _smooth_climate_damage_inflection()


_smooth_climate_damage_inflection = Smooth(
    lambda: step(
        __data["time"],
        climate_damage_inflection_sa() - climate_damage_inflection_0(),
        current_year(),
    ),
    lambda: sa_effective_change_delay(),
    lambda: step(
        __data["time"],
        climate_damage_inflection_sa() - climate_damage_inflection_0(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_climate_damage_inflection",
)


@component.add(
    name="Climate Damage Saturation",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "climate_damage_saturation_0": 1,
        "_smooth_climate_damage_saturation": 1,
    },
    other_deps={
        "_smooth_climate_damage_saturation": {
            "initial": {
                "climate_damage_saturation_sa": 1,
                "climate_damage_saturation_0": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "climate_damage_saturation_sa": 1,
                "climate_damage_saturation_0": 1,
                "current_year": 1,
                "time": 1,
                "sa_effective_change_delay": 1,
            },
        }
    },
)
def climate_damage_saturation():
    """
    This function starts with the parameter values defined by the original calibration (parameter "...0") e.g. to Nordhaus, until the present year, and it allows for user-defined values to cover future uncertainty (parameter "... SA").
    """
    return climate_damage_saturation_0() + _smooth_climate_damage_saturation()


_smooth_climate_damage_saturation = Smooth(
    lambda: step(
        __data["time"],
        climate_damage_saturation_sa() - climate_damage_saturation_0(),
        current_year(),
    ),
    lambda: sa_effective_change_delay(),
    lambda: step(
        __data["time"],
        climate_damage_saturation_sa() - climate_damage_saturation_0(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_climate_damage_saturation",
)


@component.add(
    name="SA effective change delay",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_effective_change_delay():
    return 30


@component.add(name="Ts SA", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def ts_sa():
    """
    From calibration. Commented by Q. Ye in July 2024
    """
    return 0.904986


@component.add(
    name="P1 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def p1_sa():
    return xr.DataArray(
        [0.87, 0.81047], {"Gender": _subscript_dict["Gender"]}, ["Gender"]
    )


@component.add(
    name="T0 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def t0_sa():
    return xr.DataArray([1.4, 3.5], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="T1 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def t1_sa():
    return xr.DataArray([0.7, 1.2], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="T2 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def t2_sa():
    return xr.DataArray([0.6, 0.4], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="P0 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def p0_sa():
    return xr.DataArray([1.2, 3.0], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(name="RCs SA", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def rcs_sa():
    """
    From calibration. Comment by Q. Ye in July 2024
    """
    return 0.125608


@component.add(
    name="P2 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def p2_sa():
    return xr.DataArray([0.03, 0.06], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="S1 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def s1_sa():
    return xr.DataArray([1.4, 1.0], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(name="Cu SA", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def cu_sa():
    """
    From calibration. Comment by Q. Ye in July 2024.
    """
    return 0.133783


@component.add(name="Cs SA", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def cs_sa():
    """
    From calibration. Comment by Q. Ye in July 2024
    """
    return 0.595487


@component.add(
    name="S2 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def s2_sa():
    return xr.DataArray([1.15, 1.5], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="S0 SA",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def s0_sa():
    return xr.DataArray([1.9, 1.5], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Gender averaged YoGL",
    units="Year",
    subscripts=["YoGL cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"yogl": 1, "population_cohorts": 2},
)
def gender_averaged_yogl():
    return sum(
        yogl()
        .loc[:, _subscript_dict["YoGL cohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "YoGL cohorts"})
        * population_cohorts()
        .loc[:, _subscript_dict["YoGL cohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "YoGL cohorts"}),
        dim=["Gender!"],
    ) / sum(
        population_cohorts()
        .loc[:, _subscript_dict["YoGL cohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "YoGL cohorts"}),
        dim=["Gender!"],
    )


@component.add(
    name="Global average YoGL",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 2, "yogl": 1},
)
def global_average_yogl():
    return sum(
        population_cohorts()
        .loc[:, _subscript_dict["YoGL cohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "YoGL cohorts!"})
        * yogl()
        .loc[:, _subscript_dict["YoGL cohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "YoGL cohorts!"}),
        dim=["Gender!", "YoGL cohorts!"],
    ) / sum(
        population_cohorts()
        .loc[:, _subscript_dict["YoGL cohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "YoGL cohorts!"}),
        dim=["Gender!", "YoGL cohorts!"],
    )


@component.add(
    name="YoGL Life Satisfaction Indicator",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def yogl_life_satisfaction_indicator():
    """
    Global average life satisfaction over time has been stable in the past decades, hence assuming constant. The values are the YoGL prevalence rate (representing fraction of population who reported life satisfaction above a certain threshold), obtained from the World Values Survey. Available for ages 20-85, hence using the end values for the other cohorts.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                0.955683,
                0.955683,
                0.955683,
                0.955683,
                0.955683,
                0.9545,
                0.954217,
                0.953519,
                0.952857,
                0.95335,
                0.954453,
                0.954453,
                0.958747,
                0.960386,
                0.961761,
                0.966334,
                0.97217,
                0.971604,
                0.971604,
                0.971604,
                0.971604,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                0.955781,
                0.955781,
                0.955781,
                0.955781,
                0.955781,
                0.954474,
                0.952506,
                0.952708,
                0.951479,
                0.950962,
                0.949061,
                0.947186,
                0.945358,
                0.946652,
                0.945512,
                0.943629,
                0.928864,
                0.929197,
                0.929197,
                0.929197,
                0.929197,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="Terrestrial carbon sink",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"flux_atmosphere_to_biomass": 1, "flux_biomass_to_atmosphere": 1},
)
def terrestrial_carbon_sink():
    return flux_atmosphere_to_biomass() - flux_biomass_to_atmosphere()


@component.add(
    name="Deforestation",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "deforestation_to_urban_land": 1,
        "deforestation_to_agricultural_land": 1,
    },
)
def deforestation():
    return deforestation_to_urban_land() + deforestation_to_agricultural_land()


@component.add(
    name="k gdp agritech", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def k_gdp_agritech():
    return 0.466


@component.add(
    name="L gdp agritech", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def l_gdp_agritech():
    return 1.45


@component.add(
    name="x0 gdp agritech", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def x0_gdp_agritech():
    return 0.8


@component.add(
    name="YoGL poverty indicator",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"nvs_100_percent": 2, "poverty_rate": 1},
)
def yogl_poverty_indicator():
    return (nvs_100_percent() - poverty_rate()) / nvs_100_percent()


@component.add(
    name="Person years of interest pLi POVERTY",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"person_years_lived_in_interval_i": 1, "yogl_poverty_indicator": 1},
)
def person_years_of_interest_pli_poverty():
    return person_years_lived_in_interval_i() * yogl_poverty_indicator()


@component.add(
    name="YoGL POVERTY",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_person_years_of_interest_pt_poverty": 1,
        "survivors_at_exact_age_x": 1,
    },
)
def yogl_poverty():
    return zidz(total_person_years_of_interest_pt_poverty(), survivors_at_exact_age_x())


@component.add(
    name="Total person years of interest pT HEALTH",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "person_years_of_interest_pli_health": 2,
        "total_person_years_of_interest_pt_health": 1,
    },
)
def total_person_years_of_interest_pt_health():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"100+"']] = (
        person_years_of_interest_pli_health()
        .loc[:, '"100+"']
        .reset_coords(drop=True)
        .expand_dims({"YoGL cohorts": ['"100+"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        person_years_of_interest_pli_health()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        + xr.DataArray(
            total_person_years_of_interest_pt_health()
            .loc[:, _subscript_dict["NextCohort"]]
            .rename({"Cohorts": "NextCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButOldest": _subscript_dict["AllButOldest"],
            },
            ["Gender", "AllButOldest"],
        )
    ).values
    return value


@component.add(
    name="Total person years of interest pT POVERTY",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "person_years_of_interest_pli_poverty": 2,
        "total_person_years_of_interest_pt_poverty": 1,
    },
)
def total_person_years_of_interest_pt_poverty():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"100+"']] = (
        person_years_of_interest_pli_poverty()
        .loc[:, '"100+"']
        .reset_coords(drop=True)
        .expand_dims({"YoGL cohorts": ['"100+"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        person_years_of_interest_pli_poverty()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        + xr.DataArray(
            total_person_years_of_interest_pt_poverty()
            .loc[:, _subscript_dict["NextCohort"]]
            .rename({"Cohorts": "NextCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButOldest": _subscript_dict["AllButOldest"],
            },
            ["Gender", "AllButOldest"],
        )
    ).values
    return value


@component.add(
    name="Person years of interest pLi EDUCATION",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"person_years_lived_in_interval_i": 1, "yogl_education_indicator": 1},
)
def person_years_of_interest_pli_education():
    return person_years_lived_in_interval_i() * yogl_education_indicator()


@component.add(
    name="Person years of interest pLi HEALTH",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"person_years_lived_in_interval_i": 1, "yogl_health_indicator": 1},
)
def person_years_of_interest_pli_health():
    return person_years_lived_in_interval_i() * yogl_health_indicator()


@component.add(
    name="YoGL HEALTH",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_person_years_of_interest_pt_health": 1,
        "survivors_at_exact_age_x": 1,
    },
)
def yogl_health():
    return zidz(total_person_years_of_interest_pt_health(), survivors_at_exact_age_x())


@component.add(
    name="Total person years of interest pT EDUCATION",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "person_years_of_interest_pli_education": 2,
        "total_person_years_of_interest_pt_education": 1,
    },
)
def total_person_years_of_interest_pt_education():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"100+"']] = (
        person_years_of_interest_pli_education()
        .loc[:, '"100+"']
        .reset_coords(drop=True)
        .expand_dims({"YoGL cohorts": ['"100+"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        person_years_of_interest_pli_education()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        + xr.DataArray(
            total_person_years_of_interest_pt_education()
            .loc[:, _subscript_dict["NextCohort"]]
            .rename({"Cohorts": "NextCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButOldest": _subscript_dict["AllButOldest"],
            },
            ["Gender", "AllButOldest"],
        )
    ).values
    return value


@component.add(
    name="YoGL EDUCATION",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_person_years_of_interest_pt_education": 1,
        "survivors_at_exact_age_x": 1,
    },
)
def yogl_education():
    return zidz(
        total_person_years_of_interest_pt_education(), survivors_at_exact_age_x()
    )


@component.add(
    name="Reference tertiary education enrollment fraction Init",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_tertiary_education_enrollment_fraction_init():
    """
    Corresponding to 2000 values of the fraction of seondary education graduates aged 15-19 enrolling at tertiary education
    """
    return xr.DataArray([0.39, 0.4], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Reference Life Expectancy at Birth",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "life_expectancy_2000": 1,
        "_smooth_reference_life_expectancy_at_birth": 1,
    },
    other_deps={
        "_smooth_reference_life_expectancy_at_birth": {
            "initial": {
                "life_expectancy_variation": 1,
                "life_expectancy_2000": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "life_expectancy_variation": 1,
                "life_expectancy_2000": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        }
    },
)
def reference_life_expectancy_at_birth():
    return life_expectancy_2000() + _smooth_reference_life_expectancy_at_birth()


_smooth_reference_life_expectancy_at_birth = Smooth(
    lambda: step(
        __data["time"],
        life_expectancy_variation() - life_expectancy_2000(),
        current_year(),
    ),
    lambda: ssp_demographic_variation_time(),
    lambda: step(
        __data["time"],
        life_expectancy_variation() - life_expectancy_2000(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_reference_life_expectancy_at_birth",
)


@component.add(
    name="Birth Gender Fraction Init",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def birth_gender_fraction_init():
    return 0.515


@component.add(
    name="Normal Fertility Init",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_fertility_init():
    """
    Reference fertility of reproductive fraction of population as estimated for year 2000.
    """
    return 2.63


@component.add(
    name="Secondary education enrollment Variation",
    units="Dmnl",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def secondary_education_enrollment_variation():
    """
    Corresponding to 2000 values
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = xr.DataArray(
        [[1.0], [0.9]],
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ).values
    value.loc[:, ['"15-19"']] = xr.DataArray(
        [[0.85], [0.85]],
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"15-19"']},
        ["Gender", "SchoolEnrollment"],
    ).values
    return value


@component.add(
    name="CLIMATE MORTALITY SWITCH",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_switch():
    """
    0: Only temperature-dependent impact 1: Education mediated temperature impact - based on MYS 2: Education mediated temperature impact - based on female secondary 3: No impact
    """
    return 0


@component.add(
    name="Normal Fertility Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_fertility_variation():
    """
    Fertility parameter to be adjusted for future scenario settings
    """
    return 2.63


@component.add(
    name="Life Expectancy Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def life_expectancy_variation():
    return 65.68


@component.add(
    name="Reference secondary education enrollment fraction Init",
    units="Dmnl",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_secondary_education_enrollment_fraction_init():
    """
    Corresponding to 2000 values
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = xr.DataArray(
        [[1.0], [0.9]],
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ).values
    value.loc[:, ['"15-19"']] = xr.DataArray(
        [[0.85], [0.85]],
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"15-19"']},
        ["Gender", "SchoolEnrollment"],
    ).values
    return value


@component.add(
    name="Persistence Tertiary Variation",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def persistence_tertiary_variation():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = 0.829103
    value.loc[["male"]] = 0.805835
    return value


@component.add(
    name="Persistence Tertiary Init",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def persistence_tertiary_init():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = 0.829103
    value.loc[["male"]] = 0.805835
    return value


@component.add(
    name="Tertiary education enrollment Variation",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def tertiary_education_enrollment_variation():
    """
    Corresponding to 2000 values of the fraction of seondary education graduates aged 15-19 enrolling at tertiary education
    """
    return xr.DataArray([0.39, 0.4], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Expected Years of Schooling",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "expected_years_in_primary_education": 1,
        "expected_years_in_secondary_education": 1,
        "expected_years_in_tertiary_education": 1,
    },
)
def expected_years_of_schooling():
    """
    Expected years fo schooling at school entry age (5-9), calculated by the total population at all school enrolment ages divided by the enrollment rates. EYS is calculated for the ages 5-24 (Human Development Report 2021-2022 Technical Notes), but in the FeliX 25-29 can enroll to tertiary education. therefore removing it fro mthe calculation.
    """
    return (
        expected_years_in_primary_education()
        + expected_years_in_secondary_education()
        + expected_years_in_tertiary_education()
    )


@component.add(
    name="Expected Years of Schooling Index",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"expected_years_of_schooling": 1, "max_expected_years_of_schooling": 1},
)
def expected_years_of_schooling_index():
    """
    (Expected Years of Schooling-Min Expected Years of Schooling)/(Max Expected Years of Schooling-Min Expected Years of Schooling)
    """
    return expected_years_of_schooling() / max_expected_years_of_schooling()


@component.add(
    name="Education index",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mean_years_of_schooling_index": 1,
        "expected_years_of_schooling_index": 1,
    },
)
def education_index():
    return (mean_years_of_schooling_index() + expected_years_of_schooling_index()) / 2


@component.add(
    name="Max Mean Years of Schooling",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_mean_years_of_schooling():
    """
    from the Human Developmenr Report 2021/2022 https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return 15


@component.add(
    name="Max Expected Years of Schooling",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_expected_years_of_schooling():
    """
    from the Human Development Report 2011/2022 https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return 18


@component.add(
    name="Total Enrollment Rate to Primary Education",
    units="People/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_primary_education": 1},
)
def total_enrollment_rate_to_primary_education():
    return sum(
        enrollment_rate_to_primary_education().rename({"Gender": "Gender!"}),
        dim=["Gender!"],
    )


@component.add(
    name="Mean Years of Schooling Index",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mean_years_of_schooling": 1, "max_mean_years_of_schooling": 1},
)
def mean_years_of_schooling_index():
    """
    (Average Duration in Education-Min Mean Years of Schooling)/(Max Mean Years of Schooling-Min Mean Years of Schooling), Min MYS=0
    """
    return mean_years_of_schooling() / max_mean_years_of_schooling()


@component.add(
    name="Expected years in secondary education",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_secondary_education_duration": 1,
        "interval_duration": 1,
        "total_enrollment_rate_to_secondary_education": 1,
        "population_cohorts": 2,
    },
)
def expected_years_in_secondary_education():
    return average_secondary_education_duration() * (
        total_enrollment_rate_to_secondary_education()
        * interval_duration()
        / (
            sum(
                population_cohorts()
                .loc[:, '"10-14"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
            + sum(
                population_cohorts()
                .loc[:, '"15-19"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
        )
    )


@component.add(
    name="Expected years in primary education",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_primary_education_duration": 1,
        "total_enrollment_rate_to_primary_education": 1,
        "population_cohorts": 1,
        "interval_duration": 1,
    },
)
def expected_years_in_primary_education():
    return (
        average_primary_education_duration()
        * (
            total_enrollment_rate_to_primary_education()
            / sum(
                population_cohorts()
                .loc[:, '"5-9"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
        )
        * interval_duration()
    )


@component.add(
    name="Total Enrollment Rate to Tertiary Education",
    units="People/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_tertiary_education": 3},
)
def total_enrollment_rate_to_tertiary_education():
    return (
        sum(
            enrollment_rate_to_tertiary_education()
            .loc[:, '"15-19"']
            .reset_coords(drop=True)
            .rename({"Gender": "Gender!"}),
            dim=["Gender!"],
        )
        + sum(
            enrollment_rate_to_tertiary_education()
            .loc[:, '"20-24"']
            .reset_coords(drop=True)
            .rename({"Gender": "Gender!"}),
            dim=["Gender!"],
        )
        + sum(
            enrollment_rate_to_tertiary_education()
            .loc[:, '"25-29"']
            .reset_coords(drop=True)
            .rename({"Gender": "Gender!"}),
            dim=["Gender!"],
        )
    )


@component.add(
    name="Expected years in tertiary education",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_tertiary_education_duration": 1,
        "interval_duration": 1,
        "enrollment_rate_to_tertiary_education": 2,
        "population_cohorts": 2,
    },
)
def expected_years_in_tertiary_education():
    return (
        average_tertiary_education_duration()
        * interval_duration()
        * (
            (
                sum(
                    enrollment_rate_to_tertiary_education()
                    .loc[:, '"15-19"']
                    .reset_coords(drop=True)
                    .rename({"Gender": "Gender!"}),
                    dim=["Gender!"],
                )
                + sum(
                    enrollment_rate_to_tertiary_education()
                    .loc[:, '"20-24"']
                    .reset_coords(drop=True)
                    .rename({"Gender": "Gender!"}),
                    dim=["Gender!"],
                )
            )
            / (
                sum(
                    population_cohorts()
                    .loc[:, '"15-19"']
                    .reset_coords(drop=True)
                    .rename({"Gender": "Gender!"}),
                    dim=["Gender!"],
                )
                + sum(
                    population_cohorts()
                    .loc[:, '"20-24"']
                    .reset_coords(drop=True)
                    .rename({"Gender": "Gender!"}),
                    dim=["Gender!"],
                )
            )
        )
    )


@component.add(
    name="Labor Force Participation Fraction",
    units="Dmnl",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicative_labor_force_participation_fraction": 1,
        "labor_force_ramp": 1,
    },
)
def labor_force_participation_fraction():
    """
    RAMP formulation is for policy implementation. The MIN formulation keeps the eventual fraction below 1
    """
    return np.minimum(
        indicative_labor_force_participation_fraction() * labor_force_ramp(), 1
    )


@component.add(
    name="Other Anthropogenic Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "other_anthropogenic_radiative_forcing_history": 1,
        "other_anthropogenic_radiative_forcing_rcp85": 1,
        "other_anthropogenic_radiative_forcing_rcp45": 1,
        "other_anthropogenic_radiative_forcing_rcp26": 1,
        "other_anhtropogenic_radiative_forcing_rcp60": 1,
        "other_anthropogenic_radiative_forcing_rcp19": 1,
        "other_anthropogenic_radiative_forcing_rcp34": 1,
        "rcp_scenario": 5,
    },
)
def other_anthropogenic_radiative_forcing():
    """
    Radiative forcing from other anthropogenic gases in the atmosphere. Calculated fro mthe SSP2 database as total forcing - (forcing from C02, CH4, N2O, F-Gases)
    """
    return if_then_else(
        time() <= 2010,
        lambda: other_anthropogenic_radiative_forcing_history(),
        lambda: if_then_else(
            rcp_scenario() == 0,
            lambda: other_anthropogenic_radiative_forcing_rcp19(),
            lambda: if_then_else(
                rcp_scenario() == 1,
                lambda: other_anthropogenic_radiative_forcing_rcp26(),
                lambda: if_then_else(
                    rcp_scenario() == 2,
                    lambda: other_anthropogenic_radiative_forcing_rcp34(),
                    lambda: if_then_else(
                        rcp_scenario() == 3,
                        lambda: other_anthropogenic_radiative_forcing_rcp45(),
                        lambda: if_then_else(
                            rcp_scenario() == 4,
                            lambda: other_anhtropogenic_radiative_forcing_rcp60(),
                            lambda: other_anthropogenic_radiative_forcing_rcp85(),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Other Anthropogenic Radiative Forcing History",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing": 1,
    },
)
def other_anthropogenic_radiative_forcing_history():
    """
    Historical data for radiative forcing from CH4 in the atmosphere.
    """
    return table_other_anthropogenic_radiative_forcing(time() * dimensionless_time())


@component.add(
    name="Other Anthropogenic Radiative Forcing RCP19",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing_ssp2_rcp19": 1,
    },
)
def other_anthropogenic_radiative_forcing_rcp19():
    """
    MESSAGE-GLOBIOM (RCP 1.9).
    """
    return table_other_anthropogenic_radiative_forcing_ssp2_rcp19(
        time() * dimensionless_time()
    )


@component.add(
    name="Other Anthropogenic Radiative Forcing RCP26",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing_ssp2_rcp26": 1,
    },
)
def other_anthropogenic_radiative_forcing_rcp26():
    return table_other_anthropogenic_radiative_forcing_ssp2_rcp26(
        time() * dimensionless_time()
    )


@component.add(
    name="Other Anthropogenic Radiative Forcing RCP34",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing_ssp2_rcp34": 1,
    },
)
def other_anthropogenic_radiative_forcing_rcp34():
    return table_other_anthropogenic_radiative_forcing_ssp2_rcp34(
        time() * dimensionless_time()
    )


@component.add(
    name="N2O Radiative Forcing RCP19",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_n2o_radiative_forcing_ssp2_rcp19": 1,
    },
)
def n2o_radiative_forcing_rcp19():
    """
    Future projections of N2O radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 1.9).
    """
    return table_n2o_radiative_forcing_ssp2_rcp19(time() * dimensionless_time())


@component.add(
    name="TABLE F Gases Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing"},
)
def table_f_gases_radiative_forcing(x, final_subs=None):
    """
    Data series for historical data of F-gases radiative forcing. Pre-2000 From AR5, 2005 AND 2010 from the SSP database, SSP2 Message-GLOBIOM (marker).
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing = HardcodedLookups(
    [1900.0, 1950.0, 2005.0, 2010.0],
    [0.00000e00, 1.00000e-05, 2.11050e-02, 3.11024e-02],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing",
)


@component.add(
    name="TABLE F Gases Radiative Forcing SSP2 RCP19",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp19"
    },
)
def table_f_gases_radiative_forcing_ssp2_rcp19(x, final_subs=None):
    """
    Data series for future projections of f-gases radiative forcing by Message-GLOBIOM (SSP2 marker model) in RCP 1.9.
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp19(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp19 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.0311024,
        0.0613296,
        0.0770876,
        0.0756992,
        0.0766076,
        0.0793937,
        0.0825332,
        0.0849748,
        0.0865851,
        0.0877894,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp19",
)


@component.add(
    name="TABLE F Gases Radiative Forcing SSP2 RCP26",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp26"
    },
)
def table_f_gases_radiative_forcing_ssp2_rcp26(x, final_subs=None):
    """
    Data series for future projections of f-gases radiative forcing by Message-GLOBIOM (SSP2 marker model) in RCP 2.6.
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp26(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp26 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.0311024,
        0.061264,
        0.0782927,
        0.080345,
        0.0847037,
        0.0891935,
        0.0927838,
        0.0960691,
        0.0987984,
        0.101286,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp26",
)


@component.add(
    name="TABLE F Gases Radiative Forcing SSP2 RCP34",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp34"
    },
)
def table_f_gases_radiative_forcing_ssp2_rcp34(x, final_subs=None):
    """
    Data series for future projections of f-gases radiative forcing by MESSAGE-GLOBIOM (RCP 3.4).
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp34(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp34 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.0311024,
        0.0612598,
        0.0836687,
        0.0909787,
        0.0942257,
        0.0980601,
        0.103224,
        0.106661,
        0.108445,
        0.110579,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp34",
)


@component.add(
    name="TABLE F Gases Radiative Forcing SSP2 RCP45",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp45"
    },
)
def table_f_gases_radiative_forcing_ssp2_rcp45(x, final_subs=None):
    """
    Data series for future projections of f-gases radiative forcing by MESSAGE-GLOBIOM in SSP2 RCP 4.5.
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp45(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp45 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.0311024,
        0.0612728,
        0.0871134,
        0.0987915,
        0.101803,
        0.103702,
        0.108015,
        0.112576,
        0.116856,
        0.119682,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp45",
)


@component.add(
    name="TABLE F Gases Radiative Forcing SSP2 RCP60",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp60"
    },
)
def table_f_gases_radiative_forcing_ssp2_rcp60(x, final_subs=None):
    """
    Data series for future projections of f gases radiative forcing by MESSAGE-GLOBIOM (RCP 6.0).
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp60(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp60 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.0311024,
        0.061275,
        0.091407,
        0.119426,
        0.148527,
        0.173135,
        0.183224,
        0.17176,
        0.157098,
        0.151042,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp60",
)


@component.add(
    name="TABLE F Gases Radiative Forcing SSP2 RCP85",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp85"
    },
)
def table_f_gases_radiative_forcing_ssp2_rcp85(x, final_subs=None):
    """
    Data series for future projections of f-gases radiative forcing by MESSAGE-GLOBIOM (RCP 8.5).
    """
    return _hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp85(x, final_subs)


_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp85 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.0311024,
        0.061417,
        0.0930176,
        0.122854,
        0.156046,
        0.192871,
        0.23523,
        0.283043,
        0.334059,
        0.386994,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_f_gases_radiative_forcing_ssp2_rcp85",
)


@component.add(
    name="TABLE N2O Radiative Forcing SSP2 RCP19",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp19"
    },
)
def table_n2o_radiative_forcing_ssp2_rcp19(x, final_subs=None):
    """
    Data series for future projections of N2O radiative forcing by MESSAGE-GLOBIOM (RCP 1.9).
    """
    return _hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp19(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp19 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.167804,
        0.190979,
        0.212475,
        0.22977,
        0.240821,
        0.246385,
        0.248219,
        0.247229,
        0.244504,
        0.240289,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp19",
)


@component.add(
    name="Other Anhtropogenic Radiative Forcing RCP60",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing_ssp2_rcp60": 1,
    },
)
def other_anhtropogenic_radiative_forcing_rcp60():
    return table_other_anthropogenic_radiative_forcing_ssp2_rcp60(
        time() * dimensionless_time()
    )


@component.add(
    name="F Gases Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "f_gases_radiative_forcing_history": 1,
        "f_gases_radiative_forcing_rcp45": 1,
        "f_gases_radiative_forcing_rcp60": 1,
        "f_gases_radiative_forcing_rcp26": 1,
        "f_gases_radiative_forcing_rcp34": 1,
        "f_gases_radiative_forcing_rcp85": 1,
        "rcp_scenario": 5,
        "f_gases_radiative_forcing_rcp19": 1,
    },
)
def f_gases_radiative_forcing():
    """
    Radiative forcing from F-gases (HFC and others) in the atmosphere.
    """
    return if_then_else(
        time() <= 2010,
        lambda: f_gases_radiative_forcing_history(),
        lambda: if_then_else(
            rcp_scenario() == 0,
            lambda: f_gases_radiative_forcing_rcp19(),
            lambda: if_then_else(
                rcp_scenario() == 1,
                lambda: f_gases_radiative_forcing_rcp26(),
                lambda: if_then_else(
                    rcp_scenario() == 2,
                    lambda: f_gases_radiative_forcing_rcp34(),
                    lambda: if_then_else(
                        rcp_scenario() == 3,
                        lambda: f_gases_radiative_forcing_rcp45(),
                        lambda: if_then_else(
                            rcp_scenario() == 4,
                            lambda: f_gases_radiative_forcing_rcp60(),
                            lambda: f_gases_radiative_forcing_rcp85(),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="F Gases Radiative Forcing History",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing": 1,
    },
)
def f_gases_radiative_forcing_history():
    """
    Historical data for radiative forcing from CH4 in the atmosphere.
    """
    return table_f_gases_radiative_forcing(time() * dimensionless_time())


@component.add(
    name="F Gases Radiative Forcing RCP19",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing_ssp2_rcp19": 1,
    },
)
def f_gases_radiative_forcing_rcp19():
    """
    Future projections of f-gases radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 1.9).
    """
    return table_f_gases_radiative_forcing_ssp2_rcp19(time() * dimensionless_time())


@component.add(
    name="F Gases Radiative Forcing RCP26",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing_ssp2_rcp26": 1,
    },
)
def f_gases_radiative_forcing_rcp26():
    """
    Future projections of f-gases radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 2.6).
    """
    return table_f_gases_radiative_forcing_ssp2_rcp26(time() * dimensionless_time())


@component.add(
    name="F Gases Radiative Forcing RCP34",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing_ssp2_rcp34": 1,
    },
)
def f_gases_radiative_forcing_rcp34():
    """
    Future projections of f gases radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_f_gases_radiative_forcing_ssp2_rcp34(time() * dimensionless_time())


@component.add(
    name="Other Anthropogenic Radiative Forcing RCP45",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing_ssp2_rcp45": 1,
    },
)
def other_anthropogenic_radiative_forcing_rcp45():
    return table_other_anthropogenic_radiative_forcing_ssp2_rcp45(
        time() * dimensionless_time()
    )


@component.add(
    name="Other Anthropogenic Radiative Forcing RCP85",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_anthropogenic_radiative_forcing_ssp2_rcp85": 1,
    },
)
def other_anthropogenic_radiative_forcing_rcp85():
    return table_other_anthropogenic_radiative_forcing_ssp2_rcp85(
        time() * dimensionless_time()
    )


@component.add(
    name="F Gases Radiative Forcing RCP85",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing_ssp2_rcp85": 1,
    },
)
def f_gases_radiative_forcing_rcp85():
    """
    Future projections of f gases radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_f_gases_radiative_forcing_ssp2_rcp85(time() * dimensionless_time())


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing SSP2 RCP19",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp19"
    },
)
def table_other_anthropogenic_radiative_forcing_ssp2_rcp19(x, final_subs=None):
    """
    Data series for future projections of other radiative forcing by Message-GLOBIOM (SSP2 marker model) in RCP 1.9.
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp19(
        x, final_subs
    )


_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp19 = (
    HardcodedLookups(
        [
            2005.0,
            2010.0,
            2020.0,
            2030.0,
            2040.0,
            2050.0,
            2060.0,
            2070.0,
            2080.0,
            2090.0,
            2100.0,
        ],
        [
            -0.557989,
            -0.487374,
            -0.397824,
            -0.230515,
            -0.210926,
            -0.27021,
            -0.319045,
            -0.350269,
            -0.372422,
            -0.388618,
            -0.39696,
        ],
        {},
        "interpolate",
        {},
        "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp19",
    )
)


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing SSP2 RCP26",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp26"
    },
)
def table_other_anthropogenic_radiative_forcing_ssp2_rcp26(x, final_subs=None):
    """
    Data series for future projections of other radiative forcing by Message-GLOBIOM (SSP2 marker model) in RCP 2.6.
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp26(
        x, final_subs
    )


_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp26 = (
    HardcodedLookups(
        [
            2005.0,
            2010.0,
            2020.0,
            2030.0,
            2040.0,
            2050.0,
            2060.0,
            2070.0,
            2080.0,
            2090.0,
            2100.0,
        ],
        [
            -0.557989,
            -0.487232,
            -0.399799,
            -0.306337,
            -0.244383,
            -0.274545,
            -0.331504,
            -0.375821,
            -0.401136,
            -0.411268,
            -0.411342,
        ],
        {},
        "interpolate",
        {},
        "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp26",
    )
)


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing SSP2 RCP34",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp34"
    },
)
def table_other_anthropogenic_radiative_forcing_ssp2_rcp34(x, final_subs=None):
    """
    Data series for future projections of other radiative forcing by MESSAGE-GLOBIOM (RCP 3.4).
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp34(
        x, final_subs
    )


_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp34 = (
    HardcodedLookups(
        [
            2005.0,
            2010.0,
            2020.0,
            2030.0,
            2040.0,
            2050.0,
            2060.0,
            2070.0,
            2080.0,
            2090.0,
            2100.0,
        ],
        [
            -0.557989,
            -0.487367,
            -0.405055,
            -0.362333,
            -0.311911,
            -0.331126,
            -0.356647,
            -0.378118,
            -0.400985,
            -0.420509,
            -0.426015,
        ],
        {},
        "interpolate",
        {},
        "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp34",
    )
)


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing SSP2 RCP45",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp45"
    },
)
def table_other_anthropogenic_radiative_forcing_ssp2_rcp45(x, final_subs=None):
    """
    Data series for future projections of other radiative forcing by MESSAGE-GLOBIOM in SSP2 RCP 4.5.
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp45(
        x, final_subs
    )


_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp45 = (
    HardcodedLookups(
        [
            2005.0,
            2010.0,
            2020.0,
            2030.0,
            2040.0,
            2050.0,
            2060.0,
            2070.0,
            2080.0,
            2090.0,
            2100.0,
        ],
        [
            -0.557989,
            -0.487489,
            -0.40917,
            -0.40208,
            -0.36824,
            -0.38091,
            -0.404117,
            -0.425465,
            -0.437686,
            -0.43453,
            -0.434378,
        ],
        {},
        "interpolate",
        {},
        "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp45",
    )
)


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing SSP2 RCP60",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp60"
    },
)
def table_other_anthropogenic_radiative_forcing_ssp2_rcp60(x, final_subs=None):
    """
    Data series for future projections of other radiative forcing by MESSAGE-GLOBIOM (RCP 6.0).
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp60(
        x, final_subs
    )


_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp60 = (
    HardcodedLookups(
        [
            2005.0,
            2010.0,
            2020.0,
            2030.0,
            2040.0,
            2050.0,
            2060.0,
            2070.0,
            2080.0,
            2090.0,
            2100.0,
        ],
        [
            -0.557989,
            -0.487543,
            -0.411289,
            -0.431191,
            -0.416421,
            -0.435845,
            -0.461476,
            -0.470064,
            -0.486857,
            -0.499783,
            -0.500466,
        ],
        {},
        "interpolate",
        {},
        "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp60",
    )
)


@component.add(
    name="F Gases Radiative Forcing RCP45",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing_ssp2_rcp45": 1,
    },
)
def f_gases_radiative_forcing_rcp45():
    """
    Future projections of f gases radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 4.5).
    """
    return table_f_gases_radiative_forcing_ssp2_rcp45(time() * dimensionless_time())


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing"
    },
)
def table_other_anthropogenic_radiative_forcing(x, final_subs=None):
    """
    Data series for historical data of other radiative forcing. 2005 AND 2010 from the SSP database, SSP2 Message-GLOBIOM (marker). Calculated as (total forcing) - (CO2, CH4, N2O and F-Gases forcings)
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing(x, final_subs)


_hardcodedlookup_table_other_anthropogenic_radiative_forcing = HardcodedLookups(
    [1900.0, 2005.0],
    [0.0, -0.557989],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_anthropogenic_radiative_forcing",
)


@component.add(
    name="F Gases Radiative Forcing RCP60",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_f_gases_radiative_forcing_ssp2_rcp60": 1,
    },
)
def f_gases_radiative_forcing_rcp60():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 6.0).
    """
    return table_f_gases_radiative_forcing_ssp2_rcp60(time() * dimensionless_time())


@component.add(
    name="TABLE Other Anthropogenic Radiative Forcing SSP2 RCP85",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp85"
    },
)
def table_other_anthropogenic_radiative_forcing_ssp2_rcp85(x, final_subs=None):
    """
    Data series for future projections of other radiative forcing by MESSAGE-GLOBIOM (RCP 8.5).
    """
    return _hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp85(
        x, final_subs
    )


_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp85 = (
    HardcodedLookups(
        [
            2005.0,
            2010.0,
            2020.0,
            2030.0,
            2040.0,
            2050.0,
            2060.0,
            2070.0,
            2080.0,
            2090.0,
            2100.0,
        ],
        [
            -0.557989,
            -0.48777,
            -0.415208,
            -0.439654,
            -0.432948,
            -0.454012,
            -0.477328,
            -0.486185,
            -0.499955,
            -0.503879,
            -0.497409,
        ],
        {},
        "interpolate",
        {},
        "_hardcodedlookup_table_other_anthropogenic_radiative_forcing_ssp2_rcp85",
    )
)


@component.add(
    name="CH4 Radiative Forcing RCP19",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_ch4_radiative_forcing_ssp2_rcp19": 1,
    },
)
def ch4_radiative_forcing_rcp19():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 1.9).
    """
    return table_ch4_radiative_forcing_ssp2_rcp19(time() * dimensionless_time())


@component.add(
    name="TABLE CH4 Radiative Forcing SSP2 RCP19",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp19"
    },
)
def table_ch4_radiative_forcing_ssp2_rcp19(x, final_subs=None):
    """
    Data series for future projections of CH4 radiative forcing by Message-GLOBIOM (SSP2 marker model) in RCP 1.9.
    """
    return _hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp19(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp19 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.588276,
        0.61707,
        0.58715,
        0.509574,
        0.435621,
        0.380312,
        0.338259,
        0.301909,
        0.271782,
        0.249517,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp19",
)


@component.add(
    name="Lookup tertiary education duration",
    units="Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_lookup_tertiary_education_duration"},
)
def lookup_tertiary_education_duration(x, final_subs=None):
    return _hardcodedlookup_lookup_tertiary_education_duration(x, final_subs)


_hardcodedlookup_lookup_tertiary_education_duration = HardcodedLookups(
    [1900.0, 1960.0, 2020.0],
    [2.0, 2.5, 4.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_lookup_tertiary_education_duration",
)


@component.add(
    name="Lookup for the Impact of Female Education on Climate Mortality",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_lookup_for_the_impact_of_female_education_on_climate_mortality"
    },
)
def lookup_for_the_impact_of_female_education_on_climate_mortality(x, final_subs=None):
    """
    Note that values for x<=0.7 are set to the value of stepeness in the case of no education impact
    """
    return (
        _hardcodedlookup_lookup_for_the_impact_of_female_education_on_climate_mortality(
            x, final_subs
        )
    )


_hardcodedlookup_lookup_for_the_impact_of_female_education_on_climate_mortality = HardcodedLookups(
    [0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
    [0.257497, 0.257497, 0.257497, 0.258934, 0.268012, 0.277423],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_lookup_for_the_impact_of_female_education_on_climate_mortality",
)


@component.add(
    name="Lookup for the Impact of MYS on Climate Mortality",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_lookup_for_the_impact_of_mys_on_climate_mortality"
    },
)
def lookup_for_the_impact_of_mys_on_climate_mortality(x, final_subs=None):
    """
    Note that the values for <10 rs of MYS are set to the value of steepness where education impact wasn ot taken into account.
    """
    return _hardcodedlookup_lookup_for_the_impact_of_mys_on_climate_mortality(
        x, final_subs
    )


_hardcodedlookup_lookup_for_the_impact_of_mys_on_climate_mortality = HardcodedLookups(
    [8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0],
    [0.257497, 0.257497, 0.257497, 0.261932, 0.270401, 0.279158, 0.288224, 0.297621],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_lookup_for_the_impact_of_mys_on_climate_mortality",
)


@component.add(
    name="SWITCH Impact of Education on Climate Mortality",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def switch_impact_of_education_on_climate_mortality():
    """
    0 : No impact, hence a constant 1 : The driver is MYS 2 : The driver is Share of Females aged 20-39 with sec+ education
    """
    return 1


@component.add(
    name="Climate mortality steepness",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_impact_of_education_on_climate_mortality": 2,
        "climate_mortality_steepness_0": 1,
        "lookup_for_the_impact_of_mys_on_climate_mortality": 1,
        "lookup_for_the_impact_of_female_education_on_climate_mortality": 1,
        "share_of_females_aged_2039_with_sec_education": 1,
        "mean_years_of_schooling": 1,
    },
)
def climate_mortality_steepness():
    """
    The parameter that defines the steepness of the logistic function representing temperature-mortality relation. It is assumed to depend on education, as education is a mediating factor for the climate impacts on mortality. Imapct of education can be driven by two alternative indicators, MYS or the female education.
    """
    return if_then_else(
        switch_impact_of_education_on_climate_mortality() == 0,
        lambda: climate_mortality_steepness_0(),
        lambda: if_then_else(
            switch_impact_of_education_on_climate_mortality() == 1,
            lambda: lookup_for_the_impact_of_mys_on_climate_mortality(
                mean_years_of_schooling()
            ),
            lambda: lookup_for_the_impact_of_female_education_on_climate_mortality(
                share_of_females_aged_2039_with_sec_education()
            ),
        ),
    )


@component.add(
    name="Year2100", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def year2100():
    return 2100


@component.add(
    name="Population fraction with secondary and higher education by gender",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "secondary_education_graduates_by_gender": 1,
        "tertiary_education_graduates_by_gender": 1,
        "population_by_gender": 1,
    },
)
def population_fraction_with_secondary_and_higher_education_by_gender():
    return (
        secondary_education_graduates_by_gender()
        + tertiary_education_graduates_by_gender()
    ) / population_by_gender()


@component.add(
    name="DemoFELIX SCENARIO SWITCH",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def demofelix_scenario_switch():
    return 0


@component.add(
    name="Fractional1", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def fractional1():
    return 1


@component.add(
    name="Reference Other Technology Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_other_technology_variation():
    """
    Reference factor productivity in other than energy sectors.
    """
    return 1


@component.add(
    name="Reference Other Technology baseline",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_other_technology_baseline():
    """
    Reference factor productivity in other than energy sectors.
    """
    return 1


@component.add(
    name="Relative income of skilled variation baseline",
    units="$/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_income_of_skilled_variation_baseline():
    return 65


@component.add(
    name="Skilled fraction of secondary education graduates baseline",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def skilled_fraction_of_secondary_education_graduates_baseline():
    return 0.5


@component.add(
    name="DemoFeliX target year",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def demofelix_target_year():
    return 2030


@component.add(
    name="Opt2 constant", units="percent", comp_type="Constant", comp_subtype="Normal"
)
def opt2_constant():
    return 4.167


@component.add(
    name="Opt2 edu coeff", units="percent", comp_type="Constant", comp_subtype="Normal"
)
def opt2_edu_coeff():
    return -4.56


@component.add(
    name="Opt2 temperature coeff",
    units="percent/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def opt2_temperature_coeff():
    return 2.494


@component.add(
    name="Opt1 MYS coeff",
    units="percent/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def opt1_mys_coeff():
    return -0.422


@component.add(
    name="Impact of climate change on mortality opt1",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mean_years_of_schooling": 2,
        "opt1_constant": 2,
        "temperature_change_from_preindustrial": 2,
        "opt1_temperature_coeff": 2,
        "opt1_mys_coeff": 1,
    },
)
def impact_of_climate_change_on_mortality_opt1():
    return if_then_else(
        mean_years_of_schooling() > 8.5,
        lambda: opt1_temperature_coeff() * temperature_change_from_preindustrial()
        + opt1_mys_coeff() * mean_years_of_schooling()
        + opt1_constant(),
        lambda: opt1_temperature_coeff() * temperature_change_from_preindustrial()
        + opt1_constant(),
    )


@component.add(
    name="Impact of climate change on mortality opt2",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "opt2_temperature_coeff": 1,
        "temperature_change_from_preindustrial": 1,
        "share_of_females_aged_2039_with_sec_education": 1,
        "opt2_edu_coeff": 1,
        "opt2_constant": 1,
    },
)
def impact_of_climate_change_on_mortality_opt2():
    return (
        opt2_temperature_coeff() * temperature_change_from_preindustrial()
        + opt2_edu_coeff() * share_of_females_aged_2039_with_sec_education()
        + opt2_constant()
    )


@component.add(
    name="Impact of climate change on mortality fraction",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "climate_mortality_switch": 3,
        "impact_of_climate_change_on_mortality_opt0": 1,
        "impact_of_climate_change_on_mortality_opt2": 1,
        "impact_of_climate_change_on_mortality_opt1": 1,
    },
)
def impact_of_climate_change_on_mortality_fraction():
    return if_then_else(
        climate_mortality_switch() == 0,
        lambda: impact_of_climate_change_on_mortality_opt0(),
        lambda: if_then_else(
            climate_mortality_switch() == 1,
            lambda: impact_of_climate_change_on_mortality_opt1(),
            lambda: if_then_else(
                climate_mortality_switch() == 2,
                lambda: impact_of_climate_change_on_mortality_opt2(),
                lambda: 0,
            ),
        ),
    )


@component.add(
    name="Opt1 constant", units="percent", comp_type="Constant", comp_subtype="Normal"
)
def opt1_constant():
    return 4.95


@component.add(
    name="Opt1 temperature coeff",
    units="percent/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def opt1_temperature_coeff():
    return 2.513


@component.add(
    name='"Share of females aged 20-39 with sec+ education"',
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "secondary_education_graduates": 1,
        "tertiary_education_graduates": 1,
        "population_cohorts": 1,
    },
)
def share_of_females_aged_2039_with_sec_education():
    return (
        sum(
            secondary_education_graduates()
            .loc["female", _subscript_dict['"20 to 39"']]
            .reset_coords(drop=True)
            .rename({"Cohorts": '"20 to 39"!'}),
            dim=['"20 to 39"!'],
        )
        + sum(
            tertiary_education_graduates()
            .loc["female", _subscript_dict['"20 to 39"']]
            .reset_coords(drop=True)
            .rename({"Cohorts": '"20 to 39"!'}),
            dim=['"20 to 39"!'],
        )
    ) / sum(
        population_cohorts()
        .loc["female", _subscript_dict['"20 to 39"']]
        .reset_coords(drop=True)
        .rename({"Cohorts": '"20 to 39"!'}),
        dim=['"20 to 39"!'],
    )


@component.add(name="REOs", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def reos():
    return 0.210843


@component.add(
    name="Ratio of technology",
    units="Dmnl",
    subscripts=["Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ts": 2},
)
def ratio_of_technology():
    value = xr.DataArray(
        np.nan,
        {"Labor force type": _subscript_dict["Labor force type"]},
        ["Labor force type"],
    )
    value.loc[["skill"]] = ts()
    value.loc[["unskill"]] = 1 - ts()
    return value


@component.add(
    name="Ratio of capital",
    units="Dmnl",
    subscripts=["Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"rcs": 2},
)
def ratio_of_capital():
    value = xr.DataArray(
        np.nan,
        {"Labor force type": _subscript_dict["Labor force type"]},
        ["Labor force type"],
    )
    value.loc[["skill"]] = rcs()
    value.loc[["unskill"]] = 1 - rcs()
    return value


@component.add(
    name="InitialREO",
    units="Dmnl",
    subscripts=["Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"reos": 2},
)
def initialreo():
    value = xr.DataArray(
        np.nan,
        {"Labor force type": _subscript_dict["Labor force type"]},
        ["Labor force type"],
    )
    value.loc[["skill"]] = reos()
    value.loc[["unskill"]] = 1 - reos()
    return value


@component.add(
    name="Total REO",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"reference_economy_output": 1},
)
def total_reo():
    return sum(
        reference_economy_output().rename({"Labor force type": "Labor force type!"}),
        dim=["Labor force type!"],
    )


@component.add(
    name="Climate mortality saturation 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_saturation_0():
    """
    The parameter that defines the saturation level of the logistic function representing temperature-mortality relation. Calibrated to Bressler et al. 2021.
    """
    return 0.684457


@component.add(
    name="Climate mortality saturation SA",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_saturation_sa():
    return 0.684457


@component.add(
    name="Climate mortality steepness 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_steepness_0():
    """
    The parameter that defines the steepness of the logistic function representing temperature-mortality relation. Calibrated to Bressler et al. 2021.
    """
    return 0.257497


@component.add(
    name="Climate mortality steepness SA",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_steepness_sa():
    return 0.257497


@component.add(
    name="Current year", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def current_year():
    return 2023


@component.add(
    name="Climate Damage Steepness 0",
    units="1/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_steepness_0():
    """
    Nonlinearity of Climate Damage Fraction. Nordhaus :1.09955 D&S : 1.795846 Burke st:1.888017 Burke lt:1.43089
    """
    return 1.43089


@component.add(
    name="Climate Damage Steepness SA",
    units="1/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_steepness_sa():
    """
    Nonlinearity of Climate Damage Fraction. Nordhaus :1.09955 D&S : 1.795846 Burke st:1.888017 Burke lt:1.43089
    """
    return 1.43089


@component.add(
    name="Climate Damage Inflection 0",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_inflection_0():
    """
    Nordhaus : 3.89219 D&S : 3.863367 Burke st : 1.773525 Burke lt : 2.2569
    """
    return 2.2569


@component.add(
    name="Climate Damage Inflection SA",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_inflection_sa():
    """
    Nordhaus : 3.89219 D&S : 3.863367 Burke st : 1.773525 Burke lt : 2.2569
    """
    return 2.2569


@component.add(
    name="Impact of climate change on mortality opt0",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "y_climate_mortality": 1,
        "climate_mortality_inflection": 1,
        "climate_mortality_saturation": 1,
        "climate_mortality_steepness": 1,
        "nvs_100_percent": 1,
        "temperature_change_from_preindustrial": 1,
    },
)
def impact_of_climate_change_on_mortality_opt0():
    return -y_climate_mortality() + nvs_100_percent() * (
        climate_mortality_saturation()
        / (
            1
            + float(
                np.exp(
                    -climate_mortality_steepness()
                    * (
                        temperature_change_from_preindustrial()
                        - climate_mortality_inflection()
                    )
                )
            )
        )
    )


@component.add(
    name="y climate mortality",
    units="percent",
    comp_type="Constant",
    comp_subtype="Normal",
)
def y_climate_mortality():
    """
    The parameter that defines the negative values of mortality impact when T change is below 0. Obtained from the curve fit to the Bressler et al. 2021 function.
    """
    return 7.96458


@component.add(
    name="Climate Damage Saturation 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_saturation_0():
    """
    Nordhaus: 0.073953 Dietz&Stern:0.935478 Burke st : 0.206988 Burke lt : 0.75716
    """
    return 0.75716


@component.add(
    name="Climate Damage Saturation SA",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_saturation_sa():
    """
    Nordhaus: 0.073953 Dietz&Stern:0.935478 Burke st : 0.206988 Burke lt : 0.75716
    """
    return 0.75716


@component.add(
    name="Climate mortality inflection SA",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_inflection_sa():
    return 7.75615


@component.add(
    name="Climate mortality inflection 0",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_mortality_inflection_0():
    return 7.75615


@component.add(
    name='"100 percent"', units="percent", comp_type="Constant", comp_subtype="Normal"
)
def nvs_100_percent():
    return 100


@component.add(
    name="alpha Nordhaus damage",
    units="1/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def alpha_nordhaus_damage():
    return -0.00118


@component.add(
    name="beta Nordhaus damage",
    units="1/(DegreesC*DegreesC)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def beta_nordhaus_damage():
    return 0.00278


@component.add(
    name="Burke Damage long term pooled",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "temperature_change_from_preindustrial": 1,
        "unit_degreesc": 1,
        "burke_damage_long_term_pooled_lookup": 1,
    },
)
def burke_damage_long_term_pooled():
    return burke_damage_long_term_pooled_lookup(
        temperature_change_from_preindustrial() / unit_degreesc()
    )


@component.add(
    name="Burke Damage long term pooled Lookup",
    units="percent",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_burke_damage_long_term_pooled_lookup"},
)
def burke_damage_long_term_pooled_lookup(x, final_subs=None):
    """
    Damage estimate according to Burket et al. 2015 Nature Fig. 4d
    """
    return _hardcodedlookup_burke_damage_long_term_pooled_lookup(x, final_subs)


_hardcodedlookup_burke_damage_long_term_pooled_lookup = HardcodedLookups(
    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0],
    [0.0, 6.3, 35.0, 55.0, 68.7, 80.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_burke_damage_long_term_pooled_lookup",
)


@component.add(
    name="Burke Damage short term pooled",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "temperature_change_from_preindustrial": 1,
        "unit_degreesc": 1,
        "burke_damage_short_term_pooled_lookup": 1,
    },
)
def burke_damage_short_term_pooled():
    return burke_damage_short_term_pooled_lookup(
        temperature_change_from_preindustrial() / unit_degreesc()
    )


@component.add(
    name="Burke Damage short term pooled Lookup",
    units="percent",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_burke_damage_short_term_pooled_lookup"},
)
def burke_damage_short_term_pooled_lookup(x, final_subs=None):
    """
    Damage estimate according to Burket et al. 2015 Nature Fig. 4d
    """
    return _hardcodedlookup_burke_damage_short_term_pooled_lookup(x, final_subs)


_hardcodedlookup_burke_damage_short_term_pooled_lookup = HardcodedLookups(
    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0],
    [0.0, 1.0, 13.0, 19.0, 20.5, 21.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_burke_damage_short_term_pooled_lookup",
)


@component.add(
    name="Climate Damage Fraction OLD",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "climate_damage_scale": 1,
        "reference_temperature": 1,
        "temperature_change_from_preindustrial": 1,
        "climate_damage_nonlinearity": 1,
    },
)
def climate_damage_fraction_old():
    """
    Fraction of Output lost to Climate Change as a function of temperature rise. A logistic function is chosen to formulate climate damages due to its flexibility to capture various damage function estimates such as Nordhaus and Dietz&Stern ( exponential) or Burke (logarithmic).
    """
    return 1 / (
        1
        + climate_damage_scale()
        * (temperature_change_from_preindustrial() / reference_temperature())
        ** climate_damage_nonlinearity()
    )


@component.add(
    name="Climate Damage Function SWITCH",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_function_switch():
    """
    0 : 0 1 : Nordhaus 2 : Dietz&Stern 3 : Burke short term pooled 4 : Burke long term pooled 5 : Logistic function defined by three parameters
    """
    return 4


@component.add(
    name="Climate Damage Nonlinearity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_nonlinearity():
    """
    Nonlinearity of Climate Damage Cost Fraction.
    """
    return 2


@component.add(
    name="Climate Damage Percentage",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "climate_damage_function_switch": 5,
        "logistic_damage": 1,
        "dietz_and_stern_damage": 1,
        "nordhaus_damage": 1,
        "burke_damage_short_term_pooled": 1,
        "burke_damage_long_term_pooled": 1,
    },
)
def climate_damage_percentage():
    """
    Can be set either to predefined functions according to the literature, or to a flexible logistic function that can capture a wide uncertainty range.
    """
    return if_then_else(
        climate_damage_function_switch() == 0,
        lambda: 0,
        lambda: if_then_else(
            climate_damage_function_switch() == 1,
            lambda: nordhaus_damage(),
            lambda: if_then_else(
                climate_damage_function_switch() == 2,
                lambda: dietz_and_stern_damage(),
                lambda: if_then_else(
                    climate_damage_function_switch() == 3,
                    lambda: burke_damage_short_term_pooled(),
                    lambda: if_then_else(
                        climate_damage_function_switch() == 4,
                        lambda: burke_damage_long_term_pooled(),
                        lambda: logistic_damage(),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Climate Damage Scale",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_damage_scale():
    """
    Climate Damage Fraction at Reference Temperature.
    """
    return 0.013


@component.add(
    name="denom1 DietzStern",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def denom1_dietzstern():
    return 12.2


@component.add(
    name="denom2 DietzStern",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def denom2_dietzstern():
    return 4


@component.add(
    name="Dietz and Stern Damage",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nvs_100_percent": 1,
        "exp1_dietzstern": 1,
        "denom2_dietzstern": 1,
        "exp2_dietzstern": 1,
        "denom1_dietzstern": 1,
        "temperature_change_from_preindustrial": 2,
    },
)
def dietz_and_stern_damage():
    """
    Formulation of the original damage function used by Dietz and Stern in the Economic Journal (2015) paper. https://doi.org/10.1111/ecoj.12188
    """
    return nvs_100_percent() * (
        1
        - 1
        / (
            1
            + (temperature_change_from_preindustrial() / denom1_dietzstern())
            ** exp1_dietzstern()
            + (temperature_change_from_preindustrial() / denom2_dietzstern())
            ** exp2_dietzstern()
        )
    )


@component.add(
    name="exp1 DietzStern", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def exp1_dietzstern():
    return 2


@component.add(
    name="exp2 DietzStern", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def exp2_dietzstern():
    return 7.02


@component.add(
    name="Net Climate Change Impact on Economy",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"climate_damage_percentage": 1, "nvs_100_percent": 1},
)
def net_climate_change_impact_on_economy():
    """
    The fraction of ecomomy output after loss due to climate change.
    """
    return 1 - climate_damage_percentage() / nvs_100_percent()


@component.add(
    name="Logistic Damage",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nvs_100_percent": 1,
        "climate_damage_saturation": 1,
        "temperature_change_from_preindustrial": 1,
        "climate_damage_inflection": 1,
        "climate_damage_steepness": 1,
    },
)
def logistic_damage():
    """
    Fraction of Output lost to Climate Change as a function of temperature rise. A logistic function is chosen to formulate climate damages due to its flexibility to capture various damage function estimates such as Nordhaus and Dietz&Stern ( exponential) or Burke (logarithmic).
    """
    return (
        nvs_100_percent()
        * climate_damage_saturation()
        / (
            1
            + float(
                np.exp(
                    -climate_damage_steepness()
                    * (
                        temperature_change_from_preindustrial()
                        - climate_damage_inflection()
                    )
                )
            )
        )
    )


@component.add(
    name="unit DegreesC", units="DegreesC", comp_type="Constant", comp_subtype="Normal"
)
def unit_degreesc():
    return 1


@component.add(
    name="Nordhaus Damage",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nvs_100_percent": 1,
        "beta_nordhaus_damage": 1,
        "temperature_change_from_preindustrial": 2,
        "alpha_nordhaus_damage": 1,
    },
)
def nordhaus_damage():
    """
    Formulation of the original damage function used by Nordhaus in PNAS (2017) paper.
    """
    return nvs_100_percent() * (
        1
        - 1
        / (
            1
            + alpha_nordhaus_damage() * temperature_change_from_preindustrial()
            + beta_nordhaus_damage() * temperature_change_from_preindustrial() ** 2
        )
    )


@component.add(
    name="Reference Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_temperature():
    """
    Reference Temperature for Calculation of Climate Damages.
    """
    return 3


@component.add(
    name="GWP Indicator",
    units="B$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gross_world_product": 1, "usd_to_billionusd": 1},
)
def gwp_indicator():
    return gross_world_product() * usd_to_billionusd()


@component.add(
    name="Other Land Indicator",
    units="Million ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_land": 1, "ha_into_million_ha": 1},
)
def other_land_indicator():
    return other_land() * ha_into_million_ha()


@component.add(
    name="Total Agirculture CO2 Emissions Indicator",
    units="Million ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_from_agriculture": 1,
        "tonco2_to_million_ton_co2": 1,
    },
)
def total_agirculture_co2_emissions_indicator():
    return total_co2_emissions_from_agriculture() * tonco2_to_million_ton_co2()


@component.add(
    name="Total CO2 Emissions from the Energy Sector Indicator",
    units="Million ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_c_emission_from_the_energy_sector": 1,
        "co2_to_c": 1,
        "tonco2_to_million_ton_co2": 1,
    },
)
def total_co2_emissions_from_the_energy_sector_indicator():
    return (
        total_c_emission_from_the_energy_sector()
        * co2_to_c()
        * tonco2_to_million_ton_co2()
    )


@component.add(
    name="Total Land Use CO2 Emissions Indicator",
    units="Million ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_land_use": 1, "tonco2_to_million_ton_co2": 1},
)
def total_land_use_co2_emissions_indicator():
    return total_co2_emissions_from_land_use() * tonco2_to_million_ton_co2()


@component.add(
    name="USD to billionUSD", units="B$/$", comp_type="Constant", comp_subtype="Normal"
)
def usd_to_billionusd():
    return 1 / 1000000000.0


@component.add(
    name="Expected Grassland Milk Yield",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_egmya": 1},
)
def expected_grassland_milk_yield():
    return outflow_egmya()


@component.add(
    name="Potential vegetarians",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_pva": 1},
)
def potential_vegetarians():
    return outflow_pva()


@component.add(
    name="Expected crop yield",
    units="Ton/(Year*ha)",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_exya": 1},
)
def expected_crop_yield():
    return outflow_exya()


@component.add(
    name="Graduation Rate from Secondary Education",
    units="People/Year",
    subscripts=["Gender", "SecondaryGraduation"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "outflow_ersea": 4,
        "interval_duration": 10,
        "average_secondary_education_duration": 4,
        "maturation_rate": 3,
    },
)
def graduation_rate_from_secondary_education():
    """
    Conidering that the average secondary education duration is 6 yrs, 4/5 of the students enrolled when aged 10-14 graduate when they are 15-19. 1/5 of thm graduate at the 20-24 interval. The same goes for the students enrolled when 15-19.
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SecondaryGraduation": _subscript_dict["SecondaryGraduation"],
        },
        ["Gender", "SecondaryGraduation"],
    )
    value.loc[:, ['"15-19"']] = (
        np.minimum(
            outflow_ersea().loc[:, '"10-14"'].reset_coords(drop=True)
            * (
                interval_duration()
                + interval_duration()
                - average_secondary_education_duration()
            )
            / interval_duration(),
            maturation_rate().loc[:, '"15-19"'].reset_coords(drop=True),
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    value.loc[:, ['"20-24"']] = (
        np.minimum(
            outflow_ersea().loc[:, '"10-14"'].reset_coords(drop=True)
            * (average_secondary_education_duration() - interval_duration())
            / interval_duration()
            + outflow_ersea().loc[:, '"15-19"'].reset_coords(drop=True)
            * (
                interval_duration()
                + interval_duration()
                - average_secondary_education_duration()
            )
            / interval_duration(),
            maturation_rate().loc[:, '"20-24"'].reset_coords(drop=True),
        )
        .expand_dims({"YoGL cohorts": ['"20-24"']}, 1)
        .values
    )
    value.loc[:, ['"25-29"']] = (
        np.minimum(
            outflow_ersea().loc[:, '"15-19"'].reset_coords(drop=True)
            * (average_secondary_education_duration() - interval_duration())
            / interval_duration(),
            maturation_rate().loc[:, '"25-29"'].reset_coords(drop=True),
        )
        .expand_dims({"YoGL cohorts": ['"25-29"']}, 1)
        .values
    )
    return value


@component.add(
    name="Primary enrollment rate previous",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_perpa": 1},
)
def primary_enrollment_rate_previous():
    return outflow_perpa()


@component.add(
    name="Graduation Rate from Primary Education",
    units="People/Year",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "outflow_erpea": 2,
        "interval_duration": 5,
        "average_primary_education_duration": 2,
        "maturation_rate": 2,
    },
)
def graduation_rate_from_primary_education():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = (
        np.minimum(
            outflow_erpea()
            * (
                interval_duration()
                + interval_duration()
                - average_primary_education_duration()
            )
            / interval_duration(),
            maturation_rate().loc[:, '"10-14"'].reset_coords(drop=True),
        )
        .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1)
        .values
    )
    value.loc[:, ['"15-19"']] = (
        np.minimum(
            outflow_erpea()
            * (average_primary_education_duration() - interval_duration())
            / interval_duration(),
            maturation_rate().loc[:, '"15-19"'].reset_coords(drop=True),
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    return value


@component.add(
    name="Graduation Rate from Tertiary Education",
    units="People/Year",
    subscripts=["Gender", "TertiaryGraduation"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ertea": 3, "persistence_tertiary": 3, "maturation_rate": 3},
)
def graduation_rate_from_tertiary_education():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "TertiaryGraduation": _subscript_dict["TertiaryGraduation"],
        },
        ["Gender", "TertiaryGraduation"],
    )
    value.loc[:, ['"20-24"']] = (
        np.minimum(
            outflow_ertea().loc[:, '"15-19"'].reset_coords(drop=True)
            * persistence_tertiary(),
            maturation_rate().loc[:, '"20-24"'].reset_coords(drop=True),
        )
        .expand_dims({"YoGL cohorts": ['"20-24"']}, 1)
        .values
    )
    value.loc[:, ['"25-29"']] = (
        np.minimum(
            outflow_ertea().loc[:, '"20-24"'].reset_coords(drop=True)
            * persistence_tertiary(),
            maturation_rate().loc[:, '"25-29"'].reset_coords(drop=True),
        )
        .expand_dims({"YoGL cohorts": ['"25-29"']}, 1)
        .values
    )
    value.loc[:, ['"30-34"']] = (
        np.minimum(
            outflow_ertea().loc[:, '"25-29"'].reset_coords(drop=True)
            * persistence_tertiary(),
            maturation_rate().loc[:, '"30-34"'].reset_coords(drop=True),
        )
        .expand_dims({"YoGL cohorts": ['"30-34"']}, 1)
        .values
    )
    return value


@component.add(
    name="Mortality fraction UN",
    units="1/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 42},
)
def mortality_fraction_un():
    """
    "Age specific mortality rate m(x,n) - abridged" from UN https://population.un.org/dataportal/data/indicators/79/locations/900/start /2000/end/2100/table/pivotbylocation
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["female"], ['"0-4"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00584919,
            0.00559141,
            0.00533441,
            0.00506791,
            0.00487977,
            0.00459598,
            0.00433373,
            0.00410891,
            0.00394565,
            0.00368864,
            0.0035247,
            0.0033256,
            0.00317178,
            0.00303412,
            0.00289948,
            0.0027755,
            0.00265634,
            0.00253933,
            0.00244206,
            0.00236688,
            0.00229321,
            0.00224952,
            0.00227417,
            0.00228047,
            0.00227405,
            0.0022907,
            0.00225811,
            0.00222402,
            0.00219121,
            0.00215882,
            0.00212665,
            0.00209515,
            0.00206415,
            0.00203297,
            0.00200075,
            0.00196906,
            0.00193647,
            0.00190458,
            0.00187172,
            0.00183878,
            0.00180671,
            0.00177447,
            0.00174357,
            0.00171334,
            0.00168373,
            0.00165547,
            0.00162704,
            0.00160057,
            0.00157598,
            0.00155178,
            0.00152814,
            0.00150615,
            0.00148384,
            0.00146232,
            0.00144064,
            0.00141812,
            0.00139659,
            0.0013748,
            0.00135346,
            0.00133199,
            0.00130985,
            0.00128821,
            0.00126616,
            0.00124444,
            0.00122349,
            0.00120232,
            0.00118066,
            0.00115909,
            0.00113746,
            0.00111725,
            0.00109591,
            0.00107557,
            0.00105499,
            0.00103576,
            0.00101743,
            0.00099869,
            0.00098116,
            0.00096353,
            0.00094538,
            0.00092835,
            0.00091192,
            0.00089592,
            0.00088139,
            0.00086537,
            0.00085136,
            0.00083759,
            0.00082358,
            0.00081029,
            0.00079747,
            0.00078495,
            0.00077181,
            0.00075919,
            0.00074711,
            0.00073472,
            0.00072249,
            0.00071039,
            0.0006985,
            0.0006871,
            0.00067505,
            0.00066267,
            0.00065148,
        ],
    )
    value.loc[["female"], ['"5-9"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00187015,
            0.00183239,
            0.00180592,
            0.00174601,
            0.00174771,
            0.00167453,
            0.00160407,
            0.00155702,
            0.00155416,
            0.00145006,
            0.00142665,
            0.00135085,
            0.00131415,
            0.00126481,
            0.00123247,
            0.00120507,
            0.00117239,
            0.00114112,
            0.00111826,
            0.00108943,
            0.00106177,
            0.00103854,
            0.00103337,
            0.00101967,
            0.00101651,
            0.00102774,
            0.00102648,
            0.00102454,
            0.0010197,
            0.00101179,
            0.00100145,
            0.00098913,
            0.00097652,
            0.0009637,
            0.0009507,
            0.00093785,
            0.00092449,
            0.00091129,
            0.00089751,
            0.00088345,
            0.00086933,
            0.00085435,
            0.00083957,
            0.00082506,
            0.00081084,
            0.0007968,
            0.00078268,
            0.00076906,
            0.00075585,
            0.00074286,
            0.00072989,
            0.00071749,
            0.00070502,
            0.00069359,
            0.00068255,
            0.00067142,
            0.00066124,
            0.00065064,
            0.00064013,
            0.00062964,
            0.000619,
            0.00060873,
            0.00059854,
            0.00058831,
            0.00057828,
            0.00056809,
            0.00055791,
            0.00054827,
            0.00053801,
            0.00052851,
            0.00051834,
            0.00050825,
            0.00049815,
            0.00048845,
            0.00047875,
            0.00046885,
            0.00045944,
            0.00045013,
            0.00044086,
            0.00043209,
            0.00042347,
            0.00041507,
            0.00040727,
            0.00039858,
            0.00039107,
            0.00038386,
            0.00037657,
            0.00036974,
            0.00036307,
            0.00035654,
            0.00034995,
            0.00034333,
            0.00033731,
            0.00033083,
            0.00032464,
            0.00031825,
            0.00031229,
            0.00030666,
            0.00030061,
            0.00029454,
            0.00028905,
        ],
    )
    value.loc[["female"], ['"10-14"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00103308,
            0.00101051,
            0.00099668,
            0.00097634,
            0.00098838,
            0.00095751,
            0.00091926,
            0.00089806,
            0.00090618,
            0.00085596,
            0.00084976,
            0.00080839,
            0.00078926,
            0.00076465,
            0.00074724,
            0.00073433,
            0.00071454,
            0.00069747,
            0.00068272,
            0.00066742,
            0.00065128,
            0.00064901,
            0.00064087,
            0.00061968,
            0.00061114,
            0.00061026,
            0.00060157,
            0.00059373,
            0.000588,
            0.00058392,
            0.00058125,
            0.00057952,
            0.00057831,
            0.00057594,
            0.00057209,
            0.00056704,
            0.00056043,
            0.00055357,
            0.00054664,
            0.00053967,
            0.00053273,
            0.00052547,
            0.00051825,
            0.00051095,
            0.00050366,
            0.00049633,
            0.0004886,
            0.00048104,
            0.0004737,
            0.00046629,
            0.00045877,
            0.00045157,
            0.00044417,
            0.00043706,
            0.00043017,
            0.00042319,
            0.00041661,
            0.00041007,
            0.00040389,
            0.00039795,
            0.00039212,
            0.00038658,
            0.00038107,
            0.00037555,
            0.00037023,
            0.00036486,
            0.00035951,
            0.00035442,
            0.00034907,
            0.00034411,
            0.00033879,
            0.00033363,
            0.00032847,
            0.00032336,
            0.00031823,
            0.00031297,
            0.0003078,
            0.00030255,
            0.00029727,
            0.00029215,
            0.00028703,
            0.00028204,
            0.00027743,
            0.00027232,
            0.00026788,
            0.00026357,
            0.00025918,
            0.00025503,
            0.00025097,
            0.00024702,
            0.00024308,
            0.00023924,
            0.00023578,
            0.00023203,
            0.00022848,
            0.00022488,
            0.0002214,
            0.00021811,
            0.00021464,
            0.00021115,
            0.000208,
        ],
    )
    value.loc[["female"], ['"15-19"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0013997,
            0.00137334,
            0.00134906,
            0.00131399,
            0.00130511,
            0.00125232,
            0.00120261,
            0.00117691,
            0.00118213,
            0.00113338,
            0.00112757,
            0.00108602,
            0.00105847,
            0.00102178,
            0.00099957,
            0.00098033,
            0.00095729,
            0.00094068,
            0.00092595,
            0.00091281,
            0.00088417,
            0.00095733,
            0.00092597,
            0.00085909,
            0.00084294,
            0.00083844,
            0.00082575,
            0.00081328,
            0.00080228,
            0.0007918,
            0.00078132,
            0.00077043,
            0.00076062,
            0.0007528,
            0.00074688,
            0.00074296,
            0.00074076,
            0.00073974,
            0.00073745,
            0.0007332,
            0.00072711,
            0.00071876,
            0.00071,
            0.00070133,
            0.00069282,
            0.00068435,
            0.00067555,
            0.00066697,
            0.00065838,
            0.0006496,
            0.00064055,
            0.0006315,
            0.00062203,
            0.00061286,
            0.00060374,
            0.00059444,
            0.00058568,
            0.00057673,
            0.00056798,
            0.0005596,
            0.00055123,
            0.00054314,
            0.0005354,
            0.00052796,
            0.00052095,
            0.00051412,
            0.00050751,
            0.00050126,
            0.00049476,
            0.00048881,
            0.00048247,
            0.00047634,
            0.0004703,
            0.00046432,
            0.00045827,
            0.00045206,
            0.00044599,
            0.00043982,
            0.00043353,
            0.00042744,
            0.00042124,
            0.00041504,
            0.0004091,
            0.00040252,
            0.00039661,
            0.00039073,
            0.00038472,
            0.00037904,
            0.00037347,
            0.00036807,
            0.00036269,
            0.00035741,
            0.00035255,
            0.00034732,
            0.0003424,
            0.00033748,
            0.00033284,
            0.00032852,
            0.00032395,
            0.00031946,
            0.00031546,
        ],
    )
    value.loc[["female"], ['"20-24"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00178266,
            0.00175479,
            0.00172048,
            0.00168251,
            0.00166764,
            0.00160375,
            0.00154264,
            0.00150403,
            0.00149032,
            0.00141814,
            0.00138226,
            0.00131436,
            0.00127077,
            0.00122189,
            0.00118758,
            0.00116423,
            0.00114039,
            0.00112068,
            0.00110468,
            0.00109664,
            0.00106295,
            0.00117022,
            0.00114165,
            0.00105368,
            0.00103872,
            0.00103793,
            0.00102733,
            0.0010154,
            0.00100411,
            0.00099277,
            0.00098138,
            0.00096953,
            0.00095754,
            0.0009458,
            0.0009345,
            0.00092353,
            0.00091259,
            0.00090272,
            0.00089503,
            0.00088959,
            0.00088631,
            0.00088471,
            0.00088425,
            0.00088221,
            0.00087808,
            0.00087185,
            0.00086312,
            0.00085413,
            0.00084529,
            0.00083642,
            0.00082732,
            0.00081829,
            0.00080872,
            0.00079923,
            0.00078969,
            0.00077978,
            0.00077002,
            0.00075977,
            0.00074963,
            0.00073972,
            0.00072957,
            0.00071976,
            0.00071013,
            0.00070053,
            0.00069139,
            0.00068228,
            0.00067329,
            0.00066494,
            0.00065668,
            0.00064929,
            0.00064175,
            0.00063468,
            0.0006278,
            0.00062095,
            0.00061408,
            0.00060715,
            0.00060046,
            0.00059371,
            0.00058681,
            0.00058006,
            0.00057309,
            0.00056618,
            0.00055957,
            0.00055203,
            0.00054523,
            0.00053838,
            0.00053111,
            0.00052415,
            0.00051726,
            0.00051035,
            0.00050333,
            0.00049636,
            0.00048993,
            0.00048309,
            0.00047665,
            0.00047017,
            0.00046398,
            0.0004581,
            0.00045192,
            0.00044594,
            0.00044064,
        ],
    )
    value.loc[["female"], ['"25-29"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0019325,
            0.00193129,
            0.00191664,
            0.0019047,
            0.0018996,
            0.00183475,
            0.00177092,
            0.00172548,
            0.0017044,
            0.00162815,
            0.00158046,
            0.00150218,
            0.00144605,
            0.00138192,
            0.00133607,
            0.00129677,
            0.00126592,
            0.00124225,
            0.00122656,
            0.00121788,
            0.00120535,
            0.00132264,
            0.00130201,
            0.00120057,
            0.00118541,
            0.00118606,
            0.00117709,
            0.00116891,
            0.0011628,
            0.00115614,
            0.00114897,
            0.00114051,
            0.00113032,
            0.00111905,
            0.00110744,
            0.00109599,
            0.0010846,
            0.00107293,
            0.00106122,
            0.00104987,
            0.00103873,
            0.00102728,
            0.0010171,
            0.00100938,
            0.00100432,
            0.00100152,
            0.00100066,
            0.00100141,
            0.00100043,
            0.00099688,
            0.00099066,
            0.00098218,
            0.00097248,
            0.00096307,
            0.00095378,
            0.00094421,
            0.00093491,
            0.000925,
            0.00091493,
            0.00090501,
            0.00089456,
            0.00088406,
            0.00087346,
            0.00086271,
            0.00085212,
            0.00084132,
            0.0008306,
            0.00082032,
            0.00080981,
            0.0008002,
            0.00079025,
            0.00078065,
            0.0007716,
            0.00076293,
            0.00075448,
            0.00074632,
            0.00073868,
            0.00073103,
            0.00072326,
            0.00071581,
            0.00070815,
            0.00070069,
            0.00069363,
            0.00068549,
            0.00067813,
            0.00067062,
            0.00066266,
            0.00065504,
            0.00064731,
            0.00063951,
            0.00063152,
            0.0006233,
            0.00061557,
            0.00060729,
            0.00059926,
            0.00059101,
            0.00058303,
            0.00057546,
            0.00056755,
            0.00055992,
            0.00055306,
        ],
    )
    value.loc[["female"], ['"30-34"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00211571,
            0.00209941,
            0.00207839,
            0.00206843,
            0.00207028,
            0.00201504,
            0.00195968,
            0.00192874,
            0.00192328,
            0.00184005,
            0.00178997,
            0.00171112,
            0.00164891,
            0.00157965,
            0.00153605,
            0.00150093,
            0.00146803,
            0.00143592,
            0.00140447,
            0.00138033,
            0.00138132,
            0.00151396,
            0.00147317,
            0.00134018,
            0.00132453,
            0.00133122,
            0.00132962,
            0.00132433,
            0.00131952,
            0.00131476,
            0.00130887,
            0.00130174,
            0.00129524,
            0.001289,
            0.00128193,
            0.00127486,
            0.00126712,
            0.00125741,
            0.00124632,
            0.0012347,
            0.00122297,
            0.00121094,
            0.00119872,
            0.00118641,
            0.00117474,
            0.00116312,
            0.00115109,
            0.00114063,
            0.00113292,
            0.00112799,
            0.00112546,
            0.00112576,
            0.00112697,
            0.00112635,
            0.00112291,
            0.00111646,
            0.00110762,
            0.00109738,
            0.00108719,
            0.00107741,
            0.00106722,
            0.00105711,
            0.00104682,
            0.0010361,
            0.00102541,
            0.00101425,
            0.00100266,
            0.00099124,
            0.00097938,
            0.00096809,
            0.00095617,
            0.00094454,
            0.0009333,
            0.00092208,
            0.00091102,
            0.0009001,
            0.00088962,
            0.00087941,
            0.00086943,
            0.00086012,
            0.00085093,
            0.00084229,
            0.00083411,
            0.00082486,
            0.00081658,
            0.00080824,
            0.00079955,
            0.00079134,
            0.00078296,
            0.00077441,
            0.00076557,
            0.00075647,
            0.00074789,
            0.00073849,
            0.00072931,
            0.00071979,
            0.00071031,
            0.00070115,
            0.00069154,
            0.00068207,
            0.00067323,
        ],
    )
    value.loc[["female"], ['"35-39"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00248361,
            0.00243306,
            0.00240317,
            0.00238471,
            0.00238423,
            0.00230757,
            0.00223266,
            0.00217684,
            0.00216821,
            0.0020797,
            0.00204007,
            0.00198278,
            0.00194616,
            0.00190639,
            0.00188273,
            0.00185801,
            0.00182934,
            0.00178972,
            0.00175279,
            0.00172554,
            0.00178641,
            0.00196041,
            0.00188553,
            0.00165865,
            0.00161486,
            0.00159674,
            0.00158005,
            0.00157159,
            0.0015682,
            0.00156696,
            0.00156909,
            0.00156965,
            0.0015655,
            0.00155999,
            0.00155426,
            0.00154768,
            0.00154007,
            0.00153301,
            0.00152597,
            0.001518,
            0.00150993,
            0.00150073,
            0.00148953,
            0.0014767,
            0.00146341,
            0.0014497,
            0.00143569,
            0.00142181,
            0.00140788,
            0.00139438,
            0.00138093,
            0.0013677,
            0.00135515,
            0.00134593,
            0.00134018,
            0.00133734,
            0.00133809,
            0.00134016,
            0.0013399,
            0.00133662,
            0.00132963,
            0.00131945,
            0.0013082,
            0.00129671,
            0.00128552,
            0.00127398,
            0.00126211,
            0.00125038,
            0.00123794,
            0.00122593,
            0.00121301,
            0.00119984,
            0.00118692,
            0.00117371,
            0.00116021,
            0.00114659,
            0.00113337,
            0.00112007,
            0.00110666,
            0.00109397,
            0.00108114,
            0.00106885,
            0.00105735,
            0.00104511,
            0.00103429,
            0.00102379,
            0.00101329,
            0.00100347,
            0.00099356,
            0.0009836,
            0.00097348,
            0.00096318,
            0.00095359,
            0.00094303,
            0.00093263,
            0.00092173,
            0.00091086,
            0.00090026,
            0.00088888,
            0.00087767,
            0.00086703,
        ],
    )
    value.loc[["female"], ['"40-44"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00310974,
            0.00307762,
            0.00304473,
            0.00298707,
            0.0029408,
            0.0028224,
            0.0027185,
            0.00265918,
            0.00266159,
            0.00257659,
            0.00252915,
            0.00246494,
            0.00240775,
            0.00235922,
            0.00233091,
            0.00231207,
            0.00229321,
            0.00227421,
            0.00225614,
            0.00224265,
            0.0023913,
            0.0026478,
            0.00252171,
            0.00218024,
            0.00212602,
            0.00210392,
            0.00207957,
            0.00205465,
            0.00203023,
            0.00200499,
            0.00198037,
            0.00196247,
            0.0019543,
            0.00194995,
            0.00194752,
            0.00194937,
            0.00194948,
            0.00194432,
            0.00193753,
            0.0019305,
            0.00192212,
            0.00191239,
            0.00190392,
            0.00189528,
            0.00188568,
            0.00187572,
            0.00186449,
            0.00185152,
            0.00183686,
            0.00182139,
            0.00180572,
            0.00179089,
            0.00177484,
            0.00175877,
            0.00174343,
            0.00172826,
            0.00171346,
            0.00169929,
            0.00168907,
            0.00168353,
            0.00168141,
            0.00168335,
            0.0016876,
            0.0016886,
            0.00168562,
            0.0016782,
            0.00166651,
            0.00165385,
            0.00164078,
            0.00162843,
            0.00161535,
            0.00160212,
            0.00158935,
            0.00157584,
            0.00156185,
            0.00154758,
            0.00153313,
            0.00151812,
            0.0015027,
            0.00148752,
            0.00147174,
            0.00145646,
            0.0014416,
            0.00142549,
            0.00141086,
            0.00139627,
            0.00138156,
            0.00136807,
            0.00135491,
            0.00134207,
            0.00132964,
            0.00131742,
            0.00130618,
            0.00129397,
            0.0012821,
            0.00126987,
            0.00125781,
            0.00124624,
            0.0012337,
            0.00122115,
            0.00120915,
        ],
    )
    value.loc[["female"], ['"45-49"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00402138,
            0.00394155,
            0.00391087,
            0.00388048,
            0.00388825,
            0.00382597,
            0.00376379,
            0.00371475,
            0.00367677,
            0.00352945,
            0.00341783,
            0.00329582,
            0.00321085,
            0.00315374,
            0.00311402,
            0.00308585,
            0.00304093,
            0.00298505,
            0.00293507,
            0.00290503,
            0.00314866,
            0.00358219,
            0.00339802,
            0.00291719,
            0.00285961,
            0.00283839,
            0.00281497,
            0.00278447,
            0.00275345,
            0.00272594,
            0.00269813,
            0.00266947,
            0.00264121,
            0.00261122,
            0.00257874,
            0.00254812,
            0.00252506,
            0.00251357,
            0.00250666,
            0.00250262,
            0.00250438,
            0.00250397,
            0.00249702,
            0.00248766,
            0.0024781,
            0.00246682,
            0.00245361,
            0.0024422,
            0.0024305,
            0.00241713,
            0.00240392,
            0.00239082,
            0.00237378,
            0.00235468,
            0.00233493,
            0.00231509,
            0.00229621,
            0.0022758,
            0.00225557,
            0.00223679,
            0.00221771,
            0.0021983,
            0.0021809,
            0.00216764,
            0.00215981,
            0.0021564,
            0.0021577,
            0.00216254,
            0.00216364,
            0.00216019,
            0.00215104,
            0.00213652,
            0.00212131,
            0.00210553,
            0.00208964,
            0.0020738,
            0.00205799,
            0.00204151,
            0.00202434,
            0.0020073,
            0.00198925,
            0.00197118,
            0.00195297,
            0.00193295,
            0.00191385,
            0.00189424,
            0.00187421,
            0.00185514,
            0.0018359,
            0.00181692,
            0.00179819,
            0.00177958,
            0.00176259,
            0.00174504,
            0.00172845,
            0.00171219,
            0.00169663,
            0.00168199,
            0.00166651,
            0.00165135,
            0.001637,
        ],
    )
    value.loc[["female"], ['"50-54"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00590311,
            0.00573589,
            0.00563015,
            0.00553877,
            0.00544192,
            0.00530254,
            0.00516513,
            0.00507969,
            0.00506183,
            0.00495984,
            0.00492803,
            0.00488952,
            0.00486328,
            0.00483027,
            0.00479054,
            0.00475283,
            0.00467025,
            0.00458026,
            0.00450002,
            0.00442832,
            0.00483043,
            0.00545125,
            0.00512717,
            0.00432448,
            0.0042202,
            0.00418806,
            0.00417371,
            0.00416025,
            0.00414875,
            0.00413311,
            0.00410618,
            0.00407047,
            0.00402606,
            0.00397981,
            0.00393812,
            0.00389797,
            0.00385595,
            0.00381453,
            0.00377109,
            0.0037244,
            0.00367903,
            0.0036441,
            0.00362634,
            0.00361434,
            0.00360632,
            0.00360642,
            0.00360265,
            0.00359071,
            0.0035757,
            0.0035591,
            0.00354051,
            0.00352174,
            0.00350313,
            0.0034839,
            0.00346305,
            0.00344219,
            0.00342079,
            0.00339351,
            0.00336357,
            0.00333386,
            0.00330389,
            0.00327466,
            0.00324564,
            0.00321611,
            0.00318846,
            0.00316042,
            0.00313202,
            0.00310614,
            0.00308632,
            0.00307444,
            0.00306859,
            0.00306945,
            0.0030769,
            0.00307908,
            0.00307366,
            0.00306156,
            0.00304233,
            0.00301993,
            0.00299732,
            0.00297547,
            0.00295261,
            0.00293029,
            0.00290768,
            0.00288245,
            0.00285844,
            0.00283317,
            0.00280661,
            0.00278067,
            0.00275368,
            0.00272601,
            0.00269819,
            0.00266992,
            0.00264321,
            0.00261504,
            0.00258806,
            0.00256111,
            0.00253502,
            0.00251075,
            0.00248622,
            0.00246285,
            0.00244162,
        ],
    )
    value.loc[["female"], ['"55-59"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00862815,
            0.00841301,
            0.00826486,
            0.00809667,
            0.00796667,
            0.00774148,
            0.00752298,
            0.00737111,
            0.00730464,
            0.0070963,
            0.00700169,
            0.00690361,
            0.0068373,
            0.00680426,
            0.00680377,
            0.00683691,
            0.00684222,
            0.00679355,
            0.00669618,
            0.00655271,
            0.00721278,
            0.00800119,
            0.00743162,
            0.0062172,
            0.00604186,
            0.00595639,
            0.00588695,
            0.00581567,
            0.00575907,
            0.00571967,
            0.00569175,
            0.00567483,
            0.00566057,
            0.00564742,
            0.00562662,
            0.00559232,
            0.00554415,
            0.00548343,
            0.00542132,
            0.00536693,
            0.00531321,
            0.00525713,
            0.00520281,
            0.00514347,
            0.00507972,
            0.0050182,
            0.00497034,
            0.00494794,
            0.00493361,
            0.00492259,
            0.00492271,
            0.00492045,
            0.00490363,
            0.00488269,
            0.00486144,
            0.00483718,
            0.00481224,
            0.00478705,
            0.00476133,
            0.00473398,
            0.00470566,
            0.00467494,
            0.00463924,
            0.00459858,
            0.00455808,
            0.00451773,
            0.00447866,
            0.00443857,
            0.0043984,
            0.00436085,
            0.00432271,
            0.00428341,
            0.00424968,
            0.00422374,
            0.00420709,
            0.00420008,
            0.00420333,
            0.0042126,
            0.00421557,
            0.00420932,
            0.00419187,
            0.00416488,
            0.00413449,
            0.00410151,
            0.00407085,
            0.00403913,
            0.0040061,
            0.00397413,
            0.00394036,
            0.00390571,
            0.00387048,
            0.00383353,
            0.00379764,
            0.00375873,
            0.00372002,
            0.00368041,
            0.00364099,
            0.00360297,
            0.00356368,
            0.00352564,
            0.00348971,
        ],
    )
    value.loc[["female"], ['"60-64"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0135916,
            0.0132216,
            0.0130681,
            0.0128764,
            0.0126797,
            0.0124632,
            0.012212,
            0.0120139,
            0.0118855,
            0.0115975,
            0.0113704,
            0.0111289,
            0.0109096,
            0.0107575,
            0.0105872,
            0.0104844,
            0.0103394,
            0.0102033,
            0.0100941,
            0.0100073,
            0.0112008,
            0.0127817,
            0.0119597,
            0.00987142,
            0.00949824,
            0.00927753,
            0.00908842,
            0.00893903,
            0.00883988,
            0.00874791,
            0.00864686,
            0.00854348,
            0.00843981,
            0.00835617,
            0.00829324,
            0.00825043,
            0.00822039,
            0.00819386,
            0.0081708,
            0.00814041,
            0.00808961,
            0.00802041,
            0.00793671,
            0.00784887,
            0.0077716,
            0.00769628,
            0.00761602,
            0.00754067,
            0.00745869,
            0.00736728,
            0.00727903,
            0.00721256,
            0.00717589,
            0.00715015,
            0.00713191,
            0.00713012,
            0.00712596,
            0.00710111,
            0.00707172,
            0.00704358,
            0.00700983,
            0.00697262,
            0.0069399,
            0.00690473,
            0.00686756,
            0.00682994,
            0.00679017,
            0.00674127,
            0.00668588,
            0.00663049,
            0.00657506,
            0.00652007,
            0.0064677,
            0.00641448,
            0.006363,
            0.00631239,
            0.00626095,
            0.0062121,
            0.00617583,
            0.0061545,
            0.0061449,
            0.00615167,
            0.00616953,
            0.00617534,
            0.00616908,
            0.00614637,
            0.00610609,
            0.00606296,
            0.00601833,
            0.00597393,
            0.00592953,
            0.0058836,
            0.00583922,
            0.00579026,
            0.00574135,
            0.00569078,
            0.00563866,
            0.00558705,
            0.00553186,
            0.00547625,
            0.00542203,
        ],
    )
    value.loc[["female"], ['"65-69"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0213525,
            0.0207597,
            0.0205153,
            0.0202222,
            0.0198973,
            0.0195595,
            0.0191118,
            0.0188439,
            0.0186628,
            0.018291,
            0.0181032,
            0.0178398,
            0.0175358,
            0.017221,
            0.016933,
            0.0166546,
            0.0163164,
            0.0160541,
            0.0158802,
            0.0156607,
            0.0172219,
            0.0191657,
            0.0180036,
            0.0152112,
            0.0148092,
            0.014676,
            0.0145972,
            0.0144812,
            0.0142843,
            0.014027,
            0.0137446,
            0.0134591,
            0.0132407,
            0.0131031,
            0.0129734,
            0.0128362,
            0.0126898,
            0.012543,
            0.0124297,
            0.0123509,
            0.0122973,
            0.0122637,
            0.0122373,
            0.0122112,
            0.0121739,
            0.0121085,
            0.0120118,
            0.0118965,
            0.0117757,
            0.0116666,
            0.0115612,
            0.0114543,
            0.0113468,
            0.0112277,
            0.0110965,
            0.0109697,
            0.0108759,
            0.0108246,
            0.0107915,
            0.0107737,
            0.0107793,
            0.0107769,
            0.0107498,
            0.010712,
            0.0106754,
            0.0106307,
            0.0105828,
            0.0105382,
            0.0104916,
            0.0104418,
            0.0103909,
            0.0103323,
            0.0102658,
            0.0101881,
            0.0101075,
            0.0100304,
            0.00995773,
            0.0098809,
            0.00980642,
            0.00973695,
            0.00966427,
            0.00959121,
            0.00952415,
            0.00947164,
            0.00944444,
            0.00943702,
            0.00945111,
            0.00948579,
            0.00950472,
            0.00950041,
            0.00947197,
            0.00941706,
            0.00935728,
            0.00929279,
            0.00923029,
            0.00916705,
            0.00910234,
            0.00903869,
            0.00896896,
            0.00889851,
            0.00882932,
        ],
    )
    value.loc[["female"], ['"70-74"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0337264,
            0.0329117,
            0.0327074,
            0.0324204,
            0.0318458,
            0.0314828,
            0.0308733,
            0.0304567,
            0.0302183,
            0.0296485,
            0.0292603,
            0.0286508,
            0.0281033,
            0.0275549,
            0.0270244,
            0.0267435,
            0.0263022,
            0.0259289,
            0.0255829,
            0.0253342,
            0.0273293,
            0.0299571,
            0.0283087,
            0.0242155,
            0.0235509,
            0.0232637,
            0.0230456,
            0.0228303,
            0.0226098,
            0.0224253,
            0.0222724,
            0.0221317,
            0.0219459,
            0.0216664,
            0.0213164,
            0.0209537,
            0.0205856,
            0.0202957,
            0.0201004,
            0.0199201,
            0.0197247,
            0.0195156,
            0.0193117,
            0.0191467,
            0.0190247,
            0.0189427,
            0.0188828,
            0.0188406,
            0.0187988,
            0.0187366,
            0.0186367,
            0.0185012,
            0.0183313,
            0.0181566,
            0.0180031,
            0.0178552,
            0.0177072,
            0.0175539,
            0.0173856,
            0.0172051,
            0.0170254,
            0.0168874,
            0.0168201,
            0.0167742,
            0.0167517,
            0.0167632,
            0.0167667,
            0.0167289,
            0.0166771,
            0.0166267,
            0.0165635,
            0.0164887,
            0.0164314,
            0.0163687,
            0.0162947,
            0.0162242,
            0.0161485,
            0.0160448,
            0.0159295,
            0.0158144,
            0.0156993,
            0.0155937,
            0.0154858,
            0.0153755,
            0.0152757,
            0.0151722,
            0.0150615,
            0.0149645,
            0.014894,
            0.0148586,
            0.0148556,
            0.0148884,
            0.0149513,
            0.0149859,
            0.0149857,
            0.014948,
            0.0148704,
            0.0147834,
            0.0146905,
            0.0145992,
            0.0145124,
        ],
    )
    value.loc[["female"], ['"75-79"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0531692,
            0.0518542,
            0.051602,
            0.0514004,
            0.0503163,
            0.049955,
            0.0489988,
            0.0483945,
            0.0480023,
            0.0470824,
            0.0466431,
            0.0458584,
            0.0452274,
            0.0445381,
            0.0438332,
            0.04338,
            0.0425058,
            0.0419125,
            0.041366,
            0.0407677,
            0.0432429,
            0.0471731,
            0.0447065,
            0.0390675,
            0.0379733,
            0.0373774,
            0.0368848,
            0.0365218,
            0.0362472,
            0.0359794,
            0.0356562,
            0.0353541,
            0.0350602,
            0.0347584,
            0.034496,
            0.0342901,
            0.0340853,
            0.033804,
            0.0333912,
            0.032901,
            0.0324058,
            0.0319285,
            0.0315579,
            0.0312772,
            0.0310084,
            0.0307318,
            0.0304256,
            0.0301473,
            0.0299227,
            0.0297445,
            0.0296214,
            0.0295417,
            0.0294712,
            0.0293998,
            0.0293027,
            0.0291521,
            0.0289573,
            0.0287117,
            0.0284636,
            0.0282563,
            0.0280479,
            0.0278296,
            0.0276134,
            0.0273661,
            0.027106,
            0.0268469,
            0.0266521,
            0.0265484,
            0.0264821,
            0.026448,
            0.0264559,
            0.0264392,
            0.0263873,
            0.0263114,
            0.0262251,
            0.0261289,
            0.0260298,
            0.0259318,
            0.025835,
            0.0257305,
            0.0256202,
            0.0255022,
            0.0253474,
            0.025166,
            0.0249901,
            0.0248176,
            0.0246524,
            0.0244909,
            0.0243312,
            0.0241824,
            0.0240278,
            0.0238667,
            0.0237242,
            0.0236165,
            0.0235649,
            0.0235675,
            0.0236253,
            0.0237232,
            0.0237793,
            0.0237783,
            0.0237291,
        ],
    )
    value.loc[["female"], ['"80-84"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0886488,
            0.0858971,
            0.0851449,
            0.0844775,
            0.0821873,
            0.0816822,
            0.0801502,
            0.0793998,
            0.0790701,
            0.0777419,
            0.07705,
            0.0757275,
            0.0748011,
            0.0734854,
            0.0719935,
            0.0715517,
            0.0699058,
            0.0692725,
            0.0685596,
            0.0679249,
            0.0719097,
            0.0778332,
            0.0745211,
            0.0656496,
            0.0640308,
            0.0633371,
            0.0627383,
            0.0620053,
            0.0612416,
            0.0605378,
            0.0598035,
            0.0591452,
            0.0586948,
            0.0583864,
            0.0580534,
            0.0576427,
            0.0572179,
            0.0567865,
            0.0563396,
            0.0559275,
            0.055549,
            0.05516,
            0.0546848,
            0.0540688,
            0.0534152,
            0.0528054,
            0.0522232,
            0.0517492,
            0.0513137,
            0.0508731,
            0.0504358,
            0.0499764,
            0.049542,
            0.0491783,
            0.0488686,
            0.0486293,
            0.0484615,
            0.0482964,
            0.0481248,
            0.0479386,
            0.0476768,
            0.0473566,
            0.0470007,
            0.0466332,
            0.0463288,
            0.0460195,
            0.0457007,
            0.0453555,
            0.0449851,
            0.0445974,
            0.0441997,
            0.0438647,
            0.0436876,
            0.0435452,
            0.043422,
            0.0433659,
            0.043302,
            0.0431551,
            0.0429954,
            0.0428432,
            0.0426617,
            0.0424836,
            0.04232,
            0.0421465,
            0.0419686,
            0.0417791,
            0.0415652,
            0.0413061,
            0.0410159,
            0.0407294,
            0.04045,
            0.040189,
            0.0399389,
            0.0396832,
            0.039441,
            0.0392001,
            0.0389512,
            0.0387151,
            0.0385411,
            0.0384421,
            0.0384409,
        ],
    )
    value.loc[["female"], ['"85-89"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.141143,
            0.137782,
            0.137466,
            0.137951,
            0.133864,
            0.133605,
            0.130252,
            0.128898,
            0.127931,
            0.125527,
            0.12425,
            0.12239,
            0.12136,
            0.119491,
            0.116661,
            0.116755,
            0.113906,
            0.113337,
            0.11172,
            0.110116,
            0.117153,
            0.123708,
            0.119425,
            0.108227,
            0.106319,
            0.105471,
            0.104595,
            0.103611,
            0.102473,
            0.101371,
            0.100468,
            0.099644,
            0.0986394,
            0.0975987,
            0.0966565,
            0.0958072,
            0.0950121,
            0.0944507,
            0.0940839,
            0.0936494,
            0.0930727,
            0.0924453,
            0.0918142,
            0.0911254,
            0.0904412,
            0.089788,
            0.0891144,
            0.0884062,
            0.0875768,
            0.0866927,
            0.0858541,
            0.0850959,
            0.0844088,
            0.0837205,
            0.0830367,
            0.0823508,
            0.0816587,
            0.0809812,
            0.0803838,
            0.0798709,
            0.0794373,
            0.0790828,
            0.0787733,
            0.078419,
            0.0780663,
            0.0776168,
            0.0771128,
            0.0765205,
            0.075957,
            0.0754566,
            0.0749399,
            0.0743793,
            0.0738503,
            0.0732573,
            0.0726097,
            0.0719698,
            0.0714374,
            0.0710191,
            0.0706779,
            0.0703967,
            0.0701619,
            0.0699215,
            0.0695948,
            0.0692418,
            0.0689114,
            0.0685349,
            0.0681568,
            0.0678102,
            0.0674583,
            0.0670902,
            0.0667138,
            0.066299,
            0.0658395,
            0.0653247,
            0.0648116,
            0.0643293,
            0.0638824,
            0.0634249,
            0.0629821,
            0.0625316,
            0.0621108,
        ],
    )
    value.loc[["female"], ['"90-94"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.219439,
            0.214938,
            0.215288,
            0.216567,
            0.208227,
            0.209948,
            0.205012,
            0.203833,
            0.204173,
            0.199832,
            0.199362,
            0.196387,
            0.19526,
            0.191703,
            0.187208,
            0.18863,
            0.183233,
            0.1833,
            0.180137,
            0.176792,
            0.184241,
            0.188235,
            0.185106,
            0.174994,
            0.172596,
            0.171443,
            0.170417,
            0.169528,
            0.168655,
            0.167754,
            0.166625,
            0.16539,
            0.164032,
            0.162542,
            0.161169,
            0.160175,
            0.159227,
            0.158005,
            0.156753,
            0.155616,
            0.154628,
            0.153654,
            0.152959,
            0.152499,
            0.151961,
            0.151216,
            0.150334,
            0.149441,
            0.148426,
            0.147309,
            0.1462,
            0.1451,
            0.143923,
            0.142679,
            0.141564,
            0.140619,
            0.13992,
            0.139114,
            0.138062,
            0.137005,
            0.135971,
            0.134916,
            0.133997,
            0.13306,
            0.132219,
            0.131424,
            0.130762,
            0.130029,
            0.129345,
            0.128602,
            0.127766,
            0.126863,
            0.126006,
            0.125148,
            0.124341,
            0.12353,
            0.122705,
            0.121756,
            0.120821,
            0.119898,
            0.118924,
            0.118075,
            0.117362,
            0.116692,
            0.116083,
            0.115445,
            0.114782,
            0.114057,
            0.113331,
            0.112624,
            0.111908,
            0.111178,
            0.110549,
            0.109885,
            0.109187,
            0.108493,
            0.107774,
            0.106942,
            0.1061,
            0.105197,
            0.104376,
        ],
    )
    value.loc[["female"], ['"95-99"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.323704,
            0.32017,
            0.322186,
            0.325077,
            0.312193,
            0.31552,
            0.308237,
            0.306784,
            0.309077,
            0.302824,
            0.303204,
            0.300484,
            0.300763,
            0.295786,
            0.290514,
            0.292483,
            0.284719,
            0.286322,
            0.281775,
            0.276346,
            0.282948,
            0.285408,
            0.284894,
            0.277311,
            0.274796,
            0.273336,
            0.271886,
            0.270486,
            0.269123,
            0.267862,
            0.266588,
            0.265423,
            0.264322,
            0.263261,
            0.262169,
            0.260938,
            0.259518,
            0.257925,
            0.256388,
            0.255075,
            0.254214,
            0.25335,
            0.252019,
            0.25051,
            0.249244,
            0.248337,
            0.24755,
            0.24696,
            0.246447,
            0.245657,
            0.244648,
            0.243505,
            0.242277,
            0.240895,
            0.239263,
            0.237504,
            0.235921,
            0.234561,
            0.233514,
            0.232643,
            0.231821,
            0.231118,
            0.230271,
            0.228864,
            0.227581,
            0.226237,
            0.224952,
            0.223499,
            0.22226,
            0.220896,
            0.219608,
            0.218434,
            0.217365,
            0.216202,
            0.215024,
            0.213805,
            0.212651,
            0.21134,
            0.210146,
            0.20902,
            0.207866,
            0.206724,
            0.205467,
            0.204178,
            0.202951,
            0.201559,
            0.20021,
            0.19895,
            0.19771,
            0.196448,
            0.195243,
            0.19391,
            0.192672,
            0.191428,
            0.190215,
            0.189046,
            0.187962,
            0.186854,
            0.185847,
            0.184642,
            0.183507,
        ],
    )
    value.loc[["female"], ['"100+"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.449697,
            0.448317,
            0.452032,
            0.45837,
            0.445803,
            0.454219,
            0.446765,
            0.446031,
            0.450596,
            0.442998,
            0.444919,
            0.442558,
            0.443774,
            0.437985,
            0.432188,
            0.435442,
            0.425847,
            0.426326,
            0.420047,
            0.413198,
            0.41588,
            0.421256,
            0.408708,
            0.409876,
            0.407201,
            0.405389,
            0.403181,
            0.400885,
            0.398756,
            0.39679,
            0.394882,
            0.393132,
            0.391403,
            0.389858,
            0.388488,
            0.387221,
            0.385938,
            0.384593,
            0.383415,
            0.382141,
            0.380868,
            0.379608,
            0.37839,
            0.377508,
            0.376969,
            0.376407,
            0.37582,
            0.374851,
            0.373623,
            0.372477,
            0.371626,
            0.370924,
            0.370113,
            0.369192,
            0.368048,
            0.366677,
            0.365265,
            0.363837,
            0.362249,
            0.360349,
            0.358372,
            0.35654,
            0.355572,
            0.355105,
            0.354775,
            0.354095,
            0.353489,
            0.352366,
            0.351292,
            0.350075,
            0.348805,
            0.347583,
            0.346425,
            0.345098,
            0.343769,
            0.342496,
            0.341427,
            0.34009,
            0.338836,
            0.337542,
            0.336197,
            0.334957,
            0.333587,
            0.332227,
            0.331044,
            0.329757,
            0.328467,
            0.3271,
            0.32569,
            0.324251,
            0.322916,
            0.321363,
            0.320052,
            0.318668,
            0.317174,
            0.315703,
            0.314289,
            0.312734,
            0.311498,
            0.310089,
            0.308861,
        ],
    )
    value.loc[["male"], ['"0-4"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00608887,
            0.00582923,
            0.00556875,
            0.00529607,
            0.00512172,
            0.00484897,
            0.00458913,
            0.00436059,
            0.00419385,
            0.00393341,
            0.00376764,
            0.00356983,
            0.00342138,
            0.00328556,
            0.00314956,
            0.0030224,
            0.00289444,
            0.00277891,
            0.00268298,
            0.00260808,
            0.00253742,
            0.00249541,
            0.00254469,
            0.0025845,
            0.00259994,
            0.00264051,
            0.00262019,
            0.00259784,
            0.00257692,
            0.00255454,
            0.00253212,
            0.00251006,
            0.00248769,
            0.00246406,
            0.00243973,
            0.00241483,
            0.0023893,
            0.00236293,
            0.00233521,
            0.00230797,
            0.00227976,
            0.002252,
            0.00222505,
            0.00219801,
            0.00217208,
            0.00214635,
            0.00212177,
            0.00209867,
            0.00207551,
            0.00205479,
            0.00203441,
            0.00201643,
            0.00199771,
            0.00197806,
            0.00195929,
            0.00193958,
            0.00192046,
            0.00189974,
            0.00187989,
            0.00185994,
            0.00183782,
            0.00181589,
            0.00179363,
            0.00177135,
            0.00174873,
            0.00172409,
            0.0017009,
            0.00167715,
            0.00165456,
            0.00163118,
            0.0016082,
            0.00158423,
            0.00156148,
            0.00153763,
            0.0015159,
            0.001494,
            0.00147257,
            0.00145172,
            0.00142968,
            0.00140886,
            0.00138906,
            0.00136942,
            0.00134932,
            0.00133119,
            0.00131136,
            0.00129268,
            0.00127417,
            0.00125659,
            0.00123779,
            0.00121955,
            0.00120106,
            0.0011823,
            0.00116507,
            0.00114698,
            0.00112797,
            0.00111008,
            0.00109249,
            0.00107459,
            0.0010568,
            0.0010391,
            0.00102133,
        ],
    )
    value.loc[["male"], ['"5-9"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00185002,
            0.00181814,
            0.00178501,
            0.00175103,
            0.0017501,
            0.00169144,
            0.00162855,
            0.00158925,
            0.00158359,
            0.00148427,
            0.00144608,
            0.00137297,
            0.0013294,
            0.00128401,
            0.00124026,
            0.00120654,
            0.0011644,
            0.00112901,
            0.00110348,
            0.00108197,
            0.00106181,
            0.00104432,
            0.00104163,
            0.00103597,
            0.00103938,
            0.00106008,
            0.00106557,
            0.00107027,
            0.00107196,
            0.0010697,
            0.00106459,
            0.0010574,
            0.0010499,
            0.00104194,
            0.00103418,
            0.00102628,
            0.001018,
            0.00100946,
            0.00100014,
            0.00099083,
            0.00098083,
            0.00097038,
            0.00095984,
            0.00094914,
            0.00093869,
            0.00092791,
            0.0009176,
            0.00090749,
            0.00089712,
            0.00088759,
            0.00087799,
            0.0008691,
            0.00086027,
            0.0008518,
            0.00084404,
            0.00083637,
            0.00082919,
            0.00082124,
            0.00081362,
            0.00080629,
            0.00079832,
            0.00079062,
            0.00078285,
            0.00077482,
            0.00076655,
            0.00075755,
            0.00074909,
            0.00074071,
            0.00073232,
            0.00072353,
            0.00071487,
            0.00070565,
            0.00069697,
            0.00068755,
            0.00067848,
            0.00066916,
            0.00065991,
            0.00065127,
            0.00064238,
            0.00063385,
            0.00062555,
            0.00061706,
            0.00060838,
            0.00060056,
            0.00059232,
            0.00058455,
            0.00057712,
            0.00057009,
            0.00056267,
            0.0005553,
            0.00054814,
            0.00054088,
            0.00053406,
            0.00052691,
            0.00051928,
            0.00051201,
            0.00050504,
            0.00049807,
            0.00049104,
            0.00048418,
            0.00047704,
        ],
    )
    value.loc[["male"], ['"10-14"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.001155,
            0.00114165,
            0.00112493,
            0.001103,
            0.00110198,
            0.00106781,
            0.00102877,
            0.00100834,
            0.00100983,
            0.00096584,
            0.00095195,
            0.00091483,
            0.00089661,
            0.00087539,
            0.0008514,
            0.00083265,
            0.00080843,
            0.00078898,
            0.0007694,
            0.00075311,
            0.00073478,
            0.00073408,
            0.00073093,
            0.00071123,
            0.00070361,
            0.00070522,
            0.00069792,
            0.00069161,
            0.00068771,
            0.00068532,
            0.0006845,
            0.00068493,
            0.00068605,
            0.00068577,
            0.00068406,
            0.00068073,
            0.00067571,
            0.00067023,
            0.00066459,
            0.00065911,
            0.00065341,
            0.00064756,
            0.0006416,
            0.00063544,
            0.00062926,
            0.00062273,
            0.00061618,
            0.00060962,
            0.00060282,
            0.00059627,
            0.0005896,
            0.00058325,
            0.00057672,
            0.00057023,
            0.00056411,
            0.00055796,
            0.0005521,
            0.00054609,
            0.00054062,
            0.00053557,
            0.00053045,
            0.00052565,
            0.00052088,
            0.00051607,
            0.00051131,
            0.0005062,
            0.00050139,
            0.00049668,
            0.00049199,
            0.00048705,
            0.00048218,
            0.00047705,
            0.00047212,
            0.00046662,
            0.00046135,
            0.00045595,
            0.00045036,
            0.00044499,
            0.00043939,
            0.00043389,
            0.00042839,
            0.00042276,
            0.00041711,
            0.00041192,
            0.0004065,
            0.00040137,
            0.00039642,
            0.00039158,
            0.00038666,
            0.00038183,
            0.00037718,
            0.00037268,
            0.00036844,
            0.00036403,
            0.00035942,
            0.00035506,
            0.00035078,
            0.00034648,
            0.0003422,
            0.00033796,
            0.00033359,
        ],
    )
    value.loc[["male"], ['"15-19"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00167822,
            0.00165338,
            0.00162293,
            0.00159445,
            0.00157964,
            0.00153703,
            0.00149602,
            0.00147529,
            0.00146958,
            0.00142233,
            0.00140711,
            0.00137169,
            0.00135297,
            0.00133013,
            0.00130629,
            0.00128977,
            0.00127281,
            0.0012583,
            0.00123479,
            0.00121205,
            0.00118465,
            0.00127905,
            0.00124225,
            0.00116182,
            0.00114442,
            0.00114213,
            0.00112899,
            0.00111604,
            0.00110473,
            0.00109399,
            0.00108346,
            0.00107275,
            0.00106348,
            0.00105644,
            0.00105209,
            0.00105003,
            0.00105075,
            0.00105374,
            0.00105523,
            0.00105419,
            0.00105007,
            0.00104269,
            0.00103442,
            0.00102623,
            0.00101823,
            0.00100999,
            0.00100186,
            0.00099372,
            0.00098501,
            0.00097646,
            0.00096759,
            0.00095864,
            0.00094925,
            0.00093979,
            0.00093042,
            0.00092087,
            0.0009117,
            0.00090208,
            0.00089296,
            0.00088446,
            0.00087584,
            0.00086766,
            0.00085981,
            0.00085229,
            0.00084522,
            0.00083817,
            0.00083171,
            0.00082562,
            0.00081974,
            0.00081372,
            0.00080788,
            0.0008018,
            0.000796,
            0.0007895,
            0.00078318,
            0.0007767,
            0.00076978,
            0.000763,
            0.00075582,
            0.00074879,
            0.0007416,
            0.00073394,
            0.00072621,
            0.00071896,
            0.00071123,
            0.00070372,
            0.00069639,
            0.00068916,
            0.00068195,
            0.00067481,
            0.00066794,
            0.00066129,
            0.00065469,
            0.00064792,
            0.00064109,
            0.00063464,
            0.00062855,
            0.00062256,
            0.00061653,
            0.00061065,
            0.00060465,
        ],
    )
    value.loc[["male"], ['"20-24"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00240988,
            0.00237891,
            0.00233462,
            0.00229796,
            0.00227749,
            0.00221973,
            0.0021657,
            0.00212893,
            0.00209505,
            0.00201967,
            0.00197554,
            0.00192049,
            0.00189545,
            0.00186447,
            0.00183113,
            0.00181156,
            0.00180141,
            0.00178752,
            0.00176085,
            0.00173778,
            0.00170201,
            0.00184066,
            0.00180748,
            0.00168687,
            0.00166865,
            0.00167152,
            0.00165985,
            0.00164595,
            0.00163182,
            0.00161664,
            0.00160122,
            0.00158569,
            0.0015699,
            0.00155427,
            0.00154042,
            0.00152713,
            0.00151404,
            0.0015024,
            0.00149425,
            0.00149008,
            0.00148954,
            0.00149261,
            0.00149788,
            0.00150051,
            0.00149916,
            0.00149345,
            0.00148423,
            0.0014741,
            0.00146353,
            0.00145353,
            0.00144333,
            0.00143301,
            0.001422,
            0.00141057,
            0.00139905,
            0.00138698,
            0.00137484,
            0.00136162,
            0.00134866,
            0.00133607,
            0.00132301,
            0.00131036,
            0.00129771,
            0.00128518,
            0.00127322,
            0.00126104,
            0.00124958,
            0.00123898,
            0.00122911,
            0.00121947,
            0.00121067,
            0.00120205,
            0.00119401,
            0.00118523,
            0.00117687,
            0.00116846,
            0.0011596,
            0.00115115,
            0.00114209,
            0.00113309,
            0.00112373,
            0.00111358,
            0.0011032,
            0.0010932,
            0.00108248,
            0.00107193,
            0.00106135,
            0.00105079,
            0.00104024,
            0.00102938,
            0.00101857,
            0.00100789,
            0.00099736,
            0.00098668,
            0.00097588,
            0.00096556,
            0.00095562,
            0.00094558,
            0.00093557,
            0.00092607,
            0.00091655,
        ],
    )
    value.loc[["male"], ['"25-29"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00263938,
            0.00263238,
            0.00261495,
            0.00260023,
            0.00258895,
            0.00253275,
            0.00247356,
            0.00242487,
            0.0023808,
            0.00230175,
            0.00224467,
            0.00216937,
            0.00212407,
            0.00206529,
            0.00200199,
            0.00195936,
            0.00193508,
            0.00192267,
            0.00190015,
            0.00188297,
            0.00185194,
            0.00203488,
            0.00199876,
            0.00184895,
            0.00182415,
            0.00182331,
            0.00181071,
            0.00179982,
            0.00179144,
            0.00178188,
            0.00177185,
            0.00176064,
            0.00174681,
            0.00173071,
            0.00171455,
            0.00169822,
            0.00168229,
            0.00166592,
            0.00164964,
            0.00163452,
            0.00162024,
            0.0016059,
            0.00159296,
            0.00158415,
            0.00157948,
            0.00157795,
            0.00158061,
            0.00158547,
            0.00158704,
            0.00158501,
            0.00157908,
            0.00156941,
            0.00155819,
            0.00154706,
            0.00153621,
            0.00152511,
            0.00151403,
            0.00150185,
            0.00148968,
            0.00147757,
            0.00146478,
            0.00145186,
            0.00143844,
            0.00142471,
            0.00141101,
            0.00139672,
            0.00138294,
            0.0013696,
            0.00135666,
            0.0013439,
            0.00133178,
            0.0013197,
            0.00130855,
            0.00129721,
            0.00128678,
            0.00127692,
            0.00126701,
            0.0012578,
            0.00124825,
            0.00123905,
            0.00122965,
            0.00121965,
            0.00120967,
            0.00119997,
            0.00118944,
            0.00117891,
            0.00116832,
            0.00115759,
            0.00114656,
            0.00113516,
            0.00112378,
            0.00111218,
            0.00110062,
            0.00108884,
            0.00107655,
            0.00106437,
            0.00105255,
            0.00104071,
            0.00102891,
            0.00101757,
            0.00100619,
        ],
    )
    value.loc[["male"], ['"30-34"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00299435,
            0.0029776,
            0.00294579,
            0.00293223,
            0.00292094,
            0.0028824,
            0.00284058,
            0.00281558,
            0.00279135,
            0.00271413,
            0.00264945,
            0.00256447,
            0.00249514,
            0.00242434,
            0.00235669,
            0.00230252,
            0.00226724,
            0.00223584,
            0.00219015,
            0.0021544,
            0.00215515,
            0.00236226,
            0.00230222,
            0.00208595,
            0.00205798,
            0.00206175,
            0.00205556,
            0.00204385,
            0.00203328,
            0.00202285,
            0.00201138,
            0.0019995,
            0.00198891,
            0.00197832,
            0.00196761,
            0.00195665,
            0.00194472,
            0.00192979,
            0.00191255,
            0.00189436,
            0.00187614,
            0.00185806,
            0.00183982,
            0.00182213,
            0.0018055,
            0.00178897,
            0.00177312,
            0.00175882,
            0.00174825,
            0.00174264,
            0.00174123,
            0.00174411,
            0.00174936,
            0.00175182,
            0.00174984,
            0.00174336,
            0.00173264,
            0.00171982,
            0.00170743,
            0.00169543,
            0.00168313,
            0.00167091,
            0.00165803,
            0.00164462,
            0.00163105,
            0.00161651,
            0.00160191,
            0.00158737,
            0.00157274,
            0.00155772,
            0.00154305,
            0.00152807,
            0.00151361,
            0.00149866,
            0.00148462,
            0.00147094,
            0.00145711,
            0.00144439,
            0.00143195,
            0.0014204,
            0.00140917,
            0.00139781,
            0.00138683,
            0.00137633,
            0.00136533,
            0.00135448,
            0.00134381,
            0.00133319,
            0.00132229,
            0.0013107,
            0.00129906,
            0.00128706,
            0.00127478,
            0.00126201,
            0.00124872,
            0.00123538,
            0.00122215,
            0.00120878,
            0.00119537,
            0.00118201,
            0.00116836,
        ],
    )
    value.loc[["male"], ['"35-39"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00370469,
            0.00364792,
            0.00359213,
            0.00355911,
            0.00352577,
            0.00344979,
            0.00337075,
            0.00331597,
            0.0032896,
            0.00322309,
            0.00317054,
            0.00311091,
            0.00306683,
            0.00300952,
            0.00294272,
            0.00288597,
            0.00284051,
            0.00279472,
            0.00274397,
            0.00270761,
            0.00280329,
            0.00309652,
            0.00298169,
            0.00260601,
            0.00253869,
            0.00250651,
            0.00247781,
            0.00246047,
            0.00244989,
            0.00244161,
            0.00243795,
            0.00243212,
            0.0024195,
            0.00240537,
            0.00239258,
            0.00237834,
            0.0023639,
            0.00235127,
            0.00233864,
            0.00232491,
            0.0023113,
            0.00229589,
            0.00227728,
            0.0022569,
            0.0022354,
            0.00221287,
            0.00219186,
            0.00217061,
            0.00214909,
            0.00212922,
            0.00211072,
            0.0020924,
            0.00207486,
            0.00206232,
            0.00205523,
            0.00205278,
            0.00205567,
            0.00206137,
            0.00206402,
            0.00206137,
            0.00205341,
            0.0020405,
            0.00202539,
            0.00201029,
            0.00199554,
            0.00198002,
            0.00196461,
            0.00194927,
            0.00193355,
            0.00191724,
            0.00190108,
            0.00188382,
            0.00186668,
            0.00184853,
            0.00183073,
            0.00181291,
            0.00179456,
            0.00177683,
            0.00175919,
            0.00174243,
            0.00172564,
            0.00170874,
            0.00169272,
            0.0016777,
            0.00166283,
            0.0016487,
            0.00163535,
            0.00162239,
            0.00160952,
            0.0015961,
            0.00158298,
            0.00156972,
            0.00155628,
            0.00154236,
            0.00152764,
            0.00151263,
            0.00149765,
            0.00148222,
            0.0014664,
            0.00145053,
            0.00143437,
        ],
    )
    value.loc[["male"], ['"40-44"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00498638,
            0.00496023,
            0.00490603,
            0.00481766,
            0.00469669,
            0.00455968,
            0.00440434,
            0.00432488,
            0.00429759,
            0.00422973,
            0.00416396,
            0.00407618,
            0.00399724,
            0.00391159,
            0.00382117,
            0.00375687,
            0.00371637,
            0.00369378,
            0.00365957,
            0.00363798,
            0.00386235,
            0.00426509,
            0.00408426,
            0.00353009,
            0.00344881,
            0.00341005,
            0.0033711,
            0.00333182,
            0.00329139,
            0.00324701,
            0.00320274,
            0.00316714,
            0.0031439,
            0.00312495,
            0.00311024,
            0.00310161,
            0.00309116,
            0.00307355,
            0.00305436,
            0.00303588,
            0.00301644,
            0.00299629,
            0.00297867,
            0.00296226,
            0.00294429,
            0.00292508,
            0.00290555,
            0.00288232,
            0.00285617,
            0.00282959,
            0.00280368,
            0.00277888,
            0.00275315,
            0.00272777,
            0.00270378,
            0.00268089,
            0.00265814,
            0.00263612,
            0.00262026,
            0.00261098,
            0.00260754,
            0.00261098,
            0.00261787,
            0.00262065,
            0.00261701,
            0.00260608,
            0.00258899,
            0.00257033,
            0.0025518,
            0.00253317,
            0.0025152,
            0.00249612,
            0.00247712,
            0.00245676,
            0.00243671,
            0.0024163,
            0.00239454,
            0.00237281,
            0.00235076,
            0.00232876,
            0.00230612,
            0.00228297,
            0.00226016,
            0.00223794,
            0.00221587,
            0.0021943,
            0.0021736,
            0.00215382,
            0.00213494,
            0.00211585,
            0.00209804,
            0.00208074,
            0.00206348,
            0.00204621,
            0.00202844,
            0.00201055,
            0.00199304,
            0.0019753,
            0.00195702,
            0.0019383,
            0.00191907,
        ],
    )
    value.loc[["male"], ['"45-49"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00681003,
            0.00674224,
            0.0066908,
            0.00666691,
            0.00661794,
            0.00657844,
            0.00647882,
            0.00639631,
            0.0063034,
            0.00609398,
            0.00590594,
            0.00569038,
            0.00554522,
            0.00544546,
            0.00532726,
            0.00523707,
            0.00515101,
            0.00508346,
            0.00497846,
            0.00492337,
            0.00529709,
            0.00593859,
            0.0056897,
            0.0049154,
            0.00481946,
            0.00477598,
            0.00473267,
            0.00468012,
            0.0046288,
            0.00458189,
            0.00453361,
            0.00448433,
            0.00443446,
            0.00437897,
            0.00432019,
            0.00426162,
            0.00421365,
            0.00418196,
            0.00415575,
            0.00413435,
            0.00412203,
            0.00410654,
            0.00408205,
            0.0040571,
            0.00403215,
            0.00400401,
            0.00397703,
            0.00395309,
            0.00392912,
            0.00390415,
            0.00388056,
            0.00385542,
            0.00382505,
            0.00379198,
            0.00375799,
            0.0037244,
            0.0036922,
            0.00365866,
            0.00362592,
            0.00359477,
            0.00356497,
            0.0035358,
            0.00350733,
            0.00348632,
            0.00347379,
            0.00346769,
            0.00347028,
            0.0034792,
            0.00348306,
            0.00347791,
            0.00346519,
            0.00344269,
            0.00341797,
            0.00339247,
            0.00336823,
            0.00334402,
            0.00331855,
            0.00329289,
            0.00326693,
            0.00324069,
            0.00321333,
            0.00318466,
            0.00315558,
            0.00312624,
            0.00309605,
            0.00306569,
            0.0030357,
            0.00300582,
            0.00297688,
            0.00294728,
            0.00291903,
            0.00289149,
            0.00286435,
            0.00283831,
            0.00281251,
            0.00278757,
            0.0027639,
            0.00274062,
            0.00271722,
            0.00269373,
            0.00267009,
        ],
    )
    value.loc[["male"], ['"50-54"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.00984622,
            0.00981437,
            0.00978246,
            0.00976064,
            0.00962071,
            0.00947115,
            0.00924381,
            0.00910248,
            0.00901503,
            0.00884448,
            0.0087358,
            0.00860953,
            0.00848214,
            0.00832923,
            0.00812413,
            0.00794573,
            0.00776555,
            0.00765426,
            0.007496,
            0.00739889,
            0.00802507,
            0.00891889,
            0.00838111,
            0.00720689,
            0.0070408,
            0.00697305,
            0.00693259,
            0.00689495,
            0.00686192,
            0.00682364,
            0.0067724,
            0.00671036,
            0.00663629,
            0.00655948,
            0.00649093,
            0.0064207,
            0.00634897,
            0.00627874,
            0.00620141,
            0.00611761,
            0.00603513,
            0.0059653,
            0.00591736,
            0.00587918,
            0.00584615,
            0.00582458,
            0.00580211,
            0.0057674,
            0.00572999,
            0.0056941,
            0.00565812,
            0.00562163,
            0.00558849,
            0.00555629,
            0.00552214,
            0.00548952,
            0.00545532,
            0.00541336,
            0.00536872,
            0.00532222,
            0.00527646,
            0.00523362,
            0.00518824,
            0.00514399,
            0.0051029,
            0.00506198,
            0.00502066,
            0.00498243,
            0.00495409,
            0.00493619,
            0.00493017,
            0.00493449,
            0.00494777,
            0.00495322,
            0.00494797,
            0.00493082,
            0.00490022,
            0.00486598,
            0.00483295,
            0.00480033,
            0.00476719,
            0.00473292,
            0.00469809,
            0.00466245,
            0.00462565,
            0.00458831,
            0.00455033,
            0.00451133,
            0.00447271,
            0.00443127,
            0.00439067,
            0.00435019,
            0.00430844,
            0.00426793,
            0.00422775,
            0.00418804,
            0.00414988,
            0.00411322,
            0.00407739,
            0.00404244,
            0.00400879,
        ],
    )
    value.loc[["male"], ['"55-59"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0141275,
            0.0138773,
            0.0136454,
            0.0134954,
            0.0133331,
            0.0132359,
            0.0129923,
            0.0128861,
            0.0128634,
            0.0126664,
            0.0125593,
            0.0123908,
            0.0122662,
            0.0121357,
            0.0119703,
            0.0118787,
            0.011797,
            0.0117068,
            0.0115144,
            0.0113134,
            0.0124206,
            0.0135977,
            0.0126158,
            0.0107173,
            0.0104443,
            0.0102966,
            0.0101747,
            0.0100522,
            0.00995019,
            0.00986836,
            0.00980374,
            0.00975532,
            0.00971056,
            0.00966573,
            0.00961528,
            0.00954305,
            0.00945208,
            0.0093439,
            0.00923173,
            0.00913172,
            0.00903262,
            0.00892974,
            0.00882832,
            0.00871972,
            0.00859926,
            0.00847811,
            0.00838035,
            0.00831716,
            0.00826583,
            0.00822392,
            0.00820301,
            0.00817529,
            0.00812832,
            0.00807843,
            0.00802909,
            0.00797784,
            0.0079263,
            0.00787691,
            0.00783016,
            0.00777828,
            0.00772827,
            0.00767674,
            0.00761246,
            0.00754433,
            0.0074758,
            0.00740678,
            0.00734091,
            0.00727491,
            0.00721006,
            0.0071476,
            0.00708885,
            0.00702738,
            0.00696989,
            0.00692548,
            0.00689901,
            0.00688658,
            0.0068896,
            0.00690456,
            0.00691182,
            0.00690173,
            0.00687472,
            0.00682985,
            0.00677932,
            0.0067294,
            0.00667968,
            0.00663034,
            0.00658047,
            0.00652954,
            0.00647939,
            0.00642512,
            0.00637188,
            0.00631786,
            0.00626019,
            0.00620255,
            0.00614342,
            0.00608343,
            0.00602366,
            0.00596441,
            0.00590558,
            0.00584754,
            0.00579045,
        ],
    )
    value.loc[["male"], ['"60-64"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0222811,
            0.0219739,
            0.0217024,
            0.0213186,
            0.0207903,
            0.0203963,
            0.0199023,
            0.0196705,
            0.0195106,
            0.0192631,
            0.0190931,
            0.0188494,
            0.0186648,
            0.0185076,
            0.0182115,
            0.0180158,
            0.017802,
            0.0177091,
            0.0174369,
            0.0172741,
            0.0192409,
            0.0213426,
            0.0199337,
            0.0167466,
            0.0162004,
            0.0158652,
            0.0155786,
            0.0153378,
            0.0151477,
            0.0149635,
            0.0147782,
            0.0145946,
            0.0144135,
            0.0142521,
            0.0141215,
            0.0140126,
            0.0139231,
            0.0138403,
            0.0137584,
            0.0136682,
            0.0135544,
            0.0134156,
            0.0132568,
            0.0131018,
            0.0129594,
            0.012813,
            0.0126649,
            0.0125202,
            0.0123634,
            0.0121959,
            0.0120349,
            0.0119,
            0.0118106,
            0.0117379,
            0.0116754,
            0.0116386,
            0.0115968,
            0.011528,
            0.0114592,
            0.0113889,
            0.011316,
            0.011245,
            0.0111756,
            0.0111096,
            0.0110411,
            0.0109716,
            0.0108983,
            0.0108138,
            0.0107228,
            0.010628,
            0.0105381,
            0.0104496,
            0.0103599,
            0.0102705,
            0.0101895,
            0.0101093,
            0.0100259,
            0.00994678,
            0.00989055,
            0.00985488,
            0.00984075,
            0.00985032,
            0.00987569,
            0.00988798,
            0.00987563,
            0.00983988,
            0.00977914,
            0.00971023,
            0.00964535,
            0.0095768,
            0.00951145,
            0.00944645,
            0.00937603,
            0.0093058,
            0.00923368,
            0.0091599,
            0.00908417,
            0.00900719,
            0.00892777,
            0.00884625,
            0.0087632,
        ],
    )
    value.loc[["male"], ['"65-69"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0331016,
            0.0326112,
            0.0323076,
            0.0320754,
            0.03166,
            0.0313085,
            0.0305637,
            0.0301653,
            0.0296705,
            0.0289687,
            0.0284738,
            0.0279172,
            0.0274555,
            0.0270178,
            0.0266115,
            0.0263223,
            0.0260914,
            0.0260741,
            0.0258726,
            0.0256854,
            0.0285034,
            0.0310298,
            0.0289183,
            0.0246102,
            0.0239703,
            0.0236776,
            0.0234671,
            0.0232219,
            0.0229052,
            0.0225234,
            0.0221151,
            0.021706,
            0.0213649,
            0.0211005,
            0.0208601,
            0.0206119,
            0.0203571,
            0.0201045,
            0.0198854,
            0.0197083,
            0.0195687,
            0.0194542,
            0.0193494,
            0.019256,
            0.0191448,
            0.0189938,
            0.0188103,
            0.0185994,
            0.0183847,
            0.0181911,
            0.0180055,
            0.0178097,
            0.017617,
            0.0174091,
            0.0171811,
            0.0169608,
            0.016783,
            0.0166634,
            0.0165735,
            0.0164974,
            0.016459,
            0.0164168,
            0.0163312,
            0.0162426,
            0.0161571,
            0.016063,
            0.0159671,
            0.0158814,
            0.015798,
            0.0157056,
            0.0156202,
            0.0155241,
            0.0154093,
            0.015283,
            0.0151595,
            0.0150356,
            0.0149168,
            0.0147963,
            0.0146845,
            0.0145771,
            0.0144729,
            0.0143652,
            0.0142613,
            0.0141861,
            0.014143,
            0.0141322,
            0.0141568,
            0.0142043,
            0.014237,
            0.0142277,
            0.014187,
            0.0141125,
            0.0140208,
            0.0139328,
            0.0138461,
            0.0137597,
            0.0136713,
            0.0135823,
            0.013489,
            0.0133928,
            0.0132933,
        ],
    )
    value.loc[["male"], ['"70-74"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0500513,
            0.0493882,
            0.0490158,
            0.0485281,
            0.0476518,
            0.0472454,
            0.0462217,
            0.045895,
            0.0455348,
            0.0447963,
            0.0442143,
            0.0434049,
            0.0426962,
            0.0418551,
            0.0409158,
            0.0403302,
            0.0397096,
            0.0395072,
            0.0388599,
            0.0386334,
            0.0425848,
            0.0462744,
            0.0430249,
            0.0371093,
            0.0362012,
            0.0357242,
            0.0353398,
            0.0349589,
            0.0345691,
            0.0342042,
            0.0338775,
            0.0335709,
            0.0332178,
            0.0327628,
            0.0322511,
            0.0317165,
            0.0311864,
            0.0307438,
            0.0303912,
            0.0300591,
            0.0297227,
            0.0293687,
            0.0290222,
            0.0287397,
            0.0285038,
            0.0283124,
            0.0281623,
            0.0280312,
            0.0279013,
            0.027749,
            0.0275562,
            0.0273051,
            0.0270146,
            0.0267268,
            0.026465,
            0.0262123,
            0.0259523,
            0.0256835,
            0.025402,
            0.0250891,
            0.0247835,
            0.0245461,
            0.0243877,
            0.024271,
            0.0241813,
            0.0241355,
            0.0240765,
            0.0239704,
            0.0238545,
            0.0237328,
            0.0236102,
            0.0234764,
            0.0233543,
            0.0232324,
            0.02311,
            0.022983,
            0.0228438,
            0.0226754,
            0.0225008,
            0.0223188,
            0.0221454,
            0.0219832,
            0.0218152,
            0.0216538,
            0.0215028,
            0.0213538,
            0.0212008,
            0.0210569,
            0.0209628,
            0.0209062,
            0.0209011,
            0.0209519,
            0.021027,
            0.0210755,
            0.0210731,
            0.0210201,
            0.020913,
            0.0207939,
            0.0206729,
            0.0205527,
            0.0204314,
        ],
    )
    value.loc[["male"], ['"75-79"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.0753232,
            0.0743569,
            0.0739263,
            0.0737393,
            0.0725551,
            0.0721309,
            0.0705798,
            0.0699541,
            0.06915,
            0.0678172,
            0.0669437,
            0.0658825,
            0.0650662,
            0.0641358,
            0.0630715,
            0.062339,
            0.0613759,
            0.0609829,
            0.0596565,
            0.0587133,
            0.0638476,
            0.0684849,
            0.063715,
            0.0560648,
            0.0547082,
            0.0539341,
            0.0533112,
            0.052823,
            0.0524195,
            0.0519771,
            0.0514493,
            0.0509378,
            0.0504304,
            0.0498879,
            0.0494014,
            0.0489595,
            0.0485292,
            0.0480291,
            0.0473866,
            0.0466749,
            0.0459726,
            0.0452892,
            0.0447165,
            0.0442576,
            0.0438037,
            0.0433374,
            0.0428583,
            0.0424127,
            0.0420351,
            0.0417265,
            0.0415004,
            0.0413124,
            0.0411397,
            0.040973,
            0.0407603,
            0.0404902,
            0.040154,
            0.0397544,
            0.0393711,
            0.0390188,
            0.038669,
            0.0383171,
            0.0379394,
            0.0375444,
            0.0371246,
            0.0367079,
            0.0363768,
            0.0361731,
            0.0360214,
            0.0358898,
            0.0358309,
            0.0357376,
            0.0355771,
            0.0354022,
            0.0352388,
            0.0350518,
            0.0348597,
            0.0346885,
            0.0345321,
            0.0343566,
            0.0341863,
            0.034,
            0.0337644,
            0.0335088,
            0.0332519,
            0.0330035,
            0.032773,
            0.0325405,
            0.0323291,
            0.0321158,
            0.0319114,
            0.0317089,
            0.0315056,
            0.031367,
            0.0312992,
            0.0313019,
            0.0313756,
            0.0315009,
            0.031574,
            0.0315717,
            0.0314957,
        ],
    )
    value.loc[["male"], ['"80-84"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.119225,
            0.117187,
            0.116151,
            0.115415,
            0.113029,
            0.112453,
            0.1102,
            0.109505,
            0.108518,
            0.106434,
            0.105031,
            0.103247,
            0.1021,
            0.100393,
            0.0984441,
            0.0977637,
            0.0961187,
            0.0960622,
            0.0941813,
            0.0930725,
            0.10201,
            0.108359,
            0.101327,
            0.0893144,
            0.0872534,
            0.0862298,
            0.0853218,
            0.0842544,
            0.0832138,
            0.0822465,
            0.0813122,
            0.0804776,
            0.0798392,
            0.0792964,
            0.0787178,
            0.078009,
            0.0772931,
            0.0765873,
            0.0758264,
            0.075099,
            0.0744256,
            0.0737391,
            0.0729717,
            0.0720967,
            0.0711839,
            0.0703164,
            0.0695083,
            0.068814,
            0.0681546,
            0.0675103,
            0.0668832,
            0.0662199,
            0.0656004,
            0.0650818,
            0.0646073,
            0.0642465,
            0.0639382,
            0.063628,
            0.0633231,
            0.0629551,
            0.0625099,
            0.0620169,
            0.0614443,
            0.0609031,
            0.0604138,
            0.0599149,
            0.0594027,
            0.058873,
            0.0583187,
            0.0577232,
            0.0571585,
            0.0566627,
            0.0563107,
            0.0560245,
            0.0557861,
            0.0555932,
            0.0553729,
            0.055098,
            0.054822,
            0.0545383,
            0.0542461,
            0.0539609,
            0.053691,
            0.0534217,
            0.0531426,
            0.0528571,
            0.0525487,
            0.0521885,
            0.0518211,
            0.0514253,
            0.0510556,
            0.0507202,
            0.0503663,
            0.0500336,
            0.0497156,
            0.0494058,
            0.049088,
            0.0487974,
            0.0485743,
            0.0484511,
            0.0484216,
        ],
    )
    value.loc[["male"], ['"85-89"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.182398,
            0.180225,
            0.18002,
            0.179967,
            0.176297,
            0.176506,
            0.172438,
            0.171243,
            0.169348,
            0.166204,
            0.163981,
            0.16133,
            0.159724,
            0.156958,
            0.153378,
            0.152686,
            0.150021,
            0.150526,
            0.147182,
            0.144945,
            0.160704,
            0.167837,
            0.157155,
            0.141596,
            0.139035,
            0.137557,
            0.136273,
            0.134961,
            0.133546,
            0.132195,
            0.131071,
            0.129864,
            0.128431,
            0.12702,
            0.125758,
            0.124629,
            0.123593,
            0.122776,
            0.122087,
            0.121289,
            0.120332,
            0.119347,
            0.118368,
            0.11733,
            0.116278,
            0.115238,
            0.114212,
            0.113173,
            0.112043,
            0.110971,
            0.11001,
            0.109137,
            0.108315,
            0.107472,
            0.106563,
            0.105712,
            0.104805,
            0.103953,
            0.103202,
            0.102485,
            0.101864,
            0.10134,
            0.100783,
            0.100214,
            0.0995801,
            0.0988603,
            0.0981086,
            0.0973094,
            0.0965383,
            0.095806,
            0.0951091,
            0.0943157,
            0.0934794,
            0.0926394,
            0.0917903,
            0.0909186,
            0.0901302,
            0.089548,
            0.0890393,
            0.0885612,
            0.0881465,
            0.087727,
            0.0872294,
            0.0867038,
            0.0862016,
            0.0856674,
            0.0851511,
            0.0846766,
            0.0842287,
            0.0837179,
            0.083224,
            0.0827005,
            0.0820899,
            0.0814713,
            0.0808369,
            0.0802324,
            0.0796671,
            0.0791298,
            0.078577,
            0.0780516,
            0.0775306,
        ],
    )
    value.loc[["male"], ['"90-94"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.271178,
            0.268447,
            0.268774,
            0.270343,
            0.263436,
            0.266038,
            0.261145,
            0.26039,
            0.260262,
            0.25517,
            0.25404,
            0.249945,
            0.248364,
            0.243561,
            0.238319,
            0.238836,
            0.233596,
            0.233902,
            0.227522,
            0.221529,
            0.237696,
            0.242999,
            0.23421,
            0.220489,
            0.217865,
            0.216487,
            0.215087,
            0.21366,
            0.212253,
            0.210738,
            0.20907,
            0.207499,
            0.205996,
            0.204332,
            0.20282,
            0.201663,
            0.20025,
            0.198553,
            0.196958,
            0.195527,
            0.194394,
            0.193191,
            0.192161,
            0.191359,
            0.190399,
            0.189227,
            0.187997,
            0.186795,
            0.185398,
            0.183954,
            0.182441,
            0.180911,
            0.1795,
            0.178311,
            0.177271,
            0.176534,
            0.175901,
            0.175114,
            0.173969,
            0.172721,
            0.171512,
            0.170316,
            0.1692,
            0.168143,
            0.16702,
            0.165922,
            0.164941,
            0.163915,
            0.162807,
            0.161635,
            0.160515,
            0.159269,
            0.158048,
            0.156944,
            0.15587,
            0.154756,
            0.153536,
            0.152364,
            0.151192,
            0.150043,
            0.148867,
            0.147801,
            0.146842,
            0.145859,
            0.144955,
            0.144014,
            0.143086,
            0.142175,
            0.141286,
            0.140341,
            0.139433,
            0.138542,
            0.137668,
            0.136847,
            0.135953,
            0.135052,
            0.134132,
            0.133196,
            0.132179,
            0.131188,
            0.130221,
        ],
    )
    value.loc[["male"], ['"95-99"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.37421,
            0.371981,
            0.373982,
            0.377006,
            0.369753,
            0.374274,
            0.368154,
            0.367658,
            0.370648,
            0.364513,
            0.364052,
            0.36087,
            0.360816,
            0.354495,
            0.349407,
            0.350309,
            0.343309,
            0.344363,
            0.335267,
            0.325246,
            0.341276,
            0.347355,
            0.342521,
            0.330365,
            0.326988,
            0.325089,
            0.32358,
            0.32231,
            0.321292,
            0.320396,
            0.319368,
            0.318089,
            0.316764,
            0.31538,
            0.313847,
            0.312299,
            0.310917,
            0.309694,
            0.308401,
            0.307236,
            0.306492,
            0.305351,
            0.303832,
            0.302423,
            0.301207,
            0.300462,
            0.29971,
            0.29915,
            0.298684,
            0.298064,
            0.297186,
            0.296077,
            0.294924,
            0.293588,
            0.291523,
            0.289311,
            0.287029,
            0.285647,
            0.285427,
            0.28568,
            0.286,
            0.286316,
            0.285851,
            0.284619,
            0.283314,
            0.282024,
            0.28082,
            0.279593,
            0.278149,
            0.276502,
            0.274848,
            0.272815,
            0.270758,
            0.268741,
            0.266715,
            0.264894,
            0.263135,
            0.261791,
            0.260449,
            0.259112,
            0.257704,
            0.256342,
            0.254975,
            0.253507,
            0.252242,
            0.25084,
            0.24932,
            0.247735,
            0.246037,
            0.244188,
            0.242303,
            0.240455,
            0.238726,
            0.237195,
            0.235583,
            0.234025,
            0.232618,
            0.231308,
            0.229897,
            0.228541,
            0.227139,
        ],
    )
    value.loc[["male"], ['"100+"']] = np.interp(
        time(),
        [
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.486842,
            0.481913,
            0.485463,
            0.490849,
            0.485822,
            0.493868,
            0.488145,
            0.488412,
            0.494373,
            0.487862,
            0.488235,
            0.484077,
            0.484732,
            0.47747,
            0.473822,
            0.475694,
            0.467796,
            0.467056,
            0.455946,
            0.439883,
            0.452572,
            0.46585,
            0.462993,
            0.450095,
            0.447071,
            0.446021,
            0.444673,
            0.443155,
            0.441828,
            0.440505,
            0.43928,
            0.438302,
            0.437417,
            0.436495,
            0.4357,
            0.434971,
            0.434105,
            0.433271,
            0.432502,
            0.431529,
            0.430703,
            0.430004,
            0.42947,
            0.42896,
            0.428436,
            0.42785,
            0.427106,
            0.426346,
            0.425605,
            0.424873,
            0.424318,
            0.4234,
            0.422565,
            0.421974,
            0.421078,
            0.420361,
            0.419387,
            0.418566,
            0.417628,
            0.416193,
            0.414753,
            0.413555,
            0.413074,
            0.413442,
            0.413533,
            0.413174,
            0.412862,
            0.4122,
            0.411402,
            0.410646,
            0.409909,
            0.408713,
            0.407492,
            0.406323,
            0.404944,
            0.403484,
            0.401832,
            0.400378,
            0.398798,
            0.39734,
            0.395866,
            0.394458,
            0.393192,
            0.391655,
            0.390238,
            0.388765,
            0.387343,
            0.386088,
            0.384717,
            0.383158,
            0.381754,
            0.380204,
            0.378478,
            0.37698,
            0.375254,
            0.373511,
            0.371952,
            0.370482,
            0.368933,
            0.367513,
            0.366146,
        ],
    )
    return value


@component.add(
    name='"Initial Meat-based Diet Followers"',
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_meatbased_diet_followers_male": 1,
        "initial_meatbased_diet_followers_female": 1,
    },
)
def initial_meatbased_diet_followers():
    """
    these are 1900 values.
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
            "Education": _subscript_dict["Education"],
        },
        ["Gender", "Cohorts", "Education"],
    )
    value.loc[["male"], :, :] = (
        initial_meatbased_diet_followers_male()
        .transpose("Cohorts", "Education")
        .expand_dims({"Gender": ["male"]}, 0)
        .values
    )
    value.loc[["female"], :, :] = (
        initial_meatbased_diet_followers_female()
        .transpose("Cohorts", "Education")
        .expand_dims({"Gender": ["female"]}, 0)
        .values
    )
    return value


@component.add(
    name="Initial Vegetarian Diet Followers",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_vegetarian_diet_followers_male": 1,
        "initial_vegetarian_diet_followers_female": 1,
    },
)
def initial_vegetarian_diet_followers():
    """
    these are the 2010 population values, with the assumption that meat-vegetarioan ratio is 1-2.
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
            "Education": _subscript_dict["Education"],
        },
        ["Gender", "Cohorts", "Education"],
    )
    value.loc[["male"], :, :] = (
        initial_vegetarian_diet_followers_male()
        .transpose("Cohorts", "Education")
        .expand_dims({"Gender": ["male"]}, 0)
        .values
    )
    value.loc[["female"], :, :] = (
        initial_vegetarian_diet_followers_female()
        .transpose("Cohorts", "Education")
        .expand_dims({"Gender": ["female"]}, 0)
        .values
    )
    return value


@component.add(
    name="Reference vegetarian diet decomposition multiplier",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_vegetarian_diet_decomposition_multiplier_male": 1,
        "reference_vegetarian_diet_decomposition_multiplier_female": 1,
    },
)
def reference_vegetarian_diet_decomposition_multiplier():
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Gender", "Cohorts"],
    )
    value.loc[:, ["male"], :] = (
        reference_vegetarian_diet_decomposition_multiplier_male()
        .expand_dims({"Gender": ["male"]}, 1)
        .values
    )
    value.loc[:, ["female"], :] = (
        reference_vegetarian_diet_decomposition_multiplier_female()
        .expand_dims({"Gender": ["female"]}, 1)
        .values
    )
    return value


@component.add(
    name="Reference meat diet decomposition multiplier",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_meat_diet_decomposition_multiplier_male": 1,
        "reference_meat_diet_decomposition_multiplier_female": 1,
    },
)
def reference_meat_diet_decomposition_multiplier():
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Gender", "Cohorts"],
    )
    value.loc[:, ["male"], :] = (
        reference_meat_diet_decomposition_multiplier_male()
        .expand_dims({"Gender": ["male"]}, 1)
        .values
    )
    value.loc[:, ["female"], :] = (
        reference_meat_diet_decomposition_multiplier_female()
        .expand_dims({"Gender": ["female"]}, 1)
        .values
    )
    return value


@component.add(
    name="Vegan diet decomposition multiplier",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "vegan_diet_decomposition_multiplier_male": 1,
        "vegan_diet_decomposition_multiplier_female": 1,
    },
)
def vegan_diet_decomposition_multiplier():
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Gender", "Cohorts"],
    )
    value.loc[:, ["male"], :] = (
        vegan_diet_decomposition_multiplier_male()
        .expand_dims({"Gender": ["male"]}, 1)
        .values
    )
    value.loc[:, ["female"], :] = (
        vegan_diet_decomposition_multiplier_female()
        .expand_dims({"Gender": ["female"]}, 1)
        .values
    )
    return value


@component.add(
    name="Flexitarian diet decomposition multiplier",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "flexitarian_diet_decomposition_multiplier_male": 1,
        "flexitarian_diet_decomposition_multiplier_female": 1,
    },
)
def flexitarian_diet_decomposition_multiplier():
    """
    Modified by Q. Ye in June 2024
    """
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Gender", "Cohorts"],
    )
    value.loc[:, ["male"], :] = (
        flexitarian_diet_decomposition_multiplier_male()
        .expand_dims({"Gender": ["male"]}, 1)
        .values
    )
    value.loc[:, ["female"], :] = (
        flexitarian_diet_decomposition_multiplier_female()
        .expand_dims({"Gender": ["female"]}, 1)
        .values
    )
    return value


@component.add(
    name="Healthy diet decomposition multiplier",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "healthy_diet_decomposition_multiplier_male": 1,
        "healthy_diet_decomposition_multiplier_female": 1,
    },
)
def healthy_diet_decomposition_multiplier():
    value = xr.DataArray(
        np.nan,
        {
            "FoodCategories": _subscript_dict["FoodCategories"],
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
        },
        ["FoodCategories", "Gender", "Cohorts"],
    )
    value.loc[:, ["male"], :] = (
        healthy_diet_decomposition_multiplier_male()
        .expand_dims({"Gender": ["male"]}, 1)
        .values
    )
    value.loc[:, ["female"], :] = (
        healthy_diet_decomposition_multiplier_female()
        .expand_dims({"Gender": ["female"]}, 1)
        .values
    )
    return value


@component.add(
    name="S0",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"s0_sa": 2, "current_year": 2, "time": 2},
)
def s0():
    """
    v15 pre-recalibration: 2,2.49553
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 1.9 + step(
        __data["time"], float(s0_sa().loc["male"]) - 1.9, current_year()
    )
    value.loc[["female"]] = 1.5 + step(
        __data["time"], float(s0_sa().loc["female"]) - 1.5, current_year()
    )
    return value


@component.add(
    name="S1",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"s1_sa": 2, "current_year": 2, "time": 2},
)
def s1():
    """
    The effect function is a logistic function that saturates at 1, meaning that enrollment fraction does not become higher than its reference value v15 pre-recalibration 1.04703,1.65163
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 1.4 + step(
        __data["time"], float(s1_sa().loc["male"]) - 1.4, current_year()
    )
    value.loc[["female"]] = 1 + step(
        __data["time"], float(s1_sa().loc["female"]) - 1, current_year()
    )
    return value


@component.add(
    name="S2",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"s2_sa": 2, "current_year": 2, "time": 2},
)
def s2():
    """
    v15 pre-recalibration: 0.904801,1.16551
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 1.15 + step(
        __data["time"], float(s2_sa().loc["male"]) - 1.15, current_year()
    )
    value.loc[["female"]] = 1.5 + step(
        __data["time"], float(s2_sa().loc["female"]) - 1.5, current_year()
    )
    return value


@component.add(
    name="T1",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"t1_sa": 2, "current_year": 2, "time": 2},
)
def t1():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 0.7 + step(
        __data["time"], float(t1_sa().loc["male"]) - 0.7, current_year()
    )
    value.loc[["female"]] = 1.2 + step(
        __data["time"], float(t1_sa().loc["female"]) - 1.2, current_year()
    )
    return value


@component.add(
    name="T2",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"t2_sa": 2, "current_year": 2, "time": 2},
)
def t2():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 0.6 + step(
        __data["time"], float(t2_sa().loc["male"]) - 0.6, current_year()
    )
    value.loc[["female"]] = 0.4 + step(
        __data["time"], float(t2_sa().loc["female"]) - 0.4, current_year()
    )
    return value


@component.add(
    name="P1",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p1_sa": 2, "current_year": 2, "time": 2},
)
def p1():
    """
    v15 pre-recalibration 0.692643,0.711052
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 0.87 + step(
        __data["time"], float(p1_sa().loc["male"]) - 0.87, current_year()
    )
    value.loc[["female"]] = 0.81047 + step(
        __data["time"], float(p1_sa().loc["female"]) - 0.81047, current_year()
    )
    return value


@component.add(
    name="P2",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p2_sa": 2, "current_year": 2, "time": 2},
)
def p2():
    """
    v15 pre-recalibration: 0.0665895,0.0262134
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 0.03 + step(
        __data["time"], float(p2_sa().loc["male"]) - 0.03, current_year()
    )
    value.loc[["female"]] = 0.06 + step(
        __data["time"], float(p2_sa().loc["female"]) - 0.06, current_year()
    )
    return value


@component.add(
    name="T0",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"t0_sa": 2, "current_year": 2, "time": 2},
)
def t0():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 1.4 + step(
        __data["time"], float(t0_sa().loc["male"]) - 1.4, current_year()
    )
    value.loc[["female"]] = 3.5 + step(
        __data["time"], float(t0_sa().loc["female"]) - 3.5, current_year()
    )
    return value


@component.add(
    name='"Prevalence (model-based)"',
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "yogl_education_indicator": 1,
        "yogl_poverty_indicator": 1,
        "yogl_health_indicator": 1,
        "yogl_life_satisfaction_indicator": 1,
    },
)
def prevalence_modelbased():
    return (
        yogl_education_indicator()
        * yogl_poverty_indicator()
        * yogl_health_indicator()
        * yogl_life_satisfaction_indicator()
    )


@component.add(
    name="Total Agricultural and Land Use C Emissions",
    units="TonC/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "c_emission_from_land_use": 1,
        "_smooth_total_agricultural_and_land_use_c_emissions": 1,
        "climate_policy_scenario": 1,
    },
    other_deps={
        "_smooth_total_agricultural_and_land_use_c_emissions": {
            "initial": {
                "land_mitigation_policy_multiplier": 1,
                "c_emission_from_land_use": 1,
                "climate_action_year": 2,
                "time": 1,
            },
            "step": {
                "land_mitigation_policy_multiplier": 1,
                "c_emission_from_land_use": 1,
                "climate_action_year": 2,
                "time": 1,
                "land_mitigation_policy_transition_period": 1,
            },
        }
    },
)
def total_agricultural_and_land_use_c_emissions():
    return float(
        np.maximum(
            0,
            c_emission_from_land_use()
            - climate_policy_scenario()
            * _smooth_total_agricultural_and_land_use_c_emissions(),
        )
    )


_smooth_total_agricultural_and_land_use_c_emissions = Smooth(
    lambda: ramp(
        __data["time"],
        land_mitigation_policy_multiplier() * c_emission_from_land_use(),
        climate_action_year(),
        climate_action_year() + 20,
    ),
    lambda: land_mitigation_policy_transition_period(),
    lambda: ramp(
        __data["time"],
        land_mitigation_policy_multiplier() * c_emission_from_land_use(),
        climate_action_year(),
        climate_action_year() + 20,
    ),
    lambda: 1,
    "_smooth_total_agricultural_and_land_use_c_emissions",
)


@component.add(
    name="Energy Demand EJ",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "mtoe_into_ej": 1},
)
def energy_demand_ej():
    return energy_demand() * mtoe_into_ej()


@component.add(
    name="Smoothed Demand Supply Ratio Agr Land",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_smoothed_demand_supply_ratio_agr_land": 1},
    other_deps={
        "_smooth_smoothed_demand_supply_ratio_agr_land": {
            "initial": {"demand_supply_ratio_of_agricultural_land": 1},
            "step": {"demand_supply_ratio_of_agricultural_land": 1},
        }
    },
)
def smoothed_demand_supply_ratio_agr_land():
    return _smooth_smoothed_demand_supply_ratio_agr_land()


_smooth_smoothed_demand_supply_ratio_agr_land = Smooth(
    lambda: demand_supply_ratio_of_agricultural_land(),
    lambda: 10,
    lambda: demand_supply_ratio_of_agricultural_land(),
    lambda: 1,
    "_smooth_smoothed_demand_supply_ratio_agr_land",
)


@component.add(
    name="Desired Agricultural Land Conversion",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"trend_of_land_demand": 1, "agricultural_land": 1},
)
def desired_agricultural_land_conversion():
    return trend_of_land_demand() * agricultural_land()


@component.add(
    name="Deforestation to Agricultural Land",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land": 1,
        "forest_protected_land": 1,
        "forest_to_agriculture_land_allocation_time": 2,
        "intended_conversion_forest_to_agriculture": 1,
    },
)
def deforestation_to_agricultural_land():
    return float(
        np.minimum(
            (forest_land() - forest_protected_land())
            / forest_to_agriculture_land_allocation_time(),
            intended_conversion_forest_to_agriculture()
            / forest_to_agriculture_land_allocation_time(),
        )
    )


@component.add(
    name="k gwp fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def k_gwp_fert():
    """
    1.5 3 + STEP(SA k gwp fert-3, 2020)
    """
    return 3.85


@component.add(
    name="x0 gwp fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def x0_gwp_fert():
    """
    1.44 + STEP(SA x0 gwp fert-1.44, 2020)
    """
    return 1.164


@component.add(
    name="L gwp fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def l_gwp_fert():
    """
    Calibrated simultaneously for Eff of GWP and Eff of Land. See FertilizerLookups.xlsx/Calibration... 1.25 + STEP(SA L gwp fert-1.25, 2020)
    """
    return 1.25206


@component.add(
    name="Poverty rate",
    units="percent",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "standard_deviation_of_the_lognormal_distribution_of_consumption": 3,
        "lnplmean": 3,
        "table_for_standard_normal_distribution": 2,
        "nvs_100_percent": 1,
    },
)
def poverty_rate():
    return (
        if_then_else(
            standard_deviation_of_the_lognormal_distribution_of_consumption() == 0,
            lambda: xr.DataArray(
                0.5,
                {
                    "Gender": _subscript_dict["Gender"],
                    "Cohorts": _subscript_dict["Cohorts"],
                },
                ["Gender", "Cohorts"],
            ),
            lambda: if_then_else(
                lnplmean() < 0,
                lambda: 1
                - table_for_standard_normal_distribution(
                    -lnplmean()
                    / standard_deviation_of_the_lognormal_distribution_of_consumption(),
                    {
                        "Gender": ["male", "female"],
                        "Cohorts": [
                            '"0-4"',
                            '"5-9"',
                            '"10-14"',
                            '"15-19"',
                            '"20-24"',
                            '"25-29"',
                            '"30-34"',
                            '"35-39"',
                            '"40-44"',
                            '"45-49"',
                            '"50-54"',
                            '"55-59"',
                            '"60-64"',
                            '"65-69"',
                            '"70-74"',
                            '"75-79"',
                            '"80-84"',
                            '"85-89"',
                            '"90-94"',
                            '"95-99"',
                            '"100+"',
                        ],
                    },
                ),
                lambda: table_for_standard_normal_distribution(
                    lnplmean()
                    / standard_deviation_of_the_lognormal_distribution_of_consumption(),
                    {
                        "Gender": ["male", "female"],
                        "Cohorts": [
                            '"0-4"',
                            '"5-9"',
                            '"10-14"',
                            '"15-19"',
                            '"20-24"',
                            '"25-29"',
                            '"30-34"',
                            '"35-39"',
                            '"40-44"',
                            '"45-49"',
                            '"50-54"',
                            '"55-59"',
                            '"60-64"',
                            '"65-69"',
                            '"70-74"',
                            '"75-79"',
                            '"80-84"',
                            '"85-89"',
                            '"90-94"',
                            '"95-99"',
                            '"100+"',
                        ],
                    },
                ),
            ),
        )
        * nvs_100_percent()
    )


@component.add(
    name="Reference secondary education enrollment fraction",
    units="Dmnl",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "reference_secondary_education_enrollment_fraction_init": 2,
        "_smooth_reference_secondary_education_enrollment_fraction": 1,
        "_smooth_reference_secondary_education_enrollment_fraction_1": 1,
    },
    other_deps={
        "_smooth_reference_secondary_education_enrollment_fraction": {
            "initial": {
                "secondary_education_enrollment_variation": 1,
                "reference_secondary_education_enrollment_fraction_init": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "secondary_education_enrollment_variation": 1,
                "reference_secondary_education_enrollment_fraction_init": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        },
        "_smooth_reference_secondary_education_enrollment_fraction_1": {
            "initial": {
                "secondary_education_enrollment_variation": 1,
                "reference_secondary_education_enrollment_fraction_init": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "secondary_education_enrollment_variation": 1,
                "reference_secondary_education_enrollment_fraction_init": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        },
    },
)
def reference_secondary_education_enrollment_fraction():
    """
    Corresponding to 2000 values
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = (
        reference_secondary_education_enrollment_fraction_init()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        + _smooth_reference_secondary_education_enrollment_fraction()
    ).values
    value.loc[:, ['"15-19"']] = (
        reference_secondary_education_enrollment_fraction_init()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        + _smooth_reference_secondary_education_enrollment_fraction_1()
    ).values
    return value


_smooth_reference_secondary_education_enrollment_fraction = Smooth(
    lambda: step(
        __data["time"],
        secondary_education_enrollment_variation()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        - reference_secondary_education_enrollment_fraction_init()
        .loc[:, '"10-14"']
        .reset_coords(drop=True),
        current_year(),
    ).expand_dims({"SchoolEnrollment": ['"10-14"']}, 1),
    lambda: xr.DataArray(
        ssp_demographic_variation_time(),
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: step(
        __data["time"],
        secondary_education_enrollment_variation()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        - reference_secondary_education_enrollment_fraction_init()
        .loc[:, '"10-14"']
        .reset_coords(drop=True),
        current_year(),
    ).expand_dims({"SchoolEnrollment": ['"10-14"']}, 1),
    lambda: 3,
    "_smooth_reference_secondary_education_enrollment_fraction",
)

_smooth_reference_secondary_education_enrollment_fraction_1 = Smooth(
    lambda: step(
        __data["time"],
        secondary_education_enrollment_variation()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - reference_secondary_education_enrollment_fraction_init()
        .loc[:, '"15-19"']
        .reset_coords(drop=True),
        current_year(),
    ).expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    lambda: xr.DataArray(
        ssp_demographic_variation_time(),
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"15-19"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: step(
        __data["time"],
        secondary_education_enrollment_variation()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - reference_secondary_education_enrollment_fraction_init()
        .loc[:, '"15-19"']
        .reset_coords(drop=True),
        current_year(),
    ).expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    lambda: 3,
    "_smooth_reference_secondary_education_enrollment_fraction_1",
)


@component.add(
    name="Reference tertiary education enrollment fraction",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "reference_tertiary_education_enrollment_fraction_init": 1,
        "_smooth_reference_tertiary_education_enrollment_fraction": 1,
    },
    other_deps={
        "_smooth_reference_tertiary_education_enrollment_fraction": {
            "initial": {
                "tertiary_education_enrollment_variation": 1,
                "reference_tertiary_education_enrollment_fraction_init": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "tertiary_education_enrollment_variation": 1,
                "reference_tertiary_education_enrollment_fraction_init": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        }
    },
)
def reference_tertiary_education_enrollment_fraction():
    """
    Corresponding to 2000 values of the fraction of seondary education graduates aged 15-19 enrolling at tertiary education
    """
    return (
        reference_tertiary_education_enrollment_fraction_init()
        + _smooth_reference_tertiary_education_enrollment_fraction()
    )


_smooth_reference_tertiary_education_enrollment_fraction = Smooth(
    lambda: step(
        __data["time"],
        tertiary_education_enrollment_variation()
        - reference_tertiary_education_enrollment_fraction_init(),
        current_year(),
    ),
    lambda: xr.DataArray(
        ssp_demographic_variation_time(),
        {"Gender": _subscript_dict["Gender"]},
        ["Gender"],
    ),
    lambda: step(
        __data["time"],
        tertiary_education_enrollment_variation()
        - reference_tertiary_education_enrollment_fraction_init(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_reference_tertiary_education_enrollment_fraction",
)


@component.add(
    name="Birth Gender Fraction",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Stateful, Auxiliary",
    comp_subtype="Normal, Smooth",
    depends_on={
        "birth_gender_fraction_init": 1,
        "_smooth_birth_gender_fraction": 1,
        "birth_gender_fraction": 1,
    },
    other_deps={
        "_smooth_birth_gender_fraction": {
            "initial": {
                "birth_gender_fraction_variation": 1,
                "birth_gender_fraction_init": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "birth_gender_fraction_variation": 1,
                "birth_gender_fraction_init": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        }
    },
)
def birth_gender_fraction():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = (
        birth_gender_fraction_init() + _smooth_birth_gender_fraction()
    ).values
    value.loc[["female"]] = 1 - float(birth_gender_fraction().loc["male"])
    return value


_smooth_birth_gender_fraction = Smooth(
    lambda: xr.DataArray(
        step(
            __data["time"],
            birth_gender_fraction_variation() - birth_gender_fraction_init(),
            current_year(),
        ),
        {"Gender": ["male"]},
        ["Gender"],
    ),
    lambda: xr.DataArray(
        ssp_demographic_variation_time(), {"Gender": ["male"]}, ["Gender"]
    ),
    lambda: xr.DataArray(
        step(
            __data["time"],
            birth_gender_fraction_variation() - birth_gender_fraction_init(),
            current_year(),
        ),
        {"Gender": ["male"]},
        ["Gender"],
    ),
    lambda: 3,
    "_smooth_birth_gender_fraction",
)


@component.add(
    name="Persistence tertiary",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"persistence": 1, "_smooth_persistence_tertiary": 1},
    other_deps={
        "_smooth_persistence_tertiary": {
            "initial": {
                "persistence_tertiary_variation": 1,
                "persistence_tertiary_init": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "persistence_tertiary_variation": 1,
                "persistence_tertiary_init": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        }
    },
)
def persistence_tertiary():
    return persistence() + _smooth_persistence_tertiary()


_smooth_persistence_tertiary = Smooth(
    lambda: step(
        __data["time"],
        persistence_tertiary_variation() - persistence_tertiary_init(),
        current_year(),
    ),
    lambda: xr.DataArray(
        ssp_demographic_variation_time(),
        {"Gender": _subscript_dict["Gender"]},
        ["Gender"],
    ),
    lambda: step(
        __data["time"],
        persistence_tertiary_variation() - persistence_tertiary_init(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_persistence_tertiary",
)


@component.add(
    name="Life Expectancy at Birth",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_life_expectancy_at_birth": 1,
        "impact_of_wealth_on_health": 1,
        "impact_of_education_on_life_expectancy": 1,
        "lifetime_multiplier_from_food": 1,
        "lifetime_multiplier_from_climate_risk": 1,
    },
)
def life_expectancy_at_birth():
    """
    The global average life expectancy at birth. Source of historical data: Wittgenstein center
    """
    return (
        reference_life_expectancy_at_birth()
        * impact_of_wealth_on_health()
        * impact_of_education_on_life_expectancy()
        * lifetime_multiplier_from_food()
        * lifetime_multiplier_from_climate_risk()
    )


@component.add(
    name="Primary education enrollment fraction",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_primary_education_enrollment_fraction": 1,
        "policy_ramp_primary_education": 1,
        "effect_of_gwp_per_capita_on_primary_enrollment": 1,
        "fractional1": 1,
    },
)
def primary_education_enrollment_fraction():
    return np.minimum(
        reference_primary_education_enrollment_fraction()
        * policy_ramp_primary_education()
        * effect_of_gwp_per_capita_on_primary_enrollment(),
        fractional1(),
    )


@component.add(
    name="Normal Fertility",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"normal_fertility_init": 1, "_smooth_normal_fertility": 1},
    other_deps={
        "_smooth_normal_fertility": {
            "initial": {
                "normal_fertility_variation": 1,
                "normal_fertility_init": 1,
                "current_year": 1,
                "time": 1,
            },
            "step": {
                "normal_fertility_variation": 1,
                "normal_fertility_init": 1,
                "current_year": 1,
                "time": 1,
                "ssp_demographic_variation_time": 1,
            },
        }
    },
)
def normal_fertility():
    """
    The initial reference parameter is gradually adjusted to the "variation" value after the current year.
    """
    return normal_fertility_init() + _smooth_normal_fertility()


_smooth_normal_fertility = Smooth(
    lambda: step(
        __data["time"],
        normal_fertility_variation() - normal_fertility_init(),
        current_year(),
    ),
    lambda: ssp_demographic_variation_time(),
    lambda: step(
        __data["time"],
        normal_fertility_variation() - normal_fertility_init(),
        current_year(),
    ),
    lambda: 3,
    "_smooth_normal_fertility",
)


@component.add(
    name="Labor Force input",
    units="Dmnl",
    subscripts=["Gender", "WorkingAge", "Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"change_in_labor_force": 1, "labor_force_participation_fraction": 1},
)
def labor_force_input():
    return change_in_labor_force() * labor_force_participation_fraction()


@component.add(
    name="Labor force RAMP",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fractional1": 1,
        "labor_force_participation_fraction_variation": 1,
        "current_year": 2,
        "demofelix_target_year": 2,
        "time": 1,
    },
)
def labor_force_ramp():
    return fractional1() + ramp(
        __data["time"],
        labor_force_participation_fraction_variation()
        / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    )


@component.add(
    name="Enrollment rate to primary education",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "primary_education_enrollment_fraction": 1,
        "primary_enrollment_rate_previous": 1,
        "population_cohorts": 1,
    },
)
def enrollment_rate_to_primary_education():
    """
    Primary education enrollment fraction[Gender]*Maturation Rate[Gender,"0-4"]
    """
    return primary_education_enrollment_fraction() * (
        population_cohorts().loc[:, '"5-9"'].reset_coords(drop=True)
        - primary_enrollment_rate_previous()
    )


@component.add(
    name="Population Cohorts",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_population_cohorts": 1, "_integ_population_cohorts_1": 1},
    other_deps={
        "_integ_population_cohorts": {
            "initial": {"initial_population": 1},
            "step": {"maturation_rate": 2, "death_rate": 1},
        },
        "_integ_population_cohorts_1": {
            "initial": {"initial_population": 1},
            "step": {"birth_rate": 1, "maturation_rate": 1, "death_rate": 1},
        },
    },
)
def population_cohorts():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, _subscript_dict["AllButYoungest"]] = _integ_population_cohorts().values
    value.loc[:, ['"0-4"']] = _integ_population_cohorts_1().values
    return value


_integ_population_cohorts = Integ(
    lambda: xr.DataArray(
        maturation_rate()
        .loc[:, _subscript_dict["PreviousCohort"]]
        .rename({"Cohorts": "PreviousCohort"})
        .values,
        {
            "Gender": _subscript_dict["Gender"],
            "AllButYoungest": _subscript_dict["AllButYoungest"],
        },
        ["Gender", "AllButYoungest"],
    )
    - maturation_rate()
    .loc[:, _subscript_dict["AllButYoungest"]]
    .rename({"Cohorts": "AllButYoungest"})
    - death_rate()
    .loc[:, _subscript_dict["AllButYoungest"]]
    .rename({"Cohorts": "AllButYoungest"}),
    lambda: initial_population()
    .loc[:, _subscript_dict["AllButYoungest"]]
    .rename({"Cohorts": "AllButYoungest"}),
    "_integ_population_cohorts",
)

_integ_population_cohorts_1 = Integ(
    lambda: (
        birth_rate()
        - maturation_rate().loc[:, '"0-4"'].reset_coords(drop=True)
        - death_rate().loc[:, '"0-4"'].reset_coords(drop=True)
    ).expand_dims({'"0 to 19"': ['"0-4"']}, 1),
    lambda: initial_population()
    .loc[:, '"0-4"']
    .reset_coords(drop=True)
    .expand_dims({'"0 to 19"': ['"0-4"']}, 1),
    "_integ_population_cohorts_1",
)


@component.add(
    name="Death Rate of Primary Education Graduates",
    units="People/Year",
    subscripts=["Gender", "PrimaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"primary_education_graduates": 1, "mortality_fraction": 1},
)
def death_rate_of_primary_education_graduates():
    """
    Death Rate[Gender,PrimaryEdCohorts]*Average Primary Education Ratio[Gender,PrimaryEdCohorts]
    """
    return primary_education_graduates().loc[
        :, _subscript_dict["PrimaryEdCohorts"]
    ].rename({"Cohorts": "PrimaryEdCohorts"}) * mortality_fraction().loc[
        :, _subscript_dict["PrimaryEdCohorts"]
    ].rename(
        {"Cohorts": "PrimaryEdCohorts"}
    )


@component.add(
    name="Death Rate of Secondary Education Graduates",
    units="People/Year",
    subscripts=["Gender", "SecondaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"secondary_education_graduates": 1, "mortality_fraction": 1},
)
def death_rate_of_secondary_education_graduates():
    """
    Death Rate[Gender,SecondaryEdCohorts]*Average Secondary Education Level[Gender,SecondaryEdCohorts]
    """
    return secondary_education_graduates().loc[
        :, _subscript_dict["SecondaryEdCohorts"]
    ].rename({"Cohorts": "SecondaryEdCohorts"}) * mortality_fraction().loc[
        :, _subscript_dict["SecondaryEdCohorts"]
    ].rename(
        {"Cohorts": "SecondaryEdCohorts"}
    )


@component.add(
    name="Maturation of Tertiary Education Graduates",
    units="People/Year",
    subscripts=["Gender", "TertiaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates": 1, "interval_duration": 1},
)
def maturation_of_tertiary_education_graduates():
    """
    Average Tertiary Education Level[Gender,TertiaryEdCohorts]*Maturation Rate [Gender,TertiaryEdCohorts]
    """
    return if_then_else(
        (
            xr.DataArray(
                np.arange(5, len(_subscript_dict["TertiaryEdCohorts"]) + 5),
                {"TertiaryEdCohorts": _subscript_dict["TertiaryEdCohorts"]},
                ["TertiaryEdCohorts"],
            )
            == 21
        ).expand_dims({"Gender": _subscript_dict["Gender"]}, 1),
        lambda: xr.DataArray(
            0,
            {
                "TertiaryEdCohorts": _subscript_dict["TertiaryEdCohorts"],
                "Gender": _subscript_dict["Gender"],
            },
            ["TertiaryEdCohorts", "Gender"],
        ),
        lambda: (
            tertiary_education_graduates()
            .loc[:, _subscript_dict["TertiaryEdCohorts"]]
            .rename({"Cohorts": "TertiaryEdCohorts"})
            / interval_duration()
        ).transpose("TertiaryEdCohorts", "Gender"),
    ).transpose("Gender", "TertiaryEdCohorts")


@component.add(
    name="Death Rate of Tertiary Education Graduates",
    units="People/Year",
    subscripts=["Gender", "TertiaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates": 1, "mortality_fraction": 1},
)
def death_rate_of_tertiary_education_graduates():
    """
    Death Rate[Gender,TertiaryEdCohorts]*Average Tertiary Education Level[Gender,TertiaryEdCohorts]
    """
    return tertiary_education_graduates().loc[
        :, _subscript_dict["TertiaryEdCohorts"]
    ].rename({"Cohorts": "TertiaryEdCohorts"}) * mortality_fraction().loc[
        :, _subscript_dict["TertiaryEdCohorts"]
    ].rename(
        {"Cohorts": "TertiaryEdCohorts"}
    )


@component.add(
    name="Maturation of Secondary Education Graduates",
    units="People/Year",
    subscripts=["Gender", "SecondaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"secondary_education_graduates": 1, "interval_duration": 1},
)
def maturation_of_secondary_education_graduates():
    """
    Average Secondary Education Level[Gender,SecondaryEdCohorts]*Maturation Rate [Gender,SecondaryEdCohorts]
    """
    return if_then_else(
        (
            xr.DataArray(
                np.arange(4, len(_subscript_dict["SecondaryEdCohorts"]) + 4),
                {"SecondaryEdCohorts": _subscript_dict["SecondaryEdCohorts"]},
                ["SecondaryEdCohorts"],
            )
            == 21
        ).expand_dims({"Gender": _subscript_dict["Gender"]}, 1),
        lambda: xr.DataArray(
            0,
            {
                "SecondaryEdCohorts": _subscript_dict["SecondaryEdCohorts"],
                "Gender": _subscript_dict["Gender"],
            },
            ["SecondaryEdCohorts", "Gender"],
        ),
        lambda: (
            secondary_education_graduates()
            .loc[:, _subscript_dict["SecondaryEdCohorts"]]
            .rename({"Cohorts": "SecondaryEdCohorts"})
            / interval_duration()
        ).transpose("SecondaryEdCohorts", "Gender"),
    ).transpose("Gender", "SecondaryEdCohorts")


@component.add(
    name="Maturation of Primary Education Graduates",
    units="People/Year",
    subscripts=["Gender", "PrimaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"primary_education_graduates": 1, "interval_duration": 1},
)
def maturation_of_primary_education_graduates():
    """
    Average Primary Education Ratio[Gender,PrimaryEdCohorts]*Maturation Rate[Gender ,PrimaryEdCohorts]
    """
    return if_then_else(
        (
            xr.DataArray(
                np.arange(3, len(_subscript_dict["PrimaryEdCohorts"]) + 3),
                {"PrimaryEdCohorts": _subscript_dict["PrimaryEdCohorts"]},
                ["PrimaryEdCohorts"],
            )
            == 21
        ).expand_dims({"Gender": _subscript_dict["Gender"]}, 1),
        lambda: xr.DataArray(
            0,
            {
                "PrimaryEdCohorts": _subscript_dict["PrimaryEdCohorts"],
                "Gender": _subscript_dict["Gender"],
            },
            ["PrimaryEdCohorts", "Gender"],
        ),
        lambda: (
            primary_education_graduates()
            .loc[:, _subscript_dict["PrimaryEdCohorts"]]
            .rename({"Cohorts": "PrimaryEdCohorts"})
            / interval_duration()
        ).transpose("PrimaryEdCohorts", "Gender"),
    ).transpose("Gender", "PrimaryEdCohorts")


@component.add(
    name="Average duration of tertiary education",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "lookup_tertiary_education_duration": 1},
)
def average_duration_of_tertiary_education():
    """
    In current International Standard Classification of Education (ISCED), this is considered 5 years, but assumed to have changed over time, starting from 2 years at the beginning of the century.
    """
    return lookup_tertiary_education_duration(time())


@component.add(
    name="Relative income of skilled variation",
    units="$/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_income_of_skilled_variation():
    return 65


@component.add(
    name="Policy Ramp Primary Education",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fractional1": 1,
        "time": 1,
        "current_year": 2,
        "primary_education_variation": 1,
        "demofelix_target_year": 2,
    },
)
def policy_ramp_primary_education():
    return fractional1() + ramp(
        __data["time"],
        primary_education_variation() / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    )


@component.add(
    name="Policy Ramp Sec Education",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fractional1": 1,
        "time": 1,
        "secondary_education_variation": 1,
        "current_year": 2,
        "demofelix_target_year": 2,
    },
)
def policy_ramp_sec_education():
    return fractional1() + ramp(
        __data["time"],
        secondary_education_variation() / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    )


@component.add(
    name="Fraction of skilled secondary education graduates",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "skilled_fraction_of_secondary_education_graduates_baseline": 1,
        "_smooth_fraction_of_skilled_secondary_education_graduates": 1,
    },
    other_deps={
        "_smooth_fraction_of_skilled_secondary_education_graduates": {
            "initial": {
                "skilled_fraction_of_secondary_education_graduates": 1,
                "skilled_fraction_of_secondary_education_graduates_baseline": 1,
                "current_year": 2,
                "demofelix_target_year": 2,
                "time": 1,
            },
            "step": {
                "skilled_fraction_of_secondary_education_graduates": 1,
                "skilled_fraction_of_secondary_education_graduates_baseline": 1,
                "current_year": 2,
                "demofelix_target_year": 2,
                "time": 1,
            },
        }
    },
)
def fraction_of_skilled_secondary_education_graduates():
    """
    the value was obtained by the model calibration.
    """
    return (
        skilled_fraction_of_secondary_education_graduates_baseline()
        + _smooth_fraction_of_skilled_secondary_education_graduates()
    )


_smooth_fraction_of_skilled_secondary_education_graduates = Smooth(
    lambda: ramp(
        __data["time"],
        (
            skilled_fraction_of_secondary_education_graduates()
            - skilled_fraction_of_secondary_education_graduates_baseline()
        )
        / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    ),
    lambda: 5,
    lambda: ramp(
        __data["time"],
        (
            skilled_fraction_of_secondary_education_graduates()
            - skilled_fraction_of_secondary_education_graduates_baseline()
        )
        / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    ),
    lambda: 1,
    "_smooth_fraction_of_skilled_secondary_education_graduates",
)


@component.add(
    name="Reference relative income of skilled",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "relative_income_of_skilled_variation_baseline": 1,
        "_smooth_reference_relative_income_of_skilled": 1,
    },
    other_deps={
        "_smooth_reference_relative_income_of_skilled": {
            "initial": {
                "relative_income_of_skilled_variation": 1,
                "relative_income_of_skilled_variation_baseline": 1,
                "current_year": 2,
                "demofelix_target_year": 2,
                "time": 1,
            },
            "step": {
                "relative_income_of_skilled_variation": 1,
                "relative_income_of_skilled_variation_baseline": 1,
                "current_year": 2,
                "demofelix_target_year": 2,
                "time": 1,
            },
        }
    },
)
def reference_relative_income_of_skilled():
    return (
        relative_income_of_skilled_variation_baseline()
        + _smooth_reference_relative_income_of_skilled()
    )


_smooth_reference_relative_income_of_skilled = Smooth(
    lambda: ramp(
        __data["time"],
        (
            relative_income_of_skilled_variation()
            - relative_income_of_skilled_variation_baseline()
        )
        / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    ),
    lambda: 5,
    lambda: ramp(
        __data["time"],
        (
            relative_income_of_skilled_variation()
            - relative_income_of_skilled_variation_baseline()
        )
        / (demofelix_target_year() - current_year()),
        current_year(),
        demofelix_target_year(),
    ),
    lambda: 1,
    "_smooth_reference_relative_income_of_skilled",
)


@component.add(
    name="Lifetime Multiplier from Climate Risk",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "_smooth_lifetime_multiplier_from_climate_risk": 1,
        "nvs_100_percent": 1,
    },
    other_deps={
        "_smooth_lifetime_multiplier_from_climate_risk": {
            "initial": {"impact_of_climate_change_on_mortality_fraction": 1},
            "step": {"impact_of_climate_change_on_mortality_fraction": 1},
        }
    },
)
def lifetime_multiplier_from_climate_risk():
    """
    Multiplier to account for changes in life expectancy at birth, depending on the impact of climate change on mortality fractions. Based on the equation that annual average mortality fraction = 1 / LE at birth.
    """
    return 1 / (1 + _smooth_lifetime_multiplier_from_climate_risk() / nvs_100_percent())


_smooth_lifetime_multiplier_from_climate_risk = Smooth(
    lambda: impact_of_climate_change_on_mortality_fraction(),
    lambda: 2,
    lambda: impact_of_climate_change_on_mortality_fraction(),
    lambda: 1,
    "_smooth_lifetime_multiplier_from_climate_risk",
)


@component.add(
    name="Change in Labor Force",
    units="Dmnl",
    subscripts=["Gender", "WorkingAge", "Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"labor_force": 1, "initial_labor_force": 1},
)
def change_in_labor_force():
    return labor_force() / initial_labor_force()


@component.add(
    name="Reference Economy Output",
    units="$/Year",
    subscripts=["Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initialreo": 1,
        "output_in_1900": 1,
        "ratio_of_technology": 1,
        "technology": 1,
        "ratio_of_capital": 1,
        "capital": 1,
        "init_capital": 1,
        "capital_elasticity_output": 2,
        "labor_force_input": 1,
    },
)
def reference_economy_output():
    """
    Output in 1900*Technology*(((Capital/INIT Capital)^Capital Elasticity Output)*(Labor Force input)^(1-Capital Elasticity Output))
    """
    return (
        initialreo()
        * output_in_1900()
        * ratio_of_technology()
        * technology()
        * (ratio_of_capital() * (capital() / init_capital()))
        ** capital_elasticity_output()
        * sum(
            labor_force_input().rename(
                {"Gender": "Gender!", "WorkingAge": "WorkingAge!"}
            ),
            dim=["Gender!", "WorkingAge!"],
        )
        ** (1 - capital_elasticity_output())
    )


@component.add(
    name="Initial Labor Force",
    units="Person",
    subscripts=["Gender", "WorkingAge", "Labor force type"],
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_initial_labor_force": 1},
    other_deps={
        "_initial_initial_labor_force": {"initial": {"labor_force": 1}, "step": {}}
    },
)
def initial_labor_force():
    return _initial_initial_labor_force()


_initial_initial_labor_force = Initial(
    lambda: labor_force(), "_initial_initial_labor_force"
)


@component.add(
    name="Labour Force Female to Male Ratio",
    units="1",
    subscripts=["Cohorts"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"labor_force": 2},
)
def labour_force_female_to_male_ratio():
    value = xr.DataArray(np.nan, {"Cohorts": _subscript_dict["Cohorts"]}, ["Cohorts"])
    value.loc[_subscript_dict["WorkingAge"]] = (
        labor_force().loc["female", :, "skill"].reset_coords(drop=True)
        / labor_force().loc["male", :, "skill"].reset_coords(drop=True)
    ).values
    value.loc[_subscript_dict['"Non-working age"']] = 0
    return value


@component.add(
    name="Gross World Product",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_reo": 1,
        "net_climate_change_impact_on_economy": 1,
        "impact_of_biodiversity_on_economy": 1,
    },
)
def gross_world_product():
    return (
        total_reo()
        * net_climate_change_impact_on_economy()
        * impact_of_biodiversity_on_economy()
    )


@component.add(
    name="Total Labor Force",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"labor_force": 1},
)
def total_labor_force():
    return sum(
        labor_force()
        .loc[:, :, "skill"]
        .reset_coords(drop=True)
        .rename({"Gender": "Gender!", "WorkingAge": "WorkingAge!"}),
        dim=["Gender!", "WorkingAge!"],
    )


@component.add(
    name="Relative incomes of skilled",
    units="$/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_relative_income_of_skilled": 1,
        "adjustments_for_relative_incomes_of_skilled": 1,
    },
)
def relative_incomes_of_skilled():
    """
    Relative incomes of skilled. Need data about the earnings of skilled in each population cohort. Data from OECD datasets. https://stats.oecd.org/Index.aspx?DataSetCode=EAG_EARNINGS 65 is about the average relative incomes of skilled population in OECD countries. Detailed data collection can be found in the file: Data collection from OECD earnings.xlsx
    """
    return (
        reference_relative_income_of_skilled()
        * adjustments_for_relative_incomes_of_skilled()
    )


@component.add(
    name="Primary Education Variation",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def primary_education_variation():
    return xr.DataArray([0.0, 0.0], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Indicative Labor Force Participation Fraction",
    units="Dmnl",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 3},
)
def indicative_labor_force_participation_fraction():
    """
    LF S + RAMP((Labor Force Participation Fraction Variation-LF S)/78, 2022, 2100) Assumptions from the World Bank data. (Labor force participation rate data from WB.xlsx)
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "WorkingAge": _subscript_dict["WorkingAge"],
        },
        ["Gender", "WorkingAge"],
    )
    value.loc[["male"], _subscript_dict['"15 to 24"']] = float(
        np.minimum(float(np.maximum(-0.6039 * (time() - 1989) + 66.308, 10)) / 100, 0.8)
    )
    value.loc[["male"], _subscript_dict['"25 to 54"']] = 0.929
    value.loc[["male"], _subscript_dict['"55 to 64"']] = 0.72
    value.loc[["female"], _subscript_dict['"15 to 24"']] = float(
        np.minimum(
            float(np.maximum(-0.5743 * (time() - 1989) + 49.044, 10)) / 100, 0.62
        )
    )
    value.loc[["female"], _subscript_dict['"55 to 64"']] = float(
        np.maximum(0.1, float(np.minimum(0.3743 * (time() - 1989) + 34.797, 62)) / 100)
    )
    value.loc[["female"], _subscript_dict['"25 to 54"']] = 0.629
    return value


@component.add(
    name="Food supply sugar and oil variation",
    units="kcal/(Person*Day)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def food_supply_sugar_and_oil_variation():
    return 650.2


@component.add(
    name="a GDP HLE",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gdp_hle_impact_variation": 1, "time": 1},
)
def a_gdp_hle():
    """
    value calibrated to the historical data for HLE at birth, taking food effect into account
    """
    return 0.979513 + ramp(
        __data["time"],
        (gdp_hle_impact_variation() * 0.979513 - 0.979513) / 78,
        2022,
        2100,
    )


@component.add(
    name="Reference Daily Caloric Intake",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ci_s": 2, "reference_daily_caloric_intake_variation": 1, "time": 1},
)
def reference_daily_caloric_intake():
    """
    1961 World average, from FAO data - 2194 kcal Calibrated 1672.6 kcal 1970 value, when gdp effect=1:2325
    """
    return ci_s() + ramp(
        __data["time"],
        (reference_daily_caloric_intake_variation() - ci_s()) / 78,
        2022,
        2100,
    )


@component.add(
    name="Skilled fraction of secondary education graduates",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def skilled_fraction_of_secondary_education_graduates():
    return 0.5


@component.add(
    name="GDP HLE Impact variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gdp_hle_impact_variation():
    return 1


@component.add(
    name="Reference supply of sugar and oil calories",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_supply_sugar_and_oil_variation": 1, "time": 1},
)
def reference_supply_of_sugar_and_oil_calories():
    """
    Daily caloric supply per person from sugar, sugar crops, oil crops and vegetable oils in year 2000. Data obtained from FAO Food Balance Sheets. 540
    """
    return 650.2 + ramp(
        __data["time"], (food_supply_sugar_and_oil_variation() - 650.2) / 78, 2022, 2100
    )


@component.add(
    name="Enrollment Rate to Secondary Education",
    units="People/Year",
    subscripts=["Gender", "PrimaryEdCohorts"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "primary_education_graduates": 2,
        "secondary_education_enrollment_fraction": 2,
    },
)
def enrollment_rate_to_secondary_education():
    """
    A fraction of total population rather than primary graduates at 10-14 and 15-19 enroll to secondary education.
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "PrimaryEdCohorts": _subscript_dict["PrimaryEdCohorts"],
        },
        ["Gender", "PrimaryEdCohorts"],
    )
    value.loc[:, ['"10-14"']] = (
        (
            primary_education_graduates().loc[:, '"10-14"'].reset_coords(drop=True)
            * secondary_education_enrollment_fraction()
            .loc[:, '"10-14"']
            .reset_coords(drop=True)
        )
        .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["PrimaryEdButYoungest"]] = 0
    value.loc[:, ['"15-19"']] = (
        (
            primary_education_graduates().loc[:, '"15-19"'].reset_coords(drop=True)
            * secondary_education_enrollment_fraction()
            .loc[:, '"15-19"']
            .reset_coords(drop=True)
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    return value


@component.add(
    name="Secondary Education Enrollment Fraction",
    units="1/Year",
    subscripts=["Gender", "SchoolEnrollment"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_secondary_education_enrollment_fraction": 2,
        "policy_ramp_sec_education": 2,
        "effect_of_gwp_per_capita_on_secondary_enrollment": 2,
    },
)
def secondary_education_enrollment_fraction():
    """
    Fraction of Primary graduates enrolling to Secondary. The ramp function is for implementing scenarios as a fractional increase to 2100. Kept maximum at 1, to avoid enrolment >100%, and not to override the effect of GDP.
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SchoolEnrollment": _subscript_dict["SchoolEnrollment"],
        },
        ["Gender", "SchoolEnrollment"],
    )
    value.loc[:, ['"10-14"']] = (
        np.minimum(
            reference_secondary_education_enrollment_fraction()
            .loc[:, '"10-14"']
            .reset_coords(drop=True)
            * policy_ramp_sec_education()
            * effect_of_gwp_per_capita_on_secondary_enrollment(),
            1,
        )
        .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1)
        .values
    )
    value.loc[:, ['"15-19"']] = (
        (
            (
                reference_secondary_education_enrollment_fraction()
                .loc[:, '"15-19"']
                .reset_coords(drop=True)
                * policy_ramp_sec_education()
            )
            * effect_of_gwp_per_capita_on_secondary_enrollment()
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    return value


@component.add(
    name="Total enrollment rate to secondary education",
    units="People/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_secondary_education": 2},
)
def total_enrollment_rate_to_secondary_education():
    return sum(
        enrollment_rate_to_secondary_education()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        .rename({"Gender": "Gender!"}),
        dim=["Gender!"],
    ) + sum(
        enrollment_rate_to_secondary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        .rename({"Gender": "Gender!"}),
        dim=["Gender!"],
    )


@component.add(
    name="Lookup for the effect of food on HLE",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_lookup_for_the_effect_of_food_on_hle"},
)
def lookup_for_the_effect_of_food_on_hle(x, final_subs=None):
    """
    Inverted U-shaped function estimated based on the Food supply - BMI - HALE relationship across all countries and years. Food supply data from FAO, BMI and HALE data from IHME.
    """
    return _hardcodedlookup_lookup_for_the_effect_of_food_on_hle(x, final_subs)


_hardcodedlookup_lookup_for_the_effect_of_food_on_hle = HardcodedLookups(
    [
        0.09,
        0.19,
        0.28,
        0.37,
        0.46,
        0.56,
        0.65,
        0.74,
        0.83,
        0.93,
        1.02,
        1.11,
        1.2,
        1.3,
        1.39,
        1.48,
        1.57,
        1.67,
        1.76,
        1.85,
        1.94,
        2.04,
        2.13,
        2.22,
        2.31,
        2.41,
        2.5,
        2.59,
        2.69,
        2.78,
        2.87,
        2.96,
    ],
    [
        0.83,
        0.85,
        0.87,
        0.89,
        0.92,
        0.94,
        0.96,
        0.96,
        0.96,
        0.98,
        1.02,
        1.06,
        1.08,
        1.09,
        1.11,
        1.12,
        1.12,
        1.13,
        1.15,
        1.16,
        1.18,
        1.18,
        1.17,
        1.15,
        1.13,
        1.1,
        1.07,
        1.03,
        0.99,
        0.95,
        0.91,
        0.87,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_lookup_for_the_effect_of_food_on_hle",
)


@component.add(
    name="Ratio of sugar and oil supply to its reference value",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "daily_caloric_supply_per_capita": 1,
        "reference_supply_of_sugar_and_oil_calories": 1,
    },
)
def ratio_of_sugar_and_oil_supply_to_its_reference_value():
    return (
        float(daily_caloric_supply_per_capita().loc["OtherCrops"])
        / reference_supply_of_sugar_and_oil_calories()
    )


@component.add(
    name="Effect of food supply on HLE",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ratio_of_sugar_and_oil_supply_to_its_reference_value": 1,
        "lookup_for_the_effect_of_food_on_hle": 1,
    },
)
def effect_of_food_supply_on_hle():
    return lookup_for_the_effect_of_food_on_hle(
        ratio_of_sugar_and_oil_supply_to_its_reference_value()
    )


@component.add(
    name="YoGL health indicator",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"healthy_life_expectancy": 1, "life_expectancy": 1},
)
def yogl_health_indicator():
    return healthy_life_expectancy() / life_expectancy()


@component.add(
    name="Healthy life expectancy at birth",
    units="Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "life_expectancy_at_birth": 1,
        "ratio_of_indicative_hle_to_le": 1,
        "effect_of_le_on_hle": 1,
    },
)
def healthy_life_expectancy_at_birth():
    return life_expectancy_at_birth() * effect_of_le_on_hle(
        ratio_of_indicative_hle_to_le(), {"Gender": ["male", "female"]}
    )


@component.add(
    name="Life expectancy",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"life_expectancy_at_birth": 1, "life_expectancy_age_coefficients": 1},
)
def life_expectancy():
    return life_expectancy_at_birth() * life_expectancy_age_coefficients()


@component.add(
    name="Life expectancy age coefficients",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def life_expectancy_age_coefficients():
    """
    Based on the IHME data, the ratio of LE at age gorups between 1-95+ to the LE at birth has been almost constant (<10% change, <5% change in the age groups below 75) over time between 1990 and 2019. Therefore, we assume that LE is a constrant fraction of LE at birth. These constants are the average of the ratio "LE (gender, age)/ LE at birth (both genders)" over time.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                1.069,
                1.032,
                0.964,
                0.894,
                0.826,
                0.758,
                0.691,
                0.624,
                0.558,
                0.493,
                0.429,
                0.368,
                0.309,
                0.253,
                0.202,
                0.157,
                0.119,
                0.088,
                0.065,
                0.065,
                0.065,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                0.996,
                0.957,
                0.889,
                0.82,
                0.752,
                0.686,
                0.62,
                0.555,
                0.491,
                0.43,
                0.37,
                0.313,
                0.26,
                0.212,
                0.169,
                0.131,
                0.099,
                0.074,
                0.058,
                0.058,
                0.058,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="Effect of GDP pc on HLE",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a_gdp_hle": 1, "ratio_of_gdp_pc_to_the_reference": 1, "b_gdp_hle": 1},
)
def effect_of_gdp_pc_on_hle():
    return a_gdp_hle() * ratio_of_gdp_pc_to_the_reference() ** b_gdp_hle()


@component.add(
    name="HALE coefficient for age",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def hale_coefficient_for_age():
    """
    The ratio of HALE at age gorups between 1-95+ to the HALE at birth has been almost constant (<10% change, <5% change in the age groups below 75) over time between 1990 and 2019. Therefore, we assume that HALE is a constrant fraction of HALE at birth. These constants are the average of the ratio "HALE / HALE at birth" over time.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                1.032,
                0.987,
                0.91,
                0.833,
                0.758,
                0.685,
                0.613,
                0.543,
                0.475,
                0.41,
                0.347,
                0.288,
                0.235,
                0.186,
                0.144,
                0.109,
                0.08,
                0.058,
                0.044,
                0.033,
                0.033,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                1.027,
                0.985,
                0.912,
                0.837,
                0.766,
                0.696,
                0.628,
                0.562,
                0.497,
                0.433,
                0.372,
                0.313,
                0.258,
                0.207,
                0.161,
                0.122,
                0.089,
                0.064,
                0.046,
                0.032,
                0.032,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="Effect of LE on HLE",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_effect_of_le_on_hle"},
)
def effect_of_le_on_hle(x, final_subs=None):
    """
    Fuzzy min formulation to make sure that HLE does not exceed LE
    """
    return _hardcodedlookup_effect_of_le_on_hle(x, final_subs)


_hardcodedlookup_effect_of_le_on_hle = HardcodedLookups(
    [0.0, 0.5, 0.9, 0.95, 1.05, 1.1],
    [0.0, 0.5, 0.9, 0.95, 1.0, 1.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_effect_of_le_on_hle",
)


@component.add(
    name="Ratio of Indicative HLE to LE",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicative_healthy_life_expectancy_at_birth": 1,
        "life_expectancy_at_birth": 1,
    },
)
def ratio_of_indicative_hle_to_le():
    return indicative_healthy_life_expectancy_at_birth() / life_expectancy_at_birth()


@component.add(
    name="b GDP HLE", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def b_gdp_hle():
    """
    value calibrated according to the historical HLE at birth values, taking food effect into account
    """
    return 0.0629177


@component.add(
    name="Healthy life expectancy",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"healthy_life_expectancy_at_birth": 1, "hale_coefficient_for_age": 1},
)
def healthy_life_expectancy():
    return healthy_life_expectancy_at_birth() * hale_coefficient_for_age()


@component.add(
    name="Indicative healthy life expectancy at birth",
    units="Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_healthy_life_expectancy_at_birth": 1,
        "effect_of_food_supply_on_hle": 1,
        "effect_of_gdp_pc_on_hle": 1,
    },
)
def indicative_healthy_life_expectancy_at_birth():
    return (
        reference_healthy_life_expectancy_at_birth()
        * effect_of_food_supply_on_hle()
        * effect_of_gdp_pc_on_hle()
    )


@component.add(
    name="Reference healthy life expectancy at birth",
    units="Year",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_healthy_life_expectancy_at_birth():
    """
    The global average data value in year 2000, reported by Institute for Health Metrics and Evaluation (IHME).
    """
    return xr.DataArray(
        [57.35, 59.84], {"Gender": _subscript_dict["Gender"]}, ["Gender"]
    )


@component.add(
    name="YoGL Education SWITCH",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def yogl_education_switch():
    """
    0 : Fraction of PRIMARY and higher education graduates constitutes the education component of YoGL 1 : Fraction of SECONDARY and higher education graduates constitutes the education component of YoGL
    """
    return 0


@component.add(
    name="Fraction of population with primary education or higher in interval i",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "primary_education_graduates": 1,
        "secondary_education_graduates": 1,
        "tertiary_education_graduates": 1,
        "population_cohorts": 1,
    },
)
def fraction_of_population_with_primary_education_or_higher_in_interval_i():
    return (
        primary_education_graduates()
        + secondary_education_graduates()
        + tertiary_education_graduates()
    ) / population_cohorts()


@component.add(
    name="YoGL Education Indicator",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "yogl_education_switch": 1,
        "fraction_of_population_with_primary_education_or_higher_in_interval_i": 1,
        "fraction_of_population_with_secondary_education_or_higher_in_interval_i": 1,
    },
)
def yogl_education_indicator():
    return if_then_else(
        yogl_education_switch() == 0,
        lambda: fraction_of_population_with_primary_education_or_higher_in_interval_i(),
        lambda: fraction_of_population_with_secondary_education_or_higher_in_interval_i(),
    )


@component.add(
    name="Ratio of MYS to the reference",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mean_years_of_schooling": 1, "mys2000": 1},
)
def ratio_of_mys_to_the_reference():
    """
    Reference average world gross domestic product per capita. A reference value against which the GDP per Capita is compared to calculate the impact of wealth on health.
    """
    return mean_years_of_schooling() / mys2000()


@component.add(
    name="GWP per capita ratio for enrollment",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gwp_per_capita": 1, "gwp_per_capita_2000": 1},
)
def gwp_per_capita_ratio_for_enrollment():
    return gwp_per_capita() / gwp_per_capita_2000()


@component.add(
    name="k LE mys",
    units="Dmnl",
    limits=(0.2, 2.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def k_le_mys():
    """
    Parameter determining intensity of impact of wealth on health services availability. 1.6716
    """
    return 0.44


@component.add(
    name="L food pop",
    units="Dmnl",
    limits=(1.5, 3.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def l_food_pop():
    return 2


@component.add(
    name="Impact of Education on Life Expectancy",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_le_mys": 1,
        "ratio_of_mys_to_the_reference": 1,
        "k_le_mys": 1,
        "x0_le_mys": 1,
    },
)
def impact_of_education_on_life_expectancy():
    """
    Impact of wealth on health services availability.
    """
    return l_le_mys() / (
        1 + float(np.exp(-k_le_mys() * (ratio_of_mys_to_the_reference() - x0_le_mys())))
    )


@component.add(
    name="k food pop",
    units="Dmnl",
    limits=(0.0, 1.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def k_food_pop():
    return 0.2


@component.add(
    name="k LE gdp",
    units="Dmnl",
    limits=(2.0, 3.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def k_le_gdp():
    """
    Parameter determining intensity of impact of wealth on health services availability.
    """
    return 3


@component.add(
    name="L LE gdp",
    units="Dmnl",
    limits=(1.0, 2.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def l_le_gdp():
    """
    1.15384
    """
    return 1.5


@component.add(
    name="Life Expectancy 2000",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def life_expectancy_2000():
    return 65.68


@component.add(
    name="x0 LE mys",
    units="Dmnl",
    limits=(0.2, 1.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def x0_le_mys():
    """
    Parameter determining inflection point of impact of wealth on health services availability.
    """
    return 0.45


@component.add(
    name="Impact of Wealth on Health",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_impact_of_wealth_on_health": 1},
    other_deps={
        "_smooth_impact_of_wealth_on_health": {
            "initial": {"impact_of_gwp_on_health": 1},
            "step": {"impact_of_gwp_on_health": 1, "health_impact_delay": 1},
        }
    },
)
def impact_of_wealth_on_health():
    """
    Impact of health services availability on health taking into account delay.
    """
    return _smooth_impact_of_wealth_on_health()


_smooth_impact_of_wealth_on_health = Smooth(
    lambda: impact_of_gwp_on_health(),
    lambda: health_impact_delay(),
    lambda: impact_of_gwp_on_health(),
    lambda: 1,
    "_smooth_impact_of_wealth_on_health",
)


@component.add(
    name="Ratio of GDP pc to the reference",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gwp_per_capita": 1, "gdp_per_capita_2000": 1},
)
def ratio_of_gdp_pc_to_the_reference():
    """
    Reference average world gross domestic product per capita. A reference value against which the GDP per Capita is compared to calculate the impact of wealth on health.
    """
    return gwp_per_capita() / gdp_per_capita_2000()


@component.add(
    name="Mortality fraction",
    units="1/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "m0": 1,
        "k_mor": 1,
        "l_mor": 1,
        "x0_mor": 1,
        "ratio_of_life_expectancy_to_its_reference_value": 1,
    },
)
def mortality_fraction():
    return m0() + l_mor() / (
        1
        + np.exp(
            -k_mor() * (ratio_of_life_expectancy_to_its_reference_value() - x0_mor())
        )
    )


@component.add(
    name="x0 food pop",
    units="Dmnl",
    limits=(0.0, 1.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def x0_food_pop():
    return 0.8


@component.add(
    name="Real incomes per capita",
    units="$/(Person*Year)",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gwp_per_capita": 1, "real_incomes_parameter": 1},
)
def real_incomes_per_capita():
    return gwp_per_capita() * real_incomes_parameter()


@component.add(
    name="Impact of GWP on Health",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_le_gdp": 1,
        "ratio_of_gdp_pc_to_the_reference": 1,
        "k_le_gdp": 1,
        "x0_le_gdp": 1,
    },
)
def impact_of_gwp_on_health():
    """
    Impact of wealth on health services availability.
    """
    return l_le_gdp() / (
        1
        + float(
            np.exp(-k_le_gdp() * (ratio_of_gdp_pc_to_the_reference() - x0_le_gdp()))
        )
    )


@component.add(
    name="Ratio of life expectancy to its reference value",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"life_expectancy_at_birth": 1, "life_expectancy_normal": 1},
)
def ratio_of_life_expectancy_to_its_reference_value():
    return life_expectancy_at_birth() / life_expectancy_normal()


@component.add(
    name="x0 LE gdp",
    units="Dmnl",
    limits=(0.0, 1.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def x0_le_gdp():
    """
    Parameter determining inflection point of impact of wealth on health services availability.
    """
    return 0.1


@component.add(
    name="L LE mys",
    units="Dmnl",
    limits=(1.0, 2.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def l_le_mys():
    """
    1.44349
    """
    return 1.288


@component.add(
    name="x0 mor",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def x0_mor():
    """
    Original data please see the excel file 'InitialValues.xlsx','Mortality fractions parameters' , 'B5' and 'B11'
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                1.72915,
                -4.60988,
                -5.27428,
                -4.98716,
                -4.67178,
                -4.74645,
                -4.79642,
                -4.53575,
                -4.32483,
                -4.69609,
                -4.6186,
                -4.93752,
                -5.47145,
                -5.59146,
                -6.15601,
                -6.65474,
                -6.35979,
                -11.7132,
                -17.0173,
                -17.403,
                -18.081,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                1.70094,
                -5.73244,
                -5.96389,
                -5.70503,
                -5.24789,
                -5.06949,
                -4.99958,
                -4.94269,
                -4.52645,
                -4.45661,
                -4.44679,
                -4.2957,
                -4.15355,
                -4.09055,
                -4.09125,
                -4.24153,
                -4.339,
                -9.85233,
                -13.5394,
                -15.9673,
                -29.0463,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="L Mor",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def l_mor():
    """
    Original data please see the excel file 'InitialValues.xlsx','Mortality fractions parameters' , 'B3' and 'B9'
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                6.03844e-02,
                4.61801e02,
                9.12577e02,
                1.35528e03,
                1.47798e03,
                1.54542e03,
                1.81552e03,
                1.52019e03,
                1.43606e03,
                2.36577e03,
                2.87879e03,
                3.95270e03,
                3.57025e03,
                2.01686e03,
                1.91046e03,
                9.26379e02,
                1.38198e04,
                3.27625e03,
                7.11867e03,
                1.32140e04,
                9.12106e03,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                7.12513e-02,
                8.38039e02,
                7.35463e02,
                9.34156e02,
                8.38751e02,
                7.53234e02,
                9.15538e02,
                1.41484e03,
                1.23892e03,
                1.27042e03,
                2.16974e03,
                2.23017e03,
                2.11336e03,
                3.00327e03,
                4.50907e03,
                9.52346e03,
                2.10012e04,
                5.87382e03,
                1.24882e04,
                1.67264e04,
                3.04897e03,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="M0",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def m0():
    """
    Original data please see 'InitialValues.xlsx','Mortality fractions parameters' , 'B2' and 'B8'
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                4.71215e-04,
                -1.86121e-04,
                -7.68665e-05,
                1.32963e-04,
                3.36230e-04,
                3.06806e-04,
                3.45889e-04,
                4.52813e-04,
                5.86715e-04,
                5.60399e-04,
                8.92254e-04,
                1.00933e-03,
                -1.15189e-03,
                -4.77844e-03,
                -1.25876e-02,
                -3.25788e-02,
                -1.87939e-02,
                -1.68090e-01,
                -3.31592e-01,
                -2.11468e-01,
                -1.74159e-02,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                -5.84927e-05,
                -7.32123e-04,
                -3.27784e-04,
                -3.33430e-04,
                -2.85692e-04,
                -1.82898e-04,
                -4.56964e-05,
                1.59498e-04,
                4.53778e-04,
                6.04678e-04,
                1.06245e-03,
                1.32983e-03,
                1.33262e-03,
                2.13453e-03,
                3.39337e-03,
                6.23944e-03,
                1.20705e-02,
                -6.68816e-02,
                -1.46500e-01,
                -1.74494e-01,
                -6.61378e-01,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="k mor",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def k_mor():
    """
    Original data please see the excel file 'InitialValues.xlsx','Mortality fractions parameters' , 'B4' and 'B10'
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                -3.44922,
                -1.75539,
                -1.75366,
                -1.84241,
                -1.89654,
                -1.8639,
                -1.85398,
                -1.87063,
                -1.87805,
                -1.7974,
                -1.79172,
                -1.7048,
                -1.50713,
                -1.35385,
                -1.20004,
                -0.994761,
                -1.30636,
                -0.645272,
                -0.481138,
                -0.503644,
                -0.476095,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                -3.45935,
                -1.55494,
                -1.57052,
                -1.62198,
                -1.68503,
                -1.70428,
                -1.7422,
                -1.80566,
                -1.87732,
                -1.85916,
                -1.89039,
                -1.87757,
                -1.83041,
                -1.83335,
                -1.82329,
                -1.82707,
                -1.84615,
                -0.833733,
                -0.652701,
                -0.565132,
                -0.250929,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="Age Specific Fertility Rate",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_age_fertility": 1,
        "ramp_for_fertility_variation": 1,
        "k_age_fertility": 1,
        "total_fertility": 1,
        "x0_age_fertility": 1,
    },
)
def age_specific_fertility_rate():
    """
    Age-specific fertility rate is formulated as a LOGISTIC function, derived from the Total Fertility - Age-Specific Fertility Rate relationship observed in the data from Wittgenstein Center for Population and Human Capital.
    """
    return (l_age_fertility() + ramp_for_fertility_variation()) / (
        1 + np.exp(-k_age_fertility() * (total_fertility() - x0_age_fertility()))
    )


@component.add(
    name="L age fertility",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def l_age_fertility():
    return xr.DataArray(
        [0.39898, 1.18825, 1.56606, 5.07083, 5.07464, 1.07546, 0.0884531],
        {"Fertile": _subscript_dict["Fertile"]},
        ["Fertile"],
    )


@component.add(
    name="Secondary Education Variation",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def secondary_education_variation():
    return xr.DataArray([0.0, 0.0], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="x0 age fertility",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def x0_age_fertility():
    return xr.DataArray(
        [2.35787, 2.27194, 2.77236, 10.0, 10.0, 6.36842, 3.5155],
        {"Fertile": _subscript_dict["Fertile"]},
        ["Fertile"],
    )


@component.add(
    name="Ramp for fertility variation",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"l_fertility_variation": 1, "time": 1},
)
def ramp_for_fertility_variation():
    return ramp(__data["time"], l_fertility_variation(), 2022, 2100)


@component.add(
    name="k age fertility",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def k_age_fertility():
    return xr.DataArray(
        [2.18219, 1.66138, 0.67154, 0.286501, 0.377578, 0.620179, 1.13987],
        {"Fertile": _subscript_dict["Fertile"]},
        ["Fertile"],
    )


@component.add(
    name="Age Specific Fertility Rate LOOKUP",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"total_fertility": 7},
)
def age_specific_fertility_rate_lookup():
    """
    Age-specific fertility rate is formulated as a lookup function, derived from the Total Fertility - Age-Specific Fertility Rate relationship observed in the data from Wittgenstein Center for Population and Human Capital.
    """
    value = xr.DataArray(np.nan, {"Fertile": _subscript_dict["Fertile"]}, ["Fertile"])
    value.loc[['"15-19"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.00231122,
            0.00680381,
            0.0195977,
            0.0531867,
            0.125327,
            0.230181,
            0.320135,
            0.368499,
            0.388196,
            0.395292,
            0.397733,
            0.39856,
            0.398839,
            0.398932,
            0.398964,
        ],
    )
    value.loc[['"20-24"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.0266555,
            0.0594449,
            0.12812,
            0.258001,
            0.46215,
            0.705352,
            0.915218,
            1.05155,
            1.12455,
            1.15962,
            1.1756,
            1.1827,
            1.18583,
            1.18719,
            1.18779,
        ],
    )
    value.loc[['"25-29"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.210634,
            0.279671,
            0.365239,
            0.467472,
            0.584396,
            0.711621,
            0.842765,
            0.970622,
            1.08868,
            1.19234,
            1.27942,
            1.34989,
            1.40521,
            1.44762,
            1.47953,
        ],
    )
    value.loc[['"30-34"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.273372,
            0.312879,
            0.357669,
            0.408321,
            0.465437,
            0.529636,
            0.601533,
            0.681725,
            0.770763,
            0.869128,
            0.977194,
            1.09519,
            1.22319,
            1.36101,
            1.50829,
        ],
    )
    value.loc[['"35-39"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.113701,
            0.13669,
            0.164174,
            0.196963,
            0.235986,
            0.282292,
            0.337053,
            0.401546,
            0.477137,
            0.565236,
            0.667241,
            0.784453,
            0.917966,
            1.06854,
            1.23647,
        ],
    )
    value.loc[['"40-44"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.0203251,
            0.0275252,
            0.0371859,
            0.0500752,
            0.0671434,
            0.0895213,
            0.118481,
            0.155333,
            0.201238,
            0.25692,
            0.322328,
            0.396327,
            0.476563,
            0.559657,
            0.641715,
        ],
    )
    value.loc[['"45-49"']] = np.interp(
        total_fertility(),
        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        [
            0.00157971,
            0.00275537,
            0.00475806,
            0.00807914,
            0.0133486,
            0.0211505,
            0.0315942,
            0.043836,
            0.0561379,
            0.0667288,
            0.0746992,
            0.0801109,
            0.0835335,
            0.0856019,
            0.0868177,
        ],
    )
    return value


@component.add(
    name='"Population 65+"',
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def population_65():
    return sum(
        population_cohorts()
        .loc[:, _subscript_dict['"65+"']]
        .rename({"Gender": "Gender!", "Cohorts": '"65+"!'}),
        dim=["Gender!", '"65+"!'],
    )


@component.add(
    name='"Population 0-19"',
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def population_019():
    return sum(
        population_cohorts()
        .loc[:, _subscript_dict['"0 to 19"']]
        .rename({"Gender": "Gender!", "Cohorts": '"0 to 19"!'}),
        dim=["Gender!", '"0 to 19"!'],
    )


@component.add(
    name='"Population 20-39"',
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def population_2039():
    return sum(
        population_cohorts()
        .loc[:, _subscript_dict['"20 to 39"']]
        .rename({"Gender": "Gender!", "Cohorts": '"20 to 39"!'}),
        dim=["Gender!", '"20 to 39"!'],
    )


@component.add(
    name='"Population 40-64"',
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def population_4064():
    return sum(
        population_cohorts()
        .loc[:, _subscript_dict['"40 to 64"']]
        .rename({"Gender": "Gender!", "Cohorts": '"40 to 64"!'}),
        dim=["Gender!", '"40 to 64"!'],
    )


@component.add(
    name="Future fertility GDP",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def future_fertility_gdp():
    return 0


@component.add(
    name="Future fertility MYS",
    units="Dmnl",
    limits=(-1.0, 1.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def future_fertility_mys():
    return 0


@component.add(
    name="L0 edu Fer",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"future_fertility_mys": 1, "time": 1},
)
def l0_edu_fer():
    return 0.8 + ramp(__data["time"], future_fertility_mys() / 78, 2022, 2100)


@component.add(
    name="L0 gdp Fer",
    units="Dmnl",
    limits=(-1.0, 1.0, 0.05),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"future_fertility_gdp": 1, "time": 1},
)
def l0_gdp_fer():
    return 0.8 + ramp(__data["time"], future_fertility_gdp() / 78, 2022, 2100)


@component.add(
    name="Death Rate of Survivors",
    units="People/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"survivors_in_interval_x_x5": 1, "mortality_fraction": 1, "time": 1},
)
def death_rate_of_survivors():
    """
    Possible to use either the simulated mortality fractions, or those historical or projected by the UN
    """
    return step(
        __data["time"], survivors_in_interval_x_x5() * mortality_fraction(), 2000
    )


@component.add(
    name="Death Rate",
    units="People/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1, "mortality_fraction": 1},
)
def death_rate():
    return population_cohorts() * mortality_fraction()


@component.add(
    name="Probability of dying in the interval",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "interval_duration": 2,
        "mortality_fraction": 2,
        "average_time_lived_in_the_age_interval": 1,
    },
)
def probability_of_dying_in_the_interval():
    """
    Note that for a_x, we use the simulated value, not the n/2 assumption.
    """
    return (
        interval_duration()
        * mortality_fraction()
        / (
            1
            + (interval_duration() - average_time_lived_in_the_age_interval())
            * mortality_fraction()
        )
    )


@component.add(
    name="Mean value of the lognormal distribution of consumption or income",
    units="$/(Person*Year)",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "real_incomes_per_capita": 1,
        "standard_deviation_of_the_lognormal_distribution_of_consumption": 1,
    },
)
def mean_value_of_the_lognormal_distribution_of_consumption_or_income():
    return (
        np.log(real_incomes_per_capita())
        - standard_deviation_of_the_lognormal_distribution_of_consumption() ** 2 / 2
    )


@component.add(
    name="Birth Rate",
    units="People/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "birth_gender_fraction": 1,
        "age_specific_fertility_rate": 1,
        "population_cohorts": 1,
        "interval_duration": 1,
    },
)
def birth_rate():
    """
    Formulation with total fertility: Birth Gender Fraction[Gender]*Total Fertility*Fertile Population/Reproductive Lifetime
    """
    return (
        birth_gender_fraction()
        * sum(
            age_specific_fertility_rate().rename({"Fertile": "Fertile!"})
            * population_cohorts()
            .loc["female", _subscript_dict["Fertile"]]
            .reset_coords(drop=True)
            .rename({"Cohorts": "Fertile!"}),
            dim=["Fertile!"],
        )
        / interval_duration()
    )


@component.add(
    name="x0 gdp fer", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def x0_gdp_fer():
    return 0.795


@component.add(
    name="k edu fer", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def k_edu_fer():
    return -1.56


@component.add(
    name="Impact of GDP on Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l0_gdp_fer": 1,
        "x0_gdp_fer": 1,
        "k_gdp_fer": 1,
        "gwp_per_capita": 1,
        "l_gdp_fer": 1,
        "gdp_per_capita_2000": 1,
    },
)
def impact_of_gdp_on_fertility():
    """
    Decreasing logistic function of which parameters are estimated from the global average GDP per capita - Total Fertility relationship, also considering the impact of Mean Years of Schooling.
    """
    return l0_gdp_fer() + l_gdp_fer() / (
        1
        + float(
            np.exp(
                k_gdp_fer() * (gwp_per_capita() / gdp_per_capita_2000() - x0_gdp_fer())
            )
        )
    )


@component.add(
    name="L edu fer", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def l_edu_fer():
    return 0.86261


@component.add(
    name="k gdp fer", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def k_gdp_fer():
    return 5


@component.add(
    name="MYS2000", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def mys2000():
    return 7.38


@component.add(
    name="L gdp fer", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def l_gdp_fer():
    return 0.554


@component.add(
    name="Impact of Education on Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l0_edu_fer": 1,
        "l_edu_fer": 1,
        "mean_years_of_schooling": 1,
        "x0_edu_fer": 1,
        "mys2000": 1,
        "k_edu_fer": 1,
    },
)
def impact_of_education_on_fertility():
    """
    Decreasong logistic function of which parameters are estimated from the global average MYS - Total Fertility relationship, also considering the impact of GDP.
    """
    return l0_edu_fer() + l_edu_fer() / (
        1
        + float(
            np.exp(
                -k_edu_fer() * (mean_years_of_schooling() / mys2000() - x0_edu_fer())
            )
        )
    )


@component.add(
    name="x0 edu fer", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def x0_edu_fer():
    return 0.6579


@component.add(
    name="Population fraction with secondary and higher education",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_secondary_education_graduates": 1,
        "total_tertiary_education_graduates": 1,
        "population": 1,
    },
)
def population_fraction_with_secondary_and_higher_education():
    return (
        total_secondary_education_graduates() + total_tertiary_education_graduates()
    ) / population()


@component.add(
    name="Average duration of primary education",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_average_duration_of_primary_education": 1},
    other_deps={
        "_smooth_average_duration_of_primary_education": {
            "initial": {"time": 1, "lookup_primary_education_duration": 1},
            "step": {"time": 1, "lookup_primary_education_duration": 1},
        }
    },
)
def average_duration_of_primary_education():
    """
    In current International Standard Classification of Education (ISCED), this is considered 6 years, but assumed to have changed over time, starting from 2 years at the beginning of the century. Smoothed to avoid sharpe changes.
    """
    return _smooth_average_duration_of_primary_education()


_smooth_average_duration_of_primary_education = Smooth(
    lambda: lookup_primary_education_duration(time()),
    lambda: 1,
    lambda: lookup_primary_education_duration(time()),
    lambda: 1,
    "_smooth_average_duration_of_primary_education",
)


@component.add(
    name="Average duration of secondary education",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_average_duration_of_secondary_education": 1},
    other_deps={
        "_smooth_average_duration_of_secondary_education": {
            "initial": {"time": 1, "lookup_secondary_education_duration": 1},
            "step": {"time": 1, "lookup_secondary_education_duration": 1},
        }
    },
)
def average_duration_of_secondary_education():
    """
    In current International Standard Classification of Education (ISCED), this is considered 6 years, but assumed to have changed over time, starting from 2 years at the beginning of the century. Smoothed to avoid sharpe changes. More information is needed!!!
    """
    return _smooth_average_duration_of_secondary_education()


_smooth_average_duration_of_secondary_education = Smooth(
    lambda: lookup_secondary_education_duration(time()),
    lambda: 1,
    lambda: lookup_secondary_education_duration(time()),
    lambda: 1,
    "_smooth_average_duration_of_secondary_education",
)


@component.add(
    name="Lookup secondary education duration",
    units="Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_lookup_secondary_education_duration"},
)
def lookup_secondary_education_duration(x, final_subs=None):
    return _hardcodedlookup_lookup_secondary_education_duration(x, final_subs)


_hardcodedlookup_lookup_secondary_education_duration = HardcodedLookups(
    [1900.0, 1950.0, 2000.0, 2020.0],
    [2.0, 2.2, 4.0, 5.5],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_lookup_secondary_education_duration",
)


@component.add(
    name="Mean Years of Schooling",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_duration_of_primary_education": 3,
        "primary_education_graduates": 1,
        "average_duration_of_secondary_education": 2,
        "secondary_education_graduates": 1,
        "tertiary_education_graduates": 1,
        "average_duration_of_tertiary_education": 1,
        "population_cohorts": 1,
    },
)
def mean_years_of_schooling():
    return (
        average_duration_of_primary_education()
        * sum(
            primary_education_graduates()
            .loc[:, _subscript_dict["MYS"]]
            .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
            dim=["Gender!", "MYS!"],
        )
        + (
            average_duration_of_secondary_education()
            + average_duration_of_primary_education()
        )
        * sum(
            secondary_education_graduates()
            .loc[:, _subscript_dict["MYS"]]
            .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
            dim=["Gender!", "MYS!"],
        )
        + (
            average_duration_of_tertiary_education()
            + average_duration_of_secondary_education()
            + average_duration_of_primary_education()
        )
        * sum(
            tertiary_education_graduates()
            .loc[:, _subscript_dict["MYS"]]
            .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
            dim=["Gender!", "MYS!"],
        )
    ) / sum(
        population_cohorts()
        .loc[:, _subscript_dict["MYS"]]
        .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
        dim=["Gender!", "MYS!"],
    )


@component.add(
    name="Fertile Population",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def fertile_population():
    return sum(
        population_cohorts()
        .loc["female", _subscript_dict["Fertile"]]
        .reset_coords(drop=True)
        .rename({"Cohorts": "Fertile!"}),
        dim=["Fertile!"],
    )


@component.add(
    name="Lookup primary education duration",
    units="Year",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_lookup_primary_education_duration"},
)
def lookup_primary_education_duration(x, final_subs=None):
    """
    This is an estimate aligned with Mean Years of Schooling, and rough information such as a school year was less than 150 days in the US in 1905. More information is needed for the historucal educaion duration!!!
    """
    return _hardcodedlookup_lookup_primary_education_duration(x, final_subs)


_hardcodedlookup_lookup_primary_education_duration = HardcodedLookups(
    [1900.0, 1950.0, 2000.0, 2020.0],
    [2.0, 3.5, 5.0, 6.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_lookup_primary_education_duration",
)


@component.add(
    name="Adjustments for relative incomes of skilled",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def adjustments_for_relative_incomes_of_skilled():
    """
    to adjust the relative incomes of skilled labor force of each population group Two assumptions: (1) the relationship between income and age tends to exhibit an inverted-U-shape pattern. Incomes rise with age and then drop slightly as taxpayers enter retirement. (2) Male has more incomes than female in the same age group.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], _subscript_dict["Childhood"]] = 0.77
    value.loc[["male"], _subscript_dict['"15 to 39"']] = 1.05
    value.loc[["male"], _subscript_dict['"40 to 64"']] = 1.2
    value.loc[["male"], _subscript_dict['"65+"']] = 1.22
    value.loc[["female"], _subscript_dict["Childhood"]] = 0.77
    value.loc[["female"], _subscript_dict['"15 to 39"']] = 1
    value.loc[["female"], _subscript_dict['"40 to 64"']] = 1.07
    value.loc[["female"], _subscript_dict['"65+"']] = 1.05
    return value


@component.add(
    name="Real incomes parameter",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def real_incomes_parameter():
    """
    to obtain the real earnings per capita of each group instead of relative incomes by model calibration. Two assumptions: (1) the relationship between income and age tends to exhibit an inverted-U-shape pattern. Incomes rise with age and then drop slightly as taxpayers enter retirement. (2) Male has more incomes than female in the same age group.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], _subscript_dict["Childhood"]] = 0.18842
    value.loc[["male"], _subscript_dict['"15 to 39"']] = 0.195
    value.loc[["male"], _subscript_dict['"40 to 64"']] = 0.21
    value.loc[["male"], _subscript_dict['"65+"']] = 0.19
    value.loc[["female"], _subscript_dict["Childhood"]] = 0.18
    value.loc[["female"], _subscript_dict['"15 to 39"']] = 0.156082
    value.loc[["female"], _subscript_dict['"40 to 64"']] = 0.18117
    value.loc[["female"], _subscript_dict['"65+"']] = 0.16
    return value


@component.add(
    name="Prevalence of the state of the interest",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def prevalence_of_the_state_of_the_interest():
    """
    Global POPULATION-WEIGHTED Average YoGL for each age interval and gender. Taken from the YoGL calculations of the PNAS paper.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                0.0,
                0.0,
                0.0,
                0.8492,
                0.8725,
                0.8314,
                0.84,
                0.8185,
                0.7859,
                0.7643,
                0.736,
                0.7207,
                0.6753,
                0.6281,
                0.6159,
                0.5945,
                0.4599,
                0.4599,
                0.4599,
                0.4599,
                0.4599,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                0.0,
                0.0,
                0.0,
                0.8597,
                0.8555,
                0.81,
                0.7732,
                0.7485,
                0.7082,
                0.6635,
                0.6225,
                0.5957,
                0.5475,
                0.5065,
                0.4597,
                0.4755,
                0.2852,
                0.2852,
                0.2852,
                0.2852,
                0.2852,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="Prevalence SWITCH", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def prevalence_switch():
    """
    If 0 : Constant, data-based prevalence values If 1 : Dynamic, model-generated prevalence values
    """
    return 1


@component.add(
    name="Prevalence",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "prevalence_switch": 1,
        "prevalence_of_the_state_of_the_interest": 1,
        "prevalence_modelbased": 1,
    },
)
def prevalence():
    return if_then_else(
        prevalence_switch() == 0,
        lambda: prevalence_of_the_state_of_the_interest(),
        lambda: prevalence_modelbased(),
    )


@component.add(
    name="Person years of interest pLi",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"person_years_lived_in_interval_i": 1, "prevalence": 1},
)
def person_years_of_interest_pli():
    return person_years_lived_in_interval_i() * prevalence()


@component.add(
    name="Gini2",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "skilled_population": 1,
        "relative_incomes_of_skilled": 2,
        "unskilled_population": 1,
        "relative_incomes_of_unskilled": 1,
        "population_cohorts": 1,
        "total_relative_incomes": 1,
    },
)
def gini2():
    """
    if using the shares variables, the equation is: 1-(population share of skilled*income share of skilled+population share of unskilled*(income share of skilled+1))
    """
    return 1 - (
        skilled_population() * relative_incomes_of_skilled()
        + (2 * relative_incomes_of_skilled() + relative_incomes_of_unskilled())
        * unskilled_population()
    ) / (population_cohorts() * total_relative_incomes())


@component.add(
    name="Relative incomes of unskilled",
    units="$/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_relative_incomes": 2, "relative_incomes_of_skilled": 2},
)
def relative_incomes_of_unskilled():
    """
    Relative incomes of unskilled. Need data about the earnings of unskilled population in each population cohort. Data from OECD datasets. https://stats.oecd.org/Index.aspx?DataSetCode=EAG_EARNINGS Detailed data collection can be found in the file: Data collection from OECD earnings.xlsx
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = (
        (
            total_relative_incomes().loc["male", :].reset_coords(drop=True)
            - relative_incomes_of_skilled().loc["male", :].reset_coords(drop=True)
        )
        .expand_dims({"Gender": ["male"]}, 0)
        .values
    )
    value.loc[["female"], :] = (
        (
            total_relative_incomes().loc["female", :].reset_coords(drop=True)
            - relative_incomes_of_skilled().loc["female", :].reset_coords(drop=True)
        )
        .expand_dims({"Gender": ["female"]}, 0)
        .values
    )
    return value


@component.add(
    name="Skilled population",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "tertiary_education_graduates": 1,
        "secondary_education_graduates": 1,
        "fraction_of_skilled_secondary_education_graduates": 1,
    },
)
def skilled_population():
    return (
        tertiary_education_graduates()
        + fraction_of_skilled_secondary_education_graduates()
        * secondary_education_graduates()
    )


@component.add(
    name="Global poverty rate",
    units="percent",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"poverty_rate": 1, "population_cohorts": 2},
)
def global_poverty_rate():
    """
    Calibrated with historical data from World Bank: https://data.worldbank.org/indicator/SI.POV.DDAY
    """
    return sum(
        poverty_rate()
        .loc[:, _subscript_dict["SecondaryEdCohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "SecondaryEdCohorts!"})
        * population_cohorts()
        .loc[:, _subscript_dict["SecondaryEdCohorts"]]
        .rename({"Gender": "Gender!", "Cohorts": "SecondaryEdCohorts!"}),
        dim=["Gender!", "SecondaryEdCohorts!"],
    ) / sum(
        population_cohorts().rename({"Gender": "Gender!", "Cohorts": "Cohorts!"}),
        dim=["Gender!", "Cohorts!"],
    )


@component.add(
    name="Inverse table for standard normal distribution",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_inverse_table_for_standard_normal_distribution"
    },
)
def inverse_table_for_standard_normal_distribution(x, final_subs=None):
    return _hardcodedlookup_inverse_table_for_standard_normal_distribution(
        x, final_subs
    )


_hardcodedlookup_inverse_table_for_standard_normal_distribution = HardcodedLookups(
    [
        0.5,
        0.504,
        0.508,
        0.512,
        0.516,
        0.5199,
        0.5239,
        0.5279,
        0.5319,
        0.5359,
        0.5398,
        0.5438,
        0.5478,
        0.5517,
        0.5557,
        0.5596,
        0.5636,
        0.5675,
        0.5714,
        0.5753,
        0.5793,
        0.5832,
        0.5871,
        0.591,
        0.5948,
        0.5987,
        0.6026,
        0.6064,
        0.6103,
        0.6141,
        0.6179,
        0.6217,
        0.6255,
        0.6293,
        0.6331,
        0.6368,
        0.6406,
        0.6443,
        0.648,
        0.6517,
        0.6554,
        0.6591,
        0.6628,
        0.6664,
        0.67,
        0.6736,
        0.6772,
        0.6808,
        0.6844,
        0.6879,
        0.6915,
        0.695,
        0.6985,
        0.7019,
        0.7054,
        0.7088,
        0.7123,
        0.7157,
        0.719,
        0.7224,
        0.7257,
        0.7291,
        0.7324,
        0.7357,
        0.7389,
        0.7422,
        0.7454,
        0.7486,
        0.7517,
        0.7549,
        0.758,
        0.7611,
        0.7642,
        0.7673,
        0.7703,
        0.7734,
        0.7764,
        0.7794,
        0.7823,
        0.7852,
        0.7881,
        0.791,
        0.7939,
        0.7967,
        0.7995,
        0.8023,
        0.8051,
        0.8078,
        0.8106,
        0.8133,
        0.8159,
        0.8186,
        0.8212,
        0.8238,
        0.8264,
        0.8289,
        0.834,
        0.8355,
        0.8365,
        0.8389,
        0.8413,
        0.8438,
        0.8461,
        0.8485,
        0.8508,
        0.8531,
        0.8554,
        0.8577,
        0.8599,
        0.8621,
        0.8643,
        0.8665,
        0.8686,
        0.8708,
        0.8729,
        0.8749,
        0.877,
        0.879,
        0.881,
        0.883,
        0.8849,
        0.8869,
        0.8888,
        0.8907,
        0.8925,
        0.8944,
        0.8962,
        0.898,
        0.8997,
        0.9015,
        0.9032,
        0.9049,
        0.9066,
        0.9082,
        0.9099,
        0.9115,
        0.9131,
        0.9147,
        0.9162,
        0.9177,
        0.9192,
        0.9207,
        0.9222,
        0.9236,
        0.9251,
        0.9265,
        0.9279,
        0.9292,
        0.9306,
        0.9319,
        0.9332,
        0.9345,
        0.9357,
        0.937,
        0.9382,
        0.9394,
        0.9406,
        0.9418,
        0.943,
        0.9441,
        0.9452,
        0.9463,
        0.9474,
        0.9484,
        0.9495,
        0.9505,
        0.9515,
        0.9525,
        0.9535,
        0.9535,
        0.9554,
        0.9564,
        0.9573,
        0.9582,
        0.9591,
        0.9599,
        0.9608,
        0.9616,
        0.9625,
        0.9633,
        0.9641,
        0.9648,
        0.9656,
        0.9664,
        0.9672,
        0.9678,
        0.9686,
        0.9693,
        0.97,
        0.9706,
        0.9713,
        0.9719,
        0.9726,
        0.9732,
        0.9738,
        0.9744,
        0.975,
        0.9756,
        0.9762,
        0.9767,
        0.9772,
        0.9778,
        0.9783,
        0.9788,
        0.9793,
        0.9798,
        0.9803,
        0.9808,
        0.9812,
        0.9817,
        0.9821,
        0.9826,
        0.983,
        0.9834,
        0.9838,
        0.9842,
        0.9846,
        0.985,
        0.9854,
        0.9857,
        0.9861,
        0.9864,
        0.9868,
        0.9871,
        0.9874,
        0.9878,
        0.9881,
        0.9884,
        0.9887,
        0.989,
        0.9893,
        0.9896,
        0.9898,
        0.9901,
        0.9904,
        0.9906,
        0.9909,
        0.9911,
        0.9913,
        0.9916,
        0.9918,
        0.992,
        0.9922,
        0.9925,
        0.9927,
        0.9929,
        0.9931,
        0.9932,
        0.9934,
        0.9936,
        0.9938,
        0.994,
        0.9941,
        0.9943,
        0.9945,
        0.9946,
        0.9948,
        0.9949,
        0.9951,
        0.9952,
        0.9953,
        0.9955,
        0.9956,
        0.9957,
        0.9959,
        0.996,
        0.9961,
        0.9962,
        0.9963,
        0.9964,
        0.9965,
        0.9966,
        0.9967,
        0.9968,
        0.9969,
        0.997,
        0.9971,
        0.9972,
        0.9973,
        0.9974,
        0.9974,
        0.9975,
        0.9976,
        0.9977,
        0.9977,
        0.9978,
        0.9979,
        0.9979,
        0.998,
        0.9981,
        0.9981,
        0.9982,
        0.9982,
        0.9983,
        0.9984,
        0.9984,
        0.9985,
        0.9985,
        0.9986,
        0.9986,
        0.9987,
        0.999,
        0.9993,
        0.9995,
        0.9997,
        0.9998,
        0.9998,
        0.9999,
        0.9999,
        1.0,
        1.0,
        1.0,
    ],
    [
        0.0,
        0.01,
        0.02,
        0.03,
        0.04,
        0.05,
        0.06,
        0.07,
        0.08,
        0.09,
        0.1,
        0.11,
        0.12,
        0.13,
        0.14,
        0.15,
        0.16,
        0.17,
        0.18,
        0.19,
        0.2,
        0.21,
        0.22,
        0.23,
        0.24,
        0.25,
        0.26,
        0.27,
        0.28,
        0.29,
        0.3,
        0.31,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36,
        0.37,
        0.38,
        0.39,
        0.4,
        0.41,
        0.42,
        0.43,
        0.44,
        0.45,
        0.46,
        0.47,
        0.48,
        0.49,
        0.5,
        0.51,
        0.52,
        0.53,
        0.54,
        0.55,
        0.56,
        0.57,
        0.58,
        0.59,
        0.6,
        0.61,
        0.62,
        0.63,
        0.64,
        0.65,
        0.66,
        0.67,
        0.68,
        0.69,
        0.7,
        0.71,
        0.72,
        0.73,
        0.74,
        0.75,
        0.76,
        0.77,
        0.78,
        0.79,
        0.8,
        0.81,
        0.82,
        0.83,
        0.84,
        0.85,
        0.86,
        0.87,
        0.88,
        0.89,
        0.9,
        0.91,
        0.92,
        0.93,
        0.94,
        0.95,
        0.97,
        0.96,
        0.98,
        0.99,
        1.0,
        1.01,
        1.02,
        1.03,
        1.04,
        1.05,
        1.06,
        1.07,
        1.08,
        1.09,
        1.1,
        1.11,
        1.12,
        1.13,
        1.14,
        1.15,
        1.16,
        1.17,
        1.18,
        1.19,
        1.2,
        1.21,
        1.22,
        1.23,
        1.24,
        1.25,
        1.26,
        1.27,
        1.28,
        1.29,
        1.3,
        1.31,
        1.32,
        1.33,
        1.34,
        1.35,
        1.36,
        1.37,
        1.38,
        1.39,
        1.4,
        1.41,
        1.42,
        1.43,
        1.44,
        1.45,
        1.46,
        1.47,
        1.48,
        1.49,
        1.5,
        1.51,
        1.52,
        1.53,
        1.54,
        1.55,
        1.56,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.65,
        1.66,
        1.67,
        1.68,
        1.69,
        1.7,
        1.71,
        1.72,
        1.73,
        1.74,
        1.75,
        1.76,
        1.77,
        1.78,
        1.79,
        1.8,
        1.81,
        1.82,
        1.83,
        1.84,
        1.85,
        1.86,
        1.87,
        1.88,
        1.89,
        1.9,
        1.91,
        1.92,
        1.93,
        1.94,
        1.95,
        1.96,
        1.97,
        1.98,
        1.99,
        2.0,
        2.01,
        2.02,
        2.03,
        2.04,
        2.05,
        2.06,
        2.07,
        2.08,
        2.09,
        2.1,
        2.11,
        2.12,
        2.13,
        2.14,
        2.15,
        2.16,
        2.17,
        2.18,
        2.19,
        2.2,
        2.21,
        2.22,
        2.23,
        2.24,
        2.25,
        2.26,
        2.27,
        2.28,
        2.29,
        2.3,
        2.31,
        2.32,
        2.33,
        2.34,
        2.35,
        2.36,
        2.37,
        2.38,
        2.39,
        2.4,
        2.41,
        2.42,
        2.43,
        2.44,
        2.45,
        2.46,
        2.47,
        2.48,
        2.49,
        2.5,
        2.51,
        2.52,
        2.53,
        2.54,
        2.55,
        2.56,
        2.57,
        2.58,
        2.59,
        2.6,
        2.61,
        2.62,
        2.63,
        2.64,
        2.65,
        2.66,
        2.67,
        2.68,
        2.69,
        2.7,
        2.71,
        2.72,
        2.73,
        2.74,
        2.75,
        2.76,
        2.77,
        2.78,
        2.8,
        2.79,
        2.81,
        2.82,
        2.84,
        2.83,
        2.85,
        2.86,
        2.87,
        2.88,
        2.9,
        2.89,
        2.92,
        2.91,
        2.93,
        2.94,
        2.95,
        2.96,
        2.97,
        2.98,
        2.99,
        3.0,
        3.01,
        3.02,
        3.03,
        3.04,
        3.06,
        3.05,
        3.08,
        3.07,
        3.09,
        5.0,
        4.0,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_inverse_table_for_standard_normal_distribution",
)


@component.add(
    name="Total relative incomes",
    units="$/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def total_relative_incomes():
    """
    Relative total incomes of skilled and unskilled.
    """
    return xr.DataArray(
        100,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )


@component.add(
    name="Consumption or income of a person per day",
    units="$/(Person*Day)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def consumption_or_income_of_a_person_per_day():
    """
    $2.15 a day (2017PPP) $1.9 a day (2011PPP)
    """
    return 2.15


@component.add(
    name="Standard deviation of the lognormal distribution of consumption",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gini_coefficient": 1,
        "inverse_table_for_standard_normal_distribution": 1,
    },
)
def standard_deviation_of_the_lognormal_distribution_of_consumption():
    return float(np.sqrt(2)) * inverse_table_for_standard_normal_distribution(
        (gini_coefficient() + 1) / 2,
        {
            "Gender": ["male", "female"],
            "Cohorts": [
                '"0-4"',
                '"5-9"',
                '"10-14"',
                '"15-19"',
                '"20-24"',
                '"25-29"',
                '"30-34"',
                '"35-39"',
                '"40-44"',
                '"45-49"',
                '"50-54"',
                '"55-59"',
                '"60-64"',
                '"65-69"',
                '"70-74"',
                '"75-79"',
                '"80-84"',
                '"85-89"',
                '"90-94"',
                '"95-99"',
                '"100+"',
            ],
        },
    )


@component.add(
    name="Gini1",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unskilled_population": 1,
        "relative_incomes_of_unskilled": 2,
        "relative_incomes_of_skilled": 1,
        "skilled_population": 1,
        "population_cohorts": 1,
        "total_relative_incomes": 1,
    },
)
def gini1():
    """
    if using the shares variables, the equation is: 1-(population share of unskilled*income share of unskilled+population share of skilled*(income share of unskilled+1))
    """
    return 1 - (
        unskilled_population() * relative_incomes_of_unskilled()
        + (2 * relative_incomes_of_unskilled() + relative_incomes_of_skilled())
        * skilled_population()
    ) / (population_cohorts() * total_relative_incomes())


@component.add(
    name='"lnPL-mean"',
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "poverty_line": 1,
        "mean_value_of_the_lognormal_distribution_of_consumption_or_income": 1,
    },
)
def lnplmean():
    return (
        float(np.log(poverty_line()))
        - mean_value_of_the_lognormal_distribution_of_consumption_or_income()
    )


@component.add(
    name="Poverty line",
    units="$/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"consumption_or_income_of_a_person_per_day": 1, "days_in_year": 1},
)
def poverty_line():
    return consumption_or_income_of_a_person_per_day() * days_in_year()


@component.add(
    name="Table for standard normal distribution",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_for_standard_normal_distribution"
    },
)
def table_for_standard_normal_distribution(x, final_subs=None):
    return _hardcodedlookup_table_for_standard_normal_distribution(x, final_subs)


_hardcodedlookup_table_for_standard_normal_distribution = HardcodedLookups(
    [
        0.0,
        0.01,
        0.02,
        0.03,
        0.04,
        0.05,
        0.06,
        0.07,
        0.08,
        0.09,
        0.1,
        0.11,
        0.12,
        0.13,
        0.14,
        0.15,
        0.16,
        0.17,
        0.18,
        0.19,
        0.2,
        0.21,
        0.22,
        0.23,
        0.24,
        0.25,
        0.26,
        0.27,
        0.28,
        0.29,
        0.3,
        0.31,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36,
        0.37,
        0.38,
        0.39,
        0.4,
        0.41,
        0.42,
        0.43,
        0.44,
        0.45,
        0.46,
        0.47,
        0.48,
        0.49,
        0.5,
        0.51,
        0.52,
        0.53,
        0.54,
        0.55,
        0.56,
        0.57,
        0.58,
        0.59,
        0.6,
        0.61,
        0.62,
        0.63,
        0.64,
        0.65,
        0.66,
        0.67,
        0.68,
        0.69,
        0.7,
        0.71,
        0.72,
        0.73,
        0.74,
        0.75,
        0.76,
        0.77,
        0.78,
        0.79,
        0.8,
        0.81,
        0.82,
        0.83,
        0.84,
        0.85,
        0.86,
        0.87,
        0.88,
        0.89,
        0.9,
        0.91,
        0.92,
        0.93,
        0.94,
        0.95,
        0.96,
        0.97,
        0.98,
        0.99,
        1.0,
        1.01,
        1.02,
        1.03,
        1.04,
        1.05,
        1.06,
        1.07,
        1.08,
        1.09,
        1.1,
        1.11,
        1.12,
        1.13,
        1.14,
        1.15,
        1.16,
        1.17,
        1.18,
        1.19,
        1.2,
        1.21,
        1.22,
        1.23,
        1.24,
        1.25,
        1.26,
        1.27,
        1.28,
        1.29,
        1.3,
        1.31,
        1.32,
        1.33,
        1.34,
        1.35,
        1.36,
        1.37,
        1.38,
        1.39,
        1.4,
        1.41,
        1.42,
        1.43,
        1.44,
        1.45,
        1.46,
        1.47,
        1.48,
        1.49,
        1.5,
        1.51,
        1.52,
        1.53,
        1.54,
        1.55,
        1.56,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.65,
        1.66,
        1.67,
        1.68,
        1.69,
        1.7,
        1.71,
        1.72,
        1.73,
        1.74,
        1.75,
        1.76,
        1.77,
        1.78,
        1.79,
        1.8,
        1.81,
        1.82,
        1.83,
        1.84,
        1.85,
        1.86,
        1.87,
        1.88,
        1.89,
        1.9,
        1.91,
        1.92,
        1.93,
        1.94,
        1.95,
        1.96,
        1.97,
        1.98,
        1.99,
        2.0,
        2.01,
        2.02,
        2.03,
        2.04,
        2.05,
        2.06,
        2.07,
        2.08,
        2.09,
        2.1,
        2.11,
        2.12,
        2.13,
        2.14,
        2.15,
        2.16,
        2.17,
        2.18,
        2.19,
        2.2,
        2.21,
        2.22,
        2.23,
        2.24,
        2.25,
        2.26,
        2.27,
        2.28,
        2.29,
        2.3,
        2.31,
        2.32,
        2.33,
        2.34,
        2.35,
        2.36,
        2.37,
        2.38,
        2.39,
        2.4,
        2.41,
        2.42,
        2.43,
        2.44,
        2.45,
        2.46,
        2.47,
        2.48,
        2.49,
        2.5,
        2.51,
        2.52,
        2.53,
        2.54,
        2.55,
        2.56,
        2.57,
        2.58,
        2.59,
        2.6,
        2.61,
        2.62,
        2.63,
        2.64,
        2.65,
        2.66,
        2.67,
        2.68,
        2.69,
        2.7,
        2.71,
        2.72,
        2.73,
        2.74,
        2.75,
        2.76,
        2.77,
        2.78,
        2.79,
        2.8,
        2.81,
        2.82,
        2.83,
        2.84,
        2.85,
        2.86,
        2.87,
        2.88,
        2.89,
        2.9,
        2.91,
        2.92,
        2.93,
        2.94,
        2.95,
        2.96,
        2.97,
        2.98,
        2.99,
        3.0,
        3.01,
        3.02,
        3.03,
        3.04,
        3.05,
        3.06,
        3.07,
        3.08,
        3.09,
        4.0,
        5.0,
    ],
    [
        0.5,
        0.504,
        0.508,
        0.512,
        0.516,
        0.5199,
        0.5239,
        0.5279,
        0.5319,
        0.5359,
        0.5398,
        0.5438,
        0.5478,
        0.5517,
        0.5557,
        0.5596,
        0.5636,
        0.5675,
        0.5714,
        0.5753,
        0.5793,
        0.5832,
        0.5871,
        0.591,
        0.5948,
        0.5987,
        0.6026,
        0.6064,
        0.6103,
        0.6141,
        0.6179,
        0.6217,
        0.6255,
        0.6293,
        0.6331,
        0.6368,
        0.6406,
        0.6443,
        0.648,
        0.6517,
        0.6554,
        0.6591,
        0.6628,
        0.6664,
        0.67,
        0.6736,
        0.6772,
        0.6808,
        0.6844,
        0.6879,
        0.6915,
        0.695,
        0.6985,
        0.7019,
        0.7054,
        0.7088,
        0.7123,
        0.7157,
        0.719,
        0.7224,
        0.7257,
        0.7291,
        0.7324,
        0.7357,
        0.7389,
        0.7422,
        0.7454,
        0.7486,
        0.7517,
        0.7549,
        0.758,
        0.7611,
        0.7642,
        0.7673,
        0.7703,
        0.7734,
        0.7764,
        0.7794,
        0.7823,
        0.7852,
        0.7881,
        0.791,
        0.7939,
        0.7967,
        0.7995,
        0.8023,
        0.8051,
        0.8078,
        0.8106,
        0.8133,
        0.8159,
        0.8186,
        0.8212,
        0.8238,
        0.8264,
        0.8289,
        0.8355,
        0.834,
        0.8365,
        0.8389,
        0.8413,
        0.8438,
        0.8461,
        0.8485,
        0.8508,
        0.8531,
        0.8554,
        0.8577,
        0.8599,
        0.8621,
        0.8643,
        0.8665,
        0.8686,
        0.8708,
        0.8729,
        0.8749,
        0.877,
        0.879,
        0.881,
        0.883,
        0.8849,
        0.8869,
        0.8888,
        0.8907,
        0.8925,
        0.8944,
        0.8962,
        0.898,
        0.8997,
        0.9015,
        0.9032,
        0.9049,
        0.9066,
        0.9082,
        0.9099,
        0.9115,
        0.9131,
        0.9147,
        0.9162,
        0.9177,
        0.9192,
        0.9207,
        0.9222,
        0.9236,
        0.9251,
        0.9265,
        0.9279,
        0.9292,
        0.9306,
        0.9319,
        0.9332,
        0.9345,
        0.9357,
        0.937,
        0.9382,
        0.9394,
        0.9406,
        0.9418,
        0.943,
        0.9441,
        0.9452,
        0.9463,
        0.9474,
        0.9484,
        0.9495,
        0.9505,
        0.9515,
        0.9525,
        0.9535,
        0.9535,
        0.9554,
        0.9564,
        0.9573,
        0.9582,
        0.9591,
        0.9599,
        0.9608,
        0.9616,
        0.9625,
        0.9633,
        0.9641,
        0.9648,
        0.9656,
        0.9664,
        0.9672,
        0.9678,
        0.9686,
        0.9693,
        0.97,
        0.9706,
        0.9713,
        0.9719,
        0.9726,
        0.9732,
        0.9738,
        0.9744,
        0.975,
        0.9756,
        0.9762,
        0.9767,
        0.9772,
        0.9778,
        0.9783,
        0.9788,
        0.9793,
        0.9798,
        0.9803,
        0.9808,
        0.9812,
        0.9817,
        0.9821,
        0.9826,
        0.983,
        0.9834,
        0.9838,
        0.9842,
        0.9846,
        0.985,
        0.9854,
        0.9857,
        0.9861,
        0.9864,
        0.9868,
        0.9871,
        0.9874,
        0.9878,
        0.9881,
        0.9884,
        0.9887,
        0.989,
        0.9893,
        0.9896,
        0.9898,
        0.9901,
        0.9904,
        0.9906,
        0.9909,
        0.9911,
        0.9913,
        0.9916,
        0.9918,
        0.992,
        0.9922,
        0.9925,
        0.9927,
        0.9929,
        0.9931,
        0.9932,
        0.9934,
        0.9936,
        0.9938,
        0.994,
        0.9941,
        0.9943,
        0.9945,
        0.9946,
        0.9948,
        0.9949,
        0.9951,
        0.9952,
        0.9953,
        0.9955,
        0.9956,
        0.9957,
        0.9959,
        0.996,
        0.9961,
        0.9962,
        0.9963,
        0.9964,
        0.9965,
        0.9966,
        0.9967,
        0.9968,
        0.9969,
        0.997,
        0.9971,
        0.9972,
        0.9973,
        0.9974,
        0.9974,
        0.9975,
        0.9976,
        0.9977,
        0.9977,
        0.9978,
        0.9979,
        0.9979,
        0.998,
        0.9981,
        0.9981,
        0.9982,
        0.9982,
        0.9983,
        0.9984,
        0.9984,
        0.9985,
        0.9985,
        0.9986,
        0.9986,
        0.9987,
        0.999,
        0.9993,
        0.9995,
        0.9997,
        0.9998,
        0.9998,
        0.9999,
        0.9999,
        1.0,
        1.0,
        1.0,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_standard_normal_distribution",
)


@component.add(
    name="Labor Force",
    units="Person",
    subscripts=["Gender", "WorkingAge", "Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_skilled_secondary_education_graduates": 2,
        "secondary_education": 2,
        "tertiary_education": 1,
        "primary_education": 1,
        "noneducated": 1,
    },
)
def labor_force():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "WorkingAge": _subscript_dict["WorkingAge"],
            "Labor force type": _subscript_dict["Labor force type"],
        },
        ["Gender", "WorkingAge", "Labor force type"],
    )
    value.loc[:, :, ["skill"]] = (
        (
            fraction_of_skilled_secondary_education_graduates() * secondary_education()
            + tertiary_education()
        )
        .expand_dims({"Labor force type": ["skill"]}, 2)
        .values
    )
    value.loc[:, :, ["unskill"]] = (
        (
            noneducated()
            + primary_education()
            + (1 - fraction_of_skilled_secondary_education_graduates())
            * secondary_education()
        )
        .expand_dims({"Labor force type": ["unskill"]}, 2)
        .values
    )
    return value


@component.add(
    name="Gini coefficient",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gini1": 2, "gini2": 1},
)
def gini_coefficient():
    """
    To make sure the value of Gini coefficient>0
    """
    return if_then_else(gini1() > 0, lambda: gini1(), lambda: gini2())


@component.add(
    name="Unskilled population",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1, "skilled_population": 1},
)
def unskilled_population():
    return population_cohorts() - skilled_population()


@component.add(
    name="Tertiary Education Enrollment Fraction",
    units="1/Year",
    subscripts=["Gender", "SecondaryGraduation"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gwp_per_capita_on_tertiary_enrollment": 3,
        "reference_tertiary_education_enrollment_fraction": 3,
        "tertiary_age_distribution": 3,
    },
)
def tertiary_education_enrollment_fraction():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SecondaryGraduation": _subscript_dict["SecondaryGraduation"],
        },
        ["Gender", "SecondaryGraduation"],
    )
    value.loc[:, ['"15-19"']] = (
        (
            effect_of_gwp_per_capita_on_tertiary_enrollment()
            * reference_tertiary_education_enrollment_fraction()
            * float(tertiary_age_distribution().loc['"15-19"'])
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    value.loc[:, ['"20-24"']] = (
        (
            effect_of_gwp_per_capita_on_tertiary_enrollment()
            * reference_tertiary_education_enrollment_fraction()
            * float(tertiary_age_distribution().loc['"20-24"'])
        )
        .expand_dims({"YoGL cohorts": ['"20-24"']}, 1)
        .values
    )
    value.loc[:, ['"25-29"']] = (
        (
            effect_of_gwp_per_capita_on_tertiary_enrollment()
            * reference_tertiary_education_enrollment_fraction()
            * float(tertiary_age_distribution().loc['"25-29"'])
        )
        .expand_dims({"YoGL cohorts": ['"25-29"']}, 1)
        .values
    )
    return value


@component.add(
    name="P0",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p0_sa": 2, "current_year": 2, "time": 2},
)
def p0():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 1.2 + step(
        __data["time"], float(p0_sa().loc["male"]) - 1.2, current_year()
    )
    value.loc[["female"]] = 3 + step(
        __data["time"], float(p0_sa().loc["female"]) - 3, current_year()
    )
    return value


@component.add(
    name="Effect of GWP per capita on secondary enrollment",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"s1": 1, "gwp_per_capita_ratio_for_enrollment": 1, "s2": 1, "s0": 1},
)
def effect_of_gwp_per_capita_on_secondary_enrollment():
    """
    Based on gross enrollment rate (noramlzied wrt max) vs. GWP per capita (normalized wrt 2000 value) data. Needs regression! IF THEN ELSE function is used to ensure the value of the secondary education enrollment fraction is during [0,1].The eventual value is constrained to be non-negative.
    """
    return np.maximum(
        s1() / (1 + np.exp(-s2() * (gwp_per_capita_ratio_for_enrollment() - s0()))), 0
    )


@component.add(
    name="Effect of GWP per capita on primary enrollment",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p1": 1, "p2": 1, "gwp_per_capita_ratio_for_enrollment": 1, "p0": 1},
)
def effect_of_gwp_per_capita_on_primary_enrollment():
    """
    Based on Net enrollment rate (noramlzied wrt max) vs. GWP per capita (normalized wrt 2000 value) data. Needs regression! IF THEN ELSE function is used to ensure the value of the primary education enrollment fraction <=1. The eventual value is constrained to be non-negative.
    """
    return np.maximum(
        p1() / (1 + np.exp(-p2() * (gwp_per_capita_ratio_for_enrollment() - p0()))), 0
    )


@component.add(
    name="Effect of GWP per capita on tertiary enrollment",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"t1": 1, "gwp_per_capita_ratio_for_enrollment": 1, "t2": 1, "t0": 1},
)
def effect_of_gwp_per_capita_on_tertiary_enrollment():
    """
    Based on gross enrollment rate (noramlzied wrt max) vs. GWP per capita (normalized wrt 2000 value) data. Needs regression! IF THEN ELSE function is used to ensure the value of the tertiary education enrollment fraction is during [0,1] The eventual value is constrained to be non-negative.
    """
    return np.maximum(
        t1() / (1 + np.exp(-t2() * (gwp_per_capita_ratio_for_enrollment() - t0()))), 0
    )


@component.add(
    name="Average Secondary Education Duration",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_secondary_education_duration():
    """
    https://data.worldbank.org/indicator/SE.SEC.DURS
    """
    return 5.5


@component.add(
    name="Tertiary age distribution",
    subscripts=["SecondaryGraduation"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def tertiary_age_distribution():
    value = xr.DataArray(
        np.nan,
        {"SecondaryGraduation": _subscript_dict["SecondaryGraduation"]},
        ["SecondaryGraduation"],
    )
    value.loc[['"15-19"']] = 0.606804
    value.loc[['"20-24"']] = 0.36567
    value.loc[['"25-29"']] = 0.0625012
    return value


@component.add(
    name="Net enrollment primary",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_primary_education": 1, "population_cohorts": 1},
)
def net_enrollment_primary():
    return enrollment_rate_to_primary_education() / population_cohorts().loc[
        :, '"5-9"'
    ].reset_coords(drop=True)


@component.add(name='"init 10-14"', comp_type="Constant", comp_subtype="Normal")
def init_1014():
    return 44000000.0


@component.add(
    name="Primary Education Graduates",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_primary_education_graduates": 1,
        "_integ_primary_education_graduates_1": 1,
        "_integ_primary_education_graduates_2": 1,
        "_integ_primary_education_graduates_3": 1,
        "_integ_primary_education_graduates_4": 1,
    },
    other_deps={
        "_integ_primary_education_graduates": {
            "initial": {"initial_primary_education_graduates": 1},
            "step": {
                "graduation_rate_from_primary_education": 1,
                "death_rate_of_primary_education_graduates": 1,
                "maturation_of_primary_education_graduates": 1,
                "enrollment_rate_to_secondary_education": 1,
            },
        },
        "_integ_primary_education_graduates_1": {
            "initial": {"initial_primary_education_graduates": 1},
            "step": {
                "maturation_of_primary_education_graduates": 2,
                "death_rate_of_primary_education_graduates": 1,
            },
        },
        "_integ_primary_education_graduates_2": {"initial": {}, "step": {}},
        "_integ_primary_education_graduates_3": {"initial": {}, "step": {}},
        "_integ_primary_education_graduates_4": {
            "initial": {"initial_primary_education_graduates": 1},
            "step": {
                "graduation_rate_from_primary_education": 1,
                "death_rate_of_primary_education_graduates": 1,
                "maturation_of_primary_education_graduates": 1,
                "enrollment_rate_to_secondary_education": 1,
            },
        },
    },
)
def primary_education_graduates():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"10-14"']] = _integ_primary_education_graduates().values
    value.loc[
        :, _subscript_dict["PrimaryEdButYoungest"]
    ] = _integ_primary_education_graduates_1().values
    value.loc[:, ['"0-4"']] = _integ_primary_education_graduates_2().values
    value.loc[:, ['"5-9"']] = _integ_primary_education_graduates_3().values
    value.loc[:, ['"15-19"']] = _integ_primary_education_graduates_4().values
    return value


_integ_primary_education_graduates = Integ(
    lambda: (
        graduation_rate_from_primary_education()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        - death_rate_of_primary_education_graduates()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        - maturation_of_primary_education_graduates()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        - enrollment_rate_to_secondary_education()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
    ).expand_dims({"SchoolEnrollment": ['"10-14"']}, 1),
    lambda: initial_primary_education_graduates()
    .loc[:, '"10-14"']
    .reset_coords(drop=True)
    .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1),
    "_integ_primary_education_graduates",
)

_integ_primary_education_graduates_1 = Integ(
    lambda: xr.DataArray(
        maturation_of_primary_education_graduates()
        .loc[:, _subscript_dict["PrimaryEdPrevious"]]
        .rename({"PrimaryEdCohorts": "PrimaryEdPrevious"})
        .values,
        {
            "Gender": _subscript_dict["Gender"],
            "PrimaryEdButYoungest": _subscript_dict["PrimaryEdButYoungest"],
        },
        ["Gender", "PrimaryEdButYoungest"],
    )
    - death_rate_of_primary_education_graduates()
    .loc[:, _subscript_dict["PrimaryEdButYoungest"]]
    .rename({"PrimaryEdCohorts": "PrimaryEdButYoungest"})
    - maturation_of_primary_education_graduates()
    .loc[:, _subscript_dict["PrimaryEdButYoungest"]]
    .rename({"PrimaryEdCohorts": "PrimaryEdButYoungest"}),
    lambda: initial_primary_education_graduates()
    .loc[:, _subscript_dict["PrimaryEdButYoungest"]]
    .rename({"PrimaryEdCohorts": "PrimaryEdButYoungest"}),
    "_integ_primary_education_graduates_1",
)

_integ_primary_education_graduates_2 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], '"0 to 19"': ['"0-4"']},
        ["Gender", '"0 to 19"'],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], '"0 to 19"': ['"0-4"']},
        ["Gender", '"0 to 19"'],
    ),
    "_integ_primary_education_graduates_2",
)

_integ_primary_education_graduates_3 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"5-9"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"5-9"']},
        ["Gender", "SchoolEnrollment"],
    ),
    "_integ_primary_education_graduates_3",
)

_integ_primary_education_graduates_4 = Integ(
    lambda: (
        graduation_rate_from_primary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - death_rate_of_primary_education_graduates()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - maturation_of_primary_education_graduates()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - enrollment_rate_to_secondary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
    ).expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    lambda: initial_primary_education_graduates()
    .loc[:, '"15-19"']
    .reset_coords(drop=True)
    .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    "_integ_primary_education_graduates_4",
)


@component.add(
    name="Gross enrollment tertiary",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_tertiary_education": 1, "population_cohorts": 1},
)
def gross_enrollment_tertiary():
    return sum(
        enrollment_rate_to_tertiary_education()
        .loc[:, _subscript_dict["SecondaryGraduation"]]
        .rename({"MYS": "SecondaryGraduation!"}),
        dim=["SecondaryGraduation!"],
    ) / sum(
        population_cohorts()
        .loc[:, _subscript_dict["SecondaryGraduation"]]
        .rename({"Cohorts": "SecondaryGraduation!"}),
        dim=["SecondaryGraduation!"],
    )


@component.add(
    name="Enrollment Rate to Tertiary Education",
    units="People/Year",
    subscripts=["Gender", "MYS"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "secondary_education_graduates": 3,
        "tertiary_education_enrollment_fraction": 3,
    },
)
def enrollment_rate_to_tertiary_education():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "MYS": _subscript_dict["MYS"]},
        ["Gender", "MYS"],
    )
    value.loc[:, ['"15-19"']] = (
        (
            secondary_education_graduates().loc[:, '"15-19"'].reset_coords(drop=True)
            * tertiary_education_enrollment_fraction()
            .loc[:, '"15-19"']
            .reset_coords(drop=True)
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["SecondaryEdButYoungest"]] = 0
    value.loc[:, ['"20-24"']] = (
        (
            tertiary_education_enrollment_fraction()
            .loc[:, '"20-24"']
            .reset_coords(drop=True)
            * secondary_education_graduates().loc[:, '"20-24"'].reset_coords(drop=True)
        )
        .expand_dims({"YoGL cohorts": ['"20-24"']}, 1)
        .values
    )
    value.loc[:, ['"25-29"']] = (
        (
            tertiary_education_enrollment_fraction()
            .loc[:, '"25-29"']
            .reset_coords(drop=True)
            * secondary_education_graduates().loc[:, '"25-29"'].reset_coords(drop=True)
        )
        .expand_dims({"YoGL cohorts": ['"25-29"']}, 1)
        .values
    )
    return value


@component.add(
    name="Tertiary Education Graduates",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_tertiary_education_graduates": 1,
        "_integ_tertiary_education_graduates_1": 1,
        "_integ_tertiary_education_graduates_2": 1,
        "_integ_tertiary_education_graduates_3": 1,
        "_integ_tertiary_education_graduates_4": 1,
        "_integ_tertiary_education_graduates_5": 1,
        "_integ_tertiary_education_graduates_6": 1,
        "_integ_tertiary_education_graduates_7": 1,
    },
    other_deps={
        "_integ_tertiary_education_graduates": {
            "initial": {"initial_tertiary_education_graduates": 1},
            "step": {
                "graduation_rate_from_tertiary_education": 1,
                "death_rate_of_tertiary_education_graduates": 1,
                "maturation_of_tertiary_education_graduates": 1,
            },
        },
        "_integ_tertiary_education_graduates_1": {
            "initial": {"initial_tertiary_education_graduates": 1},
            "step": {
                "maturation_of_tertiary_education_graduates": 2,
                "death_rate_of_tertiary_education_graduates": 1,
            },
        },
        "_integ_tertiary_education_graduates_2": {"initial": {}, "step": {}},
        "_integ_tertiary_education_graduates_3": {"initial": {}, "step": {}},
        "_integ_tertiary_education_graduates_4": {"initial": {}, "step": {}},
        "_integ_tertiary_education_graduates_5": {"initial": {}, "step": {}},
        "_integ_tertiary_education_graduates_6": {
            "initial": {"initial_tertiary_education_graduates": 1},
            "step": {
                "graduation_rate_from_tertiary_education": 1,
                "death_rate_of_tertiary_education_graduates": 1,
                "maturation_of_tertiary_education_graduates": 2,
            },
        },
        "_integ_tertiary_education_graduates_7": {
            "initial": {"initial_tertiary_education_graduates": 1},
            "step": {
                "graduation_rate_from_tertiary_education": 1,
                "death_rate_of_tertiary_education_graduates": 1,
                "maturation_of_tertiary_education_graduates": 2,
            },
        },
    },
)
def tertiary_education_graduates():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"20-24"']] = _integ_tertiary_education_graduates().values
    value.loc[
        :, _subscript_dict["TertiaryEdButYoungest"]
    ] = _integ_tertiary_education_graduates_1().values
    value.loc[:, ['"0-4"']] = _integ_tertiary_education_graduates_2().values
    value.loc[:, ['"5-9"']] = _integ_tertiary_education_graduates_3().values
    value.loc[:, ['"10-14"']] = _integ_tertiary_education_graduates_4().values
    value.loc[:, ['"15-19"']] = _integ_tertiary_education_graduates_5().values
    value.loc[:, ['"25-29"']] = _integ_tertiary_education_graduates_6().values
    value.loc[:, ['"30-34"']] = _integ_tertiary_education_graduates_7().values
    return value


_integ_tertiary_education_graduates = Integ(
    lambda: (
        graduation_rate_from_tertiary_education()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
        - death_rate_of_tertiary_education_graduates()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
        - maturation_of_tertiary_education_graduates()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
    ).expand_dims({"YoGL cohorts": ['"20-24"']}, 1),
    lambda: initial_tertiary_education_graduates()
    .loc[:, '"20-24"']
    .reset_coords(drop=True)
    .expand_dims({"YoGL cohorts": ['"20-24"']}, 1),
    "_integ_tertiary_education_graduates",
)

_integ_tertiary_education_graduates_1 = Integ(
    lambda: xr.DataArray(
        maturation_of_tertiary_education_graduates()
        .loc[:, _subscript_dict["TertiaryEdPrevious"]]
        .rename({"TertiaryEdCohorts": "TertiaryEdPrevious"})
        .values,
        {
            "Gender": _subscript_dict["Gender"],
            "TertiaryEdButYoungest": _subscript_dict["TertiaryEdButYoungest"],
        },
        ["Gender", "TertiaryEdButYoungest"],
    )
    - death_rate_of_tertiary_education_graduates()
    .loc[:, _subscript_dict["TertiaryEdButYoungest"]]
    .rename({"TertiaryEdCohorts": "TertiaryEdButYoungest"})
    - maturation_of_tertiary_education_graduates()
    .loc[:, _subscript_dict["TertiaryEdButYoungest"]]
    .rename({"TertiaryEdCohorts": "TertiaryEdButYoungest"}),
    lambda: initial_tertiary_education_graduates()
    .loc[:, _subscript_dict["TertiaryEdButYoungest"]]
    .rename({"TertiaryEdCohorts": "TertiaryEdButYoungest"}),
    "_integ_tertiary_education_graduates_1",
)

_integ_tertiary_education_graduates_2 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], '"0 to 19"': ['"0-4"']},
        ["Gender", '"0 to 19"'],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], '"0 to 19"': ['"0-4"']},
        ["Gender", '"0 to 19"'],
    ),
    "_integ_tertiary_education_graduates_2",
)

_integ_tertiary_education_graduates_3 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"5-9"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"5-9"']},
        ["Gender", "SchoolEnrollment"],
    ),
    "_integ_tertiary_education_graduates_3",
)

_integ_tertiary_education_graduates_4 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ),
    "_integ_tertiary_education_graduates_4",
)

_integ_tertiary_education_graduates_5 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"15-19"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"15-19"']},
        ["Gender", "SchoolEnrollment"],
    ),
    "_integ_tertiary_education_graduates_5",
)

_integ_tertiary_education_graduates_6 = Integ(
    lambda: (
        graduation_rate_from_tertiary_education()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        - death_rate_of_tertiary_education_graduates()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        - maturation_of_tertiary_education_graduates()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        + maturation_of_tertiary_education_graduates()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
    ).expand_dims({"YoGL cohorts": ['"25-29"']}, 1),
    lambda: initial_tertiary_education_graduates()
    .loc[:, '"25-29"']
    .reset_coords(drop=True)
    .expand_dims({"YoGL cohorts": ['"25-29"']}, 1),
    "_integ_tertiary_education_graduates_6",
)

_integ_tertiary_education_graduates_7 = Integ(
    lambda: (
        graduation_rate_from_tertiary_education()
        .loc[:, '"30-34"']
        .reset_coords(drop=True)
        - death_rate_of_tertiary_education_graduates()
        .loc[:, '"30-34"']
        .reset_coords(drop=True)
        - maturation_of_tertiary_education_graduates()
        .loc[:, '"30-34"']
        .reset_coords(drop=True)
        + maturation_of_tertiary_education_graduates()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
    ).expand_dims({"YoGL cohorts": ['"30-34"']}, 1),
    lambda: initial_tertiary_education_graduates()
    .loc[:, '"30-34"']
    .reset_coords(drop=True)
    .expand_dims({"YoGL cohorts": ['"30-34"']}, 1),
    "_integ_tertiary_education_graduates_7",
)


@component.add(
    name="Net enrollment secondary",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"enrollment_rate_to_secondary_education": 2, "population_cohorts": 2},
)
def net_enrollment_secondary():
    return (
        enrollment_rate_to_secondary_education()
        .loc[:, '"10-14"']
        .reset_coords(drop=True)
        + enrollment_rate_to_secondary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
    ) / (
        population_cohorts().loc[:, '"10-14"'].reset_coords(drop=True)
        + population_cohorts().loc[:, '"15-19"'].reset_coords(drop=True)
    )


@component.add(
    name="GWP per Capita 2000",
    units="$*Thousand/(Person*Year)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gwp_per_capita_2000():
    return 5.50746 * 1000


@component.add(
    name="Reference primary education enrollment fraction",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_primary_education_enrollment_fraction():
    """
    0.86,0.81
    """
    return xr.DataArray([1.0, 0.95], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Fraction of population with secondary education or higher in interval i",
    units="Dmnl",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "secondary_education_graduates": 1,
        "tertiary_education_graduates": 1,
        "population_cohorts": 1,
    },
)
def fraction_of_population_with_secondary_education_or_higher_in_interval_i():
    return (
        secondary_education_graduates() + tertiary_education_graduates()
    ) / population_cohorts()


@component.add(
    name="Secondary Education Graduates",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_secondary_education_graduates": 1,
        "_integ_secondary_education_graduates_1": 1,
        "_integ_secondary_education_graduates_2": 1,
        "_integ_secondary_education_graduates_3": 1,
        "_integ_secondary_education_graduates_4": 1,
        "_integ_secondary_education_graduates_5": 1,
        "_integ_secondary_education_graduates_6": 1,
    },
    other_deps={
        "_integ_secondary_education_graduates": {
            "initial": {"initial_secondary_education_graduates": 1},
            "step": {
                "graduation_rate_from_secondary_education": 1,
                "death_rate_of_secondary_education_graduates": 1,
                "maturation_of_secondary_education_graduates": 1,
                "enrollment_rate_to_tertiary_education": 1,
            },
        },
        "_integ_secondary_education_graduates_1": {
            "initial": {"initial_secondary_education_graduates": 1},
            "step": {
                "maturation_of_secondary_education_graduates": 2,
                "death_rate_of_secondary_education_graduates": 1,
            },
        },
        "_integ_secondary_education_graduates_2": {"initial": {}, "step": {}},
        "_integ_secondary_education_graduates_3": {"initial": {}, "step": {}},
        "_integ_secondary_education_graduates_4": {"initial": {}, "step": {}},
        "_integ_secondary_education_graduates_5": {
            "initial": {"initial_secondary_education_graduates": 1},
            "step": {
                "graduation_rate_from_secondary_education": 1,
                "death_rate_of_secondary_education_graduates": 1,
                "maturation_of_secondary_education_graduates": 2,
                "enrollment_rate_to_tertiary_education": 1,
            },
        },
        "_integ_secondary_education_graduates_6": {
            "initial": {"initial_secondary_education_graduates": 1},
            "step": {
                "graduation_rate_from_secondary_education": 1,
                "enrollment_rate_to_tertiary_education": 1,
                "death_rate_of_secondary_education_graduates": 1,
                "maturation_of_secondary_education_graduates": 2,
            },
        },
    },
)
def secondary_education_graduates():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"15-19"']] = _integ_secondary_education_graduates().values
    value.loc[
        :, _subscript_dict["SecondaryEdButYoungest"]
    ] = _integ_secondary_education_graduates_1().values
    value.loc[:, ['"0-4"']] = _integ_secondary_education_graduates_2().values
    value.loc[:, ['"5-9"']] = _integ_secondary_education_graduates_3().values
    value.loc[:, ['"10-14"']] = _integ_secondary_education_graduates_4().values
    value.loc[:, ['"20-24"']] = _integ_secondary_education_graduates_5().values
    value.loc[:, ['"25-29"']] = _integ_secondary_education_graduates_6().values
    return value


_integ_secondary_education_graduates = Integ(
    lambda: (
        graduation_rate_from_secondary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - death_rate_of_secondary_education_graduates()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - maturation_of_secondary_education_graduates()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
        - enrollment_rate_to_tertiary_education()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
    ).expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    lambda: initial_secondary_education_graduates()
    .loc[:, '"20-24"']
    .reset_coords(drop=True)
    .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1),
    "_integ_secondary_education_graduates",
)

_integ_secondary_education_graduates_1 = Integ(
    lambda: xr.DataArray(
        maturation_of_secondary_education_graduates()
        .loc[:, _subscript_dict["SecondaryEdPrevious"]]
        .rename({"SecondaryEdCohorts": "SecondaryEdPrevious"})
        .values,
        {
            "Gender": _subscript_dict["Gender"],
            "SecondaryEdButYoungest": _subscript_dict["SecondaryEdButYoungest"],
        },
        ["Gender", "SecondaryEdButYoungest"],
    )
    - death_rate_of_secondary_education_graduates()
    .loc[:, _subscript_dict["SecondaryEdButYoungest"]]
    .rename({"SecondaryEdCohorts": "SecondaryEdButYoungest"})
    - maturation_of_secondary_education_graduates()
    .loc[:, _subscript_dict["SecondaryEdButYoungest"]]
    .rename({"SecondaryEdCohorts": "SecondaryEdButYoungest"}),
    lambda: initial_secondary_education_graduates()
    .loc[:, _subscript_dict["SecondaryEdButYoungest"]]
    .rename({"SecondaryEdCohorts": "SecondaryEdButYoungest"}),
    "_integ_secondary_education_graduates_1",
)

_integ_secondary_education_graduates_2 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], '"0 to 19"': ['"0-4"']},
        ["Gender", '"0 to 19"'],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], '"0 to 19"': ['"0-4"']},
        ["Gender", '"0 to 19"'],
    ),
    "_integ_secondary_education_graduates_2",
)

_integ_secondary_education_graduates_3 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"5-9"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"5-9"']},
        ["Gender", "SchoolEnrollment"],
    ),
    "_integ_secondary_education_graduates_3",
)

_integ_secondary_education_graduates_4 = Integ(
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ),
    lambda: xr.DataArray(
        0,
        {"Gender": _subscript_dict["Gender"], "SchoolEnrollment": ['"10-14"']},
        ["Gender", "SchoolEnrollment"],
    ),
    "_integ_secondary_education_graduates_4",
)

_integ_secondary_education_graduates_5 = Integ(
    lambda: (
        graduation_rate_from_secondary_education()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
        - death_rate_of_secondary_education_graduates()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
        - maturation_of_secondary_education_graduates()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
        - enrollment_rate_to_tertiary_education()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
        + maturation_of_secondary_education_graduates()
        .loc[:, '"15-19"']
        .reset_coords(drop=True)
    ).expand_dims({"YoGL cohorts": ['"20-24"']}, 1),
    lambda: initial_secondary_education_graduates()
    .loc[:, '"20-24"']
    .reset_coords(drop=True)
    .expand_dims({"YoGL cohorts": ['"20-24"']}, 1),
    "_integ_secondary_education_graduates_5",
)

_integ_secondary_education_graduates_6 = Integ(
    lambda: (
        graduation_rate_from_secondary_education()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        - enrollment_rate_to_tertiary_education()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        - death_rate_of_secondary_education_graduates()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        - maturation_of_secondary_education_graduates()
        .loc[:, '"25-29"']
        .reset_coords(drop=True)
        + maturation_of_secondary_education_graduates()
        .loc[:, '"20-24"']
        .reset_coords(drop=True)
    ).expand_dims({"YoGL cohorts": ['"25-29"']}, 1),
    lambda: initial_secondary_education_graduates()
    .loc[:, '"25-29"']
    .reset_coords(drop=True)
    .expand_dims({"YoGL cohorts": ['"25-29"']}, 1),
    "_integ_secondary_education_graduates_6",
)


@component.add(
    name="YoGL",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_person_years_of_interest_pt": 1, "survivors_at_exact_age_x": 1},
)
def yogl():
    return zidz(total_person_years_of_interest_pt(), survivors_at_exact_age_x())


@component.add(
    name="Average time lived in the age interval",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "survivors_in_interval_x_x5": 1,
        "death_rate_of_survivors": 1,
        "maturation_rate_of_survivors": 1,
    },
)
def average_time_lived_in_the_age_interval():
    return zidz(
        survivors_in_interval_x_x5(),
        death_rate_of_survivors() + maturation_rate_of_survivors(),
    )


@component.add(
    name="number of deaths in the age interval dx",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "survivors_at_exact_age_x": 1,
        "probability_of_dying_in_the_interval": 1,
    },
)
def number_of_deaths_in_the_age_interval_dx():
    return survivors_at_exact_age_x() * probability_of_dying_in_the_interval()


@component.add(
    name="Person years lived in interval i",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "survivors_at_exact_age_x": 1,
        "interval_duration": 1,
        "average_time_lived_in_the_age_interval": 2,
        "number_of_deaths_in_the_age_interval_dx": 2,
    },
)
def person_years_lived_in_interval_i():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        xr.DataArray(
            survivors_at_exact_age_x()
            .loc[:, _subscript_dict["NextCohort"]]
            .rename({"Cohorts": "NextCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButOldest": _subscript_dict["AllButOldest"],
            },
            ["Gender", "AllButOldest"],
        )
        * interval_duration()
        + number_of_deaths_in_the_age_interval_dx()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        * average_time_lived_in_the_age_interval()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
    ).values
    value.loc[:, ['"100+"']] = (
        (
            number_of_deaths_in_the_age_interval_dx()
            .loc[:, '"100+"']
            .reset_coords(drop=True)
            * average_time_lived_in_the_age_interval()
            .loc[:, '"100+"']
            .reset_coords(drop=True)
        )
        .expand_dims({"YoGL cohorts": ['"100+"']}, 1)
        .values
    )
    return value


@component.add(
    name="Actual survivors in 2000",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def actual_survivors_in_2000():
    """
    UN Data for year 2000
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                3.20174e08,
                3.17338e08,
                3.20142e08,
                2.93685e08,
                2.63293e08,
                2.56649e08,
                2.41762e08,
                2.16878e08,
                1.87586e08,
                1.66624e08,
                1.31817e08,
                1.02351e08,
                9.00891e07,
                7.15020e07,
                5.33403e07,
                3.28448e07,
                1.59038e07,
                6.91893e06,
                1.86903e06,
                3.00842e05,
                3.08700e04,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                2.99391e08,
                2.98161e08,
                3.03115e08,
                2.80250e08,
                2.52859e08,
                2.48341e08,
                2.35354e08,
                2.12731e08,
                1.85373e08,
                1.66620e08,
                1.33280e08,
                1.05323e08,
                9.64574e07,
                8.06819e07,
                6.57453e07,
                4.70233e07,
                2.63184e07,
                1.44634e07,
                5.08987e06,
                1.08588e06,
                1.38098e05,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="population sum of edu",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_wrt_education": 1},
)
def population_sum_of_edu():
    return sum(
        population_wrt_education().rename({"Education": "Education!"}),
        dim=["Education!"],
    )


@component.add(
    name="Survivors at exact age x",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "survivors_at_exact_age_x": 1,
        "probability_of_dying_in_the_interval": 1,
        "time": 1,
        "actual_survivors_in_2000": 1,
    },
)
def survivors_at_exact_age_x():
    """
    Note that this (Eqn 2 for interval 0-4) corresponds to l_0 in Claudia's notation. It can be an arbitrary value, like 100. It can be Actual Population values in year 2000 (static) or a dynamic value with Population Cohorts[Gender, "0-4"].
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, _subscript_dict["AllButYoungest"]] = step(
        __data["time"],
        xr.DataArray(
            survivors_at_exact_age_x()
            .loc[:, _subscript_dict["PreviousCohort"]]
            .rename({"Cohorts": "PreviousCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButYoungest": _subscript_dict["AllButYoungest"],
            },
            ["Gender", "AllButYoungest"],
        )
        * (
            1
            - xr.DataArray(
                probability_of_dying_in_the_interval()
                .loc[:, _subscript_dict["PreviousCohort"]]
                .rename({"Cohorts": "PreviousCohort"})
                .values,
                {
                    "Gender": _subscript_dict["Gender"],
                    "AllButYoungest": _subscript_dict["AllButYoungest"],
                },
                ["Gender", "AllButYoungest"],
            )
        ),
        2000,
    ).values
    value.loc[:, ['"0-4"']] = (
        actual_survivors_in_2000()
        .loc[:, '"0-4"']
        .reset_coords(drop=True)
        .expand_dims({'"0 to 19"': ['"0-4"']}, 1)
        .values
    )
    return value


@component.add(
    name='"Survivors in interval x x+5"',
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_survivors_in_interval_x_x5": 1,
        "_integ_survivors_in_interval_x_x5_1": 1,
    },
    other_deps={
        "_integ_survivors_in_interval_x_x5": {
            "initial": {"actual_survivors_in_2000": 1},
            "step": {"maturation_rate_of_survivors": 2, "death_rate_of_survivors": 1},
        },
        "_integ_survivors_in_interval_x_x5_1": {
            "initial": {"actual_survivors_in_2000": 1},
            "step": {"maturation_rate_of_survivors": 1, "death_rate_of_survivors": 1},
        },
    },
)
def survivors_in_interval_x_x5():
    """
    Survivors with the simulated mortality rates, starting from year 2000. Initial values can be either the actual survisors (historical data) or an arbitrary value such as 1000. The simulated YoGL values do not differ.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[
        :, _subscript_dict["AllButYoungest"]
    ] = _integ_survivors_in_interval_x_x5().values
    value.loc[:, ['"0-4"']] = _integ_survivors_in_interval_x_x5_1().values
    return value


_integ_survivors_in_interval_x_x5 = Integ(
    lambda: xr.DataArray(
        maturation_rate_of_survivors()
        .loc[:, _subscript_dict["PreviousCohort"]]
        .rename({"Cohorts": "PreviousCohort"})
        .values,
        {
            "Gender": _subscript_dict["Gender"],
            "AllButYoungest": _subscript_dict["AllButYoungest"],
        },
        ["Gender", "AllButYoungest"],
    )
    - maturation_rate_of_survivors()
    .loc[:, _subscript_dict["AllButYoungest"]]
    .rename({"Cohorts": "AllButYoungest"})
    - death_rate_of_survivors()
    .loc[:, _subscript_dict["AllButYoungest"]]
    .rename({"Cohorts": "AllButYoungest"}),
    lambda: actual_survivors_in_2000()
    .loc[:, _subscript_dict["AllButYoungest"]]
    .rename({"Cohorts": "AllButYoungest"}),
    "_integ_survivors_in_interval_x_x5",
)

_integ_survivors_in_interval_x_x5_1 = Integ(
    lambda: (
        -maturation_rate_of_survivors().loc[:, '"0-4"'].reset_coords(drop=True)
        - death_rate_of_survivors().loc[:, '"0-4"'].reset_coords(drop=True)
    ).expand_dims({'"0 to 19"': ['"0-4"']}, 1),
    lambda: actual_survivors_in_2000()
    .loc[:, '"0-4"']
    .reset_coords(drop=True)
    .expand_dims({'"0 to 19"': ['"0-4"']}, 1),
    "_integ_survivors_in_interval_x_x5_1",
)


@component.add(
    name="Maturation Rate of Survivors",
    units="People/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"survivors_in_interval_x_x5": 1, "interval_duration": 1, "time": 1},
)
def maturation_rate_of_survivors():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        0
        + step(
            __data["time"],
            survivors_in_interval_x_x5()
            .loc[:, _subscript_dict["AllButOldest"]]
            .rename({"Cohorts": "AllButOldest"})
            / interval_duration(),
            2000,
        )
    ).values
    value.loc[:, ['"100+"']] = 0
    return value


@component.add(
    name="Life table life expectancy",
    units="Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_person_years_t": 1, "survivors_at_exact_age_x": 1},
)
def life_table_life_expectancy():
    return zidz(total_person_years_t(), survivors_at_exact_age_x())


@component.add(
    name="Total person years of interest pT",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "person_years_of_interest_pli": 2,
        "total_person_years_of_interest_pt": 1,
    },
)
def total_person_years_of_interest_pt():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"100+"']] = (
        person_years_of_interest_pli()
        .loc[:, '"100+"']
        .reset_coords(drop=True)
        .expand_dims({"YoGL cohorts": ['"100+"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        person_years_of_interest_pli()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        + xr.DataArray(
            total_person_years_of_interest_pt()
            .loc[:, _subscript_dict["NextCohort"]]
            .rename({"Cohorts": "NextCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButOldest": _subscript_dict["AllButOldest"],
            },
            ["Gender", "AllButOldest"],
        )
    ).values
    return value


@component.add(
    name="Total person years T",
    units="People*Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"person_years_lived_in_interval_i": 2, "total_person_years_t": 1},
)
def total_person_years_t():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, ['"100+"']] = (
        person_years_lived_in_interval_i()
        .loc[:, '"100+"']
        .reset_coords(drop=True)
        .expand_dims({"YoGL cohorts": ['"100+"']}, 1)
        .values
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        person_years_lived_in_interval_i()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        + xr.DataArray(
            total_person_years_t()
            .loc[:, _subscript_dict["NextCohort"]]
            .rename({"Cohorts": "NextCohort"})
            .values,
            {
                "Gender": _subscript_dict["Gender"],
                "AllButOldest": _subscript_dict["AllButOldest"],
            },
            ["Gender", "AllButOldest"],
        )
    ).values
    return value


@component.add(
    name="net to gross fraction",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def net_to_gross_fraction():
    """
    Average value for the period (1998-2018) where the net rate data is available.
    """
    return xr.DataArray(
        [0.887368, 0.900536], {"Gender": _subscript_dict["Gender"]}, ["Gender"]
    )


@component.add(
    name="Smoothed Total Population",
    units="People",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_smoothed_total_population": 1},
    other_deps={
        "_smooth_smoothed_total_population": {
            "initial": {"population": 1},
            "step": {"population": 1, "year_period": 1},
        }
    },
)
def smoothed_total_population():
    return _smooth_smoothed_total_population()


_smooth_smoothed_total_population = Smooth(
    lambda: population(),
    lambda: year_period(),
    lambda: population(),
    lambda: 1,
    "_smooth_smoothed_total_population",
)


@component.add(
    name="C Intensity of Emissions from Agricultural Land Use",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"reference_c_emission_from_agricultural_land_use": 1},
)
def c_intensity_of_emissions_from_agricultural_land_use():
    return reference_c_emission_from_agricultural_land_use()


@component.add(
    name="C Intensity of Emissions from Forest Land Use",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"reference_c_emission_from_forest_land_use": 1},
)
def c_intensity_of_emissions_from_forest_land_use():
    return reference_c_emission_from_forest_land_use()


@component.add(
    name="Total CO2 Emissions from Land Use",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_emission_from_land_use": 1, "co2_to_c": 1},
)
def total_co2_emissions_from_land_use():
    return c_emission_from_land_use() * co2_to_c()


@component.add(
    name="Agro Food Nitrogen Production Footprint",
    units="kg/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "denitrification_rate": 1,
        "nitrogen_leaching_and_runoff_rate": 1,
        "ton_to_kg": 1,
        "population": 1,
    },
)
def agro_food_nitrogen_production_footprint():
    return (
        (denitrification_rate() + nitrogen_leaching_and_runoff_rate())
        * ton_to_kg()
        / population()
    )


@component.add(
    name="Female to Male Enrollment in Tertiary Education",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"graduation_rate_from_tertiary_education": 2},
)
def female_to_male_enrollment_in_tertiary_education():
    return sum(
        graduation_rate_from_tertiary_education()
        .loc["female", :]
        .reset_coords(drop=True)
        .rename({"TertiaryGraduation": "TertiaryGraduation!"}),
        dim=["TertiaryGraduation!"],
    ) / sum(
        graduation_rate_from_tertiary_education()
        .loc["male", :]
        .reset_coords(drop=True)
        .rename({"TertiaryGraduation": "TertiaryGraduation!"}),
        dim=["TertiaryGraduation!"],
    )


@component.add(
    name="Waste fraction",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "waste_fraction_data": 5,
        "_smooth_waste_fraction": 1,
        "_smooth_waste_fraction_1": 1,
        "_smooth_waste_fraction_2": 1,
        "_smooth_waste_fraction_3": 1,
        "_smooth_waste_fraction_4": 1,
    },
    other_deps={
        "_smooth_waste_fraction": {
            "initial": {"waste_fraction_pasmeat_cropmeat_variation": 1, "time": 1},
            "step": {
                "waste_fraction_pasmeat_cropmeat_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_waste_fraction_1": {
            "initial": {"waste_fraction_pasmeat_cropmeat_variation": 1, "time": 1},
            "step": {
                "waste_fraction_pasmeat_cropmeat_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_waste_fraction_2": {
            "initial": {"waste_fraction_eggsdairy_variation": 1, "time": 1},
            "step": {
                "waste_fraction_eggsdairy_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_waste_fraction_3": {
            "initial": {"waste_fraction_eggsdairy_variation": 1, "time": 1},
            "step": {
                "waste_fraction_eggsdairy_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_waste_fraction_4": {
            "initial": {"waste_fraction_plantfood_variation": 1, "time": 1},
            "step": {
                "waste_fraction_plantfood_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
    },
)
def waste_fraction():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[["PasMeat"]] = (
        float(waste_fraction_data().loc["PasMeat"]) * (1 + _smooth_waste_fraction())
    ).values
    value.loc[["CropMeat"]] = (
        float(waste_fraction_data().loc["CropMeat"]) * (1 + _smooth_waste_fraction_1())
    ).values
    value.loc[["Dairy"]] = (
        float(waste_fraction_data().loc["Dairy"]) * (1 + _smooth_waste_fraction_2())
    ).values
    value.loc[["Eggs"]] = (
        float(waste_fraction_data().loc["Eggs"]) * (1 + _smooth_waste_fraction_3())
    ).values
    value.loc[_subscript_dict["PlantFood"]] = (
        waste_fraction_data()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * (1 + _smooth_waste_fraction_4())
    ).values
    return value


_smooth_waste_fraction = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_pasmeat_cropmeat_variation() - 1, 2020),
        {"AnimalFood": ["PasMeat"]},
        ["AnimalFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"AnimalFood": ["PasMeat"]}, ["AnimalFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_pasmeat_cropmeat_variation() - 1, 2020),
        {"AnimalFood": ["PasMeat"]},
        ["AnimalFood"],
    ),
    lambda: 1,
    "_smooth_waste_fraction",
)

_smooth_waste_fraction_1 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_pasmeat_cropmeat_variation() - 1, 2020),
        {"AnimalFood": ["CropMeat"]},
        ["AnimalFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"AnimalFood": ["CropMeat"]}, ["AnimalFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_pasmeat_cropmeat_variation() - 1, 2020),
        {"AnimalFood": ["CropMeat"]},
        ["AnimalFood"],
    ),
    lambda: 1,
    "_smooth_waste_fraction_1",
)

_smooth_waste_fraction_2 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_eggsdairy_variation() - 1, 2020),
        {"AnimalFood": ["Dairy"]},
        ["AnimalFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"AnimalFood": ["Dairy"]}, ["AnimalFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_eggsdairy_variation() - 1, 2020),
        {"AnimalFood": ["Dairy"]},
        ["AnimalFood"],
    ),
    lambda: 1,
    "_smooth_waste_fraction_2",
)

_smooth_waste_fraction_3 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_eggsdairy_variation() - 1, 2020),
        {"AnimalFood": ["Eggs"]},
        ["AnimalFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"AnimalFood": ["Eggs"]}, ["AnimalFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_eggsdairy_variation() - 1, 2020),
        {"AnimalFood": ["Eggs"]},
        ["AnimalFood"],
    ),
    lambda: 1,
    "_smooth_waste_fraction_3",
)

_smooth_waste_fraction_4 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_plantfood_variation() - 1, 2020),
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(),
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    ),
    lambda: xr.DataArray(
        step(__data["time"], waste_fraction_plantfood_variation() - 1, 2020),
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    ),
    lambda: 1,
    "_smooth_waste_fraction_4",
)


@component.add(
    name="Cereal Yield",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area_harvested": 2, "crop_yield_for_each_category": 1},
)
def cereal_yield():
    return (
        float(area_harvested().loc["Grains"])
        * float(crop_yield_for_each_category().loc["Grains"])
    ) / float(area_harvested().loc["Grains"])


@component.add(
    name="Capital Elasticity Output",
    units="Dmnl",
    subscripts=["Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cs": 1, "cu": 1},
)
def capital_elasticity_output():
    """
    CE Var S+SMOOTH(STEP(Capital Elasticity Output Variation-CE Var S, 2020+SE Var T),SSP Economic Variation Time)
    """
    value = xr.DataArray(
        np.nan,
        {"Labor force type": _subscript_dict["Labor force type"]},
        ["Labor force type"],
    )
    value.loc[["skill"]] = cs()
    value.loc[["unskill"]] = cu()
    return value


@component.add(
    name="SSP Economic Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_economic_variation_time():
    return 5


@component.add(
    name="Adolescent Fertility Rate",
    units="Person/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_fertility": 1,
        "per_1000_women": 1,
        "adolescent_fertility_fraction": 1,
        "adolescent_reproductive_lifetime": 1,
    },
)
def adolescent_fertility_rate():
    return (
        total_fertility()
        * per_1000_women()
        * adolescent_fertility_fraction()
        / adolescent_reproductive_lifetime()
    )


@component.add(
    name="Adolescent Reproductive Lifetime",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def adolescent_reproductive_lifetime():
    return 5


@component.add(
    name="Adolescent Fertility Fraction",
    units="1",
    comp_type="Constant",
    comp_subtype="Normal",
)
def adolescent_fertility_fraction():
    """
    Calibrated with Adolescent fertility rate (births per 1,000 women ages 15-19) between 1960 and 2015 from the World Bank: https://data.worldbank.org/indicator/SP.ADO.TFRT
    """
    return 0.07


@component.add(
    name="Share of Fossil Energy Supply",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coal_production_indicator": 2,
        "gas_production_indicator": 2,
        "oil_production_indicator": 2,
        "solar_energy_production_indicator": 1,
        "wind_energy_production_indicator": 1,
        "biomass_energy_production_indicator": 1,
    },
)
def share_of_fossil_energy_supply():
    return (
        (
            coal_production_indicator()
            + gas_production_indicator()
            + oil_production_indicator()
        )
        / (
            coal_production_indicator()
            + gas_production_indicator()
            + oil_production_indicator()
            + solar_energy_production_indicator()
            + wind_energy_production_indicator()
            + biomass_energy_production_indicator()
        )
    ) * 100


@component.add(
    name="Share of Renewable Energy Supply",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_production_indicator": 2,
        "solar_energy_production_indicator": 2,
        "wind_energy_production_indicator": 2,
        "oil_production_indicator": 1,
        "gas_production_indicator": 1,
        "coal_production_indicator": 1,
    },
)
def share_of_renewable_energy_supply():
    return (
        (
            biomass_energy_production_indicator()
            + solar_energy_production_indicator()
            + wind_energy_production_indicator()
        )
        / (
            coal_production_indicator()
            + gas_production_indicator()
            + oil_production_indicator()
            + solar_energy_production_indicator()
            + wind_energy_production_indicator()
            + biomass_energy_production_indicator()
        )
    ) * 100


@component.add(
    name="Total CO2 Emissions",
    units="Billion ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tonco2_to_billion_tonco2": 1, "total_co2": 1},
)
def total_co2_emissions():
    return tonco2_to_billion_tonco2() * total_co2()


@component.add(
    name="Animal Food supply",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"animal_food_supply_kcal_capita_day": 1},
)
def animal_food_supply():
    return animal_food_supply_kcal_capita_day()


@component.add(
    name="CO2 Emissions from Fossil Energy",
    units="Billion ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_from_fossil_energy": 1,
        "tonco2_to_billion_tonco2": 1,
    },
)
def co2_emissions_from_fossil_energy():
    return total_co2_emissions_from_fossil_energy() * tonco2_to_billion_tonco2()


@component.add(
    name="Vegetal Food Supply",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"vegetal_food_supply_kcal_capita_day": 1},
)
def vegetal_food_supply():
    return vegetal_food_supply_kcal_capita_day()


@component.add(
    name="Total Food Supply",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_daily_calorie_supply_per_capita": 1},
)
def total_food_supply():
    return total_daily_calorie_supply_per_capita()


@component.add(
    name="Total CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2": 1, "population": 1},
)
def total_co2_emissions_per_capita():
    return total_co2() / population()


@component.add(
    name="Total CO2 Emissions from AFOLU",
    units="Billion ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_from_agriculture": 1, "total_co2_from_land_use": 1},
)
def total_co2_emissions_from_afolu():
    return total_co2_from_agriculture() + total_co2_from_land_use()


@component.add(
    name="Total CO2",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_from_land_use": 1,
        "total_co2_emissions_from_agriculture": 1,
        "total_co2_emissions_from_fossil_energy": 1,
        "total_co2_emissions_from_renewables": 1,
    },
)
def total_co2():
    return (
        total_co2_emissions_from_land_use()
        + total_co2_emissions_from_agriculture()
        + total_co2_emissions_from_fossil_energy()
        + total_co2_emissions_from_renewables()
    )


@component.add(
    name="AFOLU CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agriculture_co2_emissions_per_capita": 1,
        "land_use_co2_emissions_per_capita": 1,
    },
)
def afolu_co2_emissions_per_capita():
    return agriculture_co2_emissions_per_capita() + land_use_co2_emissions_per_capita()


@component.add(
    name="Ratio of Agricultural Lands to Total Lands",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 2,
        "forest_land": 1,
        "urban_and_industrial_land": 1,
    },
)
def ratio_of_agricultural_lands_to_total_lands():
    return agricultural_land() / (
        agricultural_land() + forest_land() + urban_and_industrial_land()
    )


@component.add(
    name="TABLE CH4 Radiative Forcing SSP2 RCP34",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp34"
    },
)
def table_ch4_radiative_forcing_ssp2_rcp34(x, final_subs=None):
    """
    Data series for future projections of CH4 radiative forcing by MESSAGE-GLOBIOM (RCP 3.4).
    """
    return _hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp34(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp34 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.588276,
        0.618688,
        0.621345,
        0.592793,
        0.537515,
        0.488544,
        0.459203,
        0.441564,
        0.425481,
        0.405663,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp34",
)


@component.add(
    name="TABLE HFC Radiative Forcing AIM SSP3 RCP7",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_hfc_radiative_forcing_aim_ssp3_rcp7"
    },
)
def table_hfc_radiative_forcing_aim_ssp3_rcp7(x, final_subs=None):
    """
    Data series for future projections of HFC radiative forcing by AIM (RCP 7).
    """
    return _hardcodedlookup_table_hfc_radiative_forcing_aim_ssp3_rcp7(x, final_subs)


_hardcodedlookup_table_hfc_radiative_forcing_aim_ssp3_rcp7 = HardcodedLookups(
    [
        2005.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [0.021, 0.031, 0.061, 0.096, 0.129, 0.16, 0.188, 0.211, 0.231, 0.251, 0.27],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_hfc_radiative_forcing_aim_ssp3_rcp7",
)


@component.add(
    name="TABLE N2O Radiative Forcing SSP2 RCP34",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp34"
    },
)
def table_n2o_radiative_forcing_ssp2_rcp34(x, final_subs=None):
    """
    Data series for future projections of N2O radiative forcing by MESSAGE-GLOBIOM (SSP 2 RCP 34).
    """
    return _hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp34(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp34 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.167804,
        0.191089,
        0.214084,
        0.235924,
        0.254871,
        0.270427,
        0.282841,
        0.291311,
        0.29594,
        0.298074,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp34",
)


@component.add(
    name="TABLE Other Radiative Forcing AIM SSP3 RCP7",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_radiative_forcing_aim_ssp3_rcp7"
    },
)
def table_other_radiative_forcing_aim_ssp3_rcp7(x, final_subs=None):
    """
    Data series for future projections of other factors radiative forcing by AIM (RCP 7).
    """
    return _hardcodedlookup_table_other_radiative_forcing_aim_ssp3_rcp7(x, final_subs)


_hardcodedlookup_table_other_radiative_forcing_aim_ssp3_rcp7 = HardcodedLookups(
    [
        2005.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [
        -1.115,
        -1.06,
        -1.088,
        -1.09,
        -1.079,
        -1.081,
        -1.069,
        -1.057,
        -1.043,
        -1.017,
        -0.983,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_radiative_forcing_aim_ssp3_rcp7",
)


@component.add(
    name="Other Radiative Forcing AIM RCP7",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_radiative_forcing_aim_ssp3_rcp7": 1,
    },
)
def other_radiative_forcing_aim_rcp7():
    """
    Future projections of other radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_other_radiative_forcing_aim_ssp3_rcp7(time() * dimensionless_time())


@component.add(
    name="Plant Based Food Caloric Intake per Person",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_kcal_intake_per_person": 4},
)
def plant_based_food_caloric_intake_per_person():
    return (
        float(average_kcal_intake_per_person().loc["Pulses"])
        + float(average_kcal_intake_per_person().loc["Grains"])
        + float(average_kcal_intake_per_person().loc["VegFruits"])
        + float(average_kcal_intake_per_person().loc["OtherCrops"])
    )


@component.add(
    name="HFC Radiative Forcing AIM RCP7",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_hfc_radiative_forcing_aim_ssp3_rcp7": 1,
    },
)
def hfc_radiative_forcing_aim_rcp7():
    """
    Future projections of CO2 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_hfc_radiative_forcing_aim_ssp3_rcp7(time() * dimensionless_time())


@component.add(
    name="Animal Food Caloric Intake Indicator",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_kcal_intake_per_person": 1},
)
def animal_food_caloric_intake_indicator():
    return sum(
        average_kcal_intake_per_person()
        .loc[_subscript_dict["AnimalFood"]]
        .rename({"FoodCategories": "AnimalFood!"}),
        dim=["AnimalFood!"],
    )


@component.add(
    name="CH4 Radiative Forcing RCP34",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_ch4_radiative_forcing_ssp2_rcp34": 1,
    },
)
def ch4_radiative_forcing_rcp34():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_ch4_radiative_forcing_ssp2_rcp34(time() * dimensionless_time())


@component.add(
    name="N2O Radiative Forcing RCP34",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_n2o_radiative_forcing_ssp2_rcp34": 1,
    },
)
def n2o_radiative_forcing_rcp34():
    """
    Future projections of N2O radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (SSP2 RCP 3.4).
    """
    return table_n2o_radiative_forcing_ssp2_rcp34(time() * dimensionless_time())


@component.add(
    name="Phosphorous Fertilizer Use in Agriculture",
    units="Million ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"commercial_p_application_for_agriculture": 1, "ton_to_million_ton": 1},
)
def phosphorous_fertilizer_use_in_agriculture():
    return commercial_p_application_for_agriculture() * ton_to_million_ton()


@component.add(
    name="TonCO2 to Billion TonCO2",
    units="Billion ton CO2/TonCO2",
    comp_type="Constant",
    comp_subtype="Normal",
)
def tonco2_to_billion_tonco2():
    return 1 / 1000000000.0


@component.add(
    name="Total CO2 Emissions from Agriculture",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_emission_rate_of_the_agriculture_sector": 1},
)
def total_co2_emissions_from_agriculture():
    return sum(
        co2_emission_rate_of_the_agriculture_sector().rename(
            {"FoodCategories": "FoodCategories!"}
        ),
        dim=["FoodCategories!"],
    )


@component.add(
    name="ton to billion ton",
    units="Billion ton/Ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ton_to_billion_ton():
    return 1 / 1000000000.0


@component.add(
    name="Total CO2 from Land Use",
    units="Billion ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_land_use": 1, "tonco2_to_billion_tonco2": 1},
)
def total_co2_from_land_use():
    return total_co2_emissions_from_land_use() * tonco2_to_billion_tonco2()


@component.add(
    name="Nitrogen Fertilizer Use in Agriculture",
    units="Million ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"commercial_n_application_for_agriculture": 1, "ton_to_million_ton": 1},
)
def nitrogen_fertilizer_use_in_agriculture():
    return commercial_n_application_for_agriculture() * ton_to_million_ton()


@component.add(
    name="Land Mitigation Policy Transition Period",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def land_mitigation_policy_transition_period():
    return 20


@component.add(
    name="Total Energy CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fossil_energy_co2_emissions_per_capita": 1,
        "renewable_co2_emissions_per_capita": 1,
    },
)
def total_energy_co2_emissions_per_capita():
    return (
        fossil_energy_co2_emissions_per_capita() + renewable_co2_emissions_per_capita()
    )


@component.add(
    name="Total Plant and Meat Based Food",
    units="Billion ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"meat_based_food_production": 1, "plant_based_food_production": 1},
)
def total_plant_and_meat_based_food():
    return meat_based_food_production() + plant_based_food_production()


@component.add(
    name="Meat Based Food Production",
    units="Billion ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_production_rate": 2, "ton_to_billion_ton": 1},
)
def meat_based_food_production():
    return (
        float(food_production_rate().loc["PasMeat"])
        + float(food_production_rate().loc["CropMeat"])
    ) * ton_to_billion_ton()


@component.add(
    name="Plant Based Food Production",
    units="Billion ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_production_rate": 4, "ton_to_billion_ton": 1},
)
def plant_based_food_production():
    return (
        float(food_production_rate().loc["Pulses"])
        + float(food_production_rate().loc["Grains"])
        + float(food_production_rate().loc["VegFruits"])
        + float(food_production_rate().loc["OtherCrops"])
    ) * ton_to_billion_ton()


@component.add(
    name="Total CO2 from Agriculture",
    units="Billion ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_from_agriculture": 1,
        "tonco2_to_billion_tonco2": 1,
    },
)
def total_co2_from_agriculture():
    return total_co2_emissions_from_agriculture() * tonco2_to_billion_tonco2()


@component.add(
    name="Land Mitigation Policy Multiplier",
    units="1",
    comp_type="Constant",
    comp_subtype="Normal",
)
def land_mitigation_policy_multiplier():
    return 0.5


@component.add(
    name="Total CO2 Emissions Indicator",
    units="Million ton CO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_c_emission": 1,
        "carbon_removal_rate": 1,
        "co2_to_c": 1,
        "tonco2_to_million_ton_co2": 1,
    },
)
def total_co2_emissions_indicator():
    return (
        (total_c_emission() - carbon_removal_rate())
        * co2_to_c()
        * tonco2_to_million_ton_co2()
    )


@component.add(
    name="Carbon Price Finish",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def carbon_price_finish():
    return 2100


@component.add(
    name="Carbon Price",
    units="$/tCO2",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "carbon_price_slope": 1,
        "climate_action_year": 1,
        "carbon_price_finish": 1,
        "time": 1,
    },
)
def carbon_price():
    return ramp(
        __data["time"],
        carbon_price_slope(),
        climate_action_year(),
        carbon_price_finish(),
    )


@component.add(
    name="Carbon Price Slope",
    units="$/tCO2/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def carbon_price_slope():
    return 5


@component.add(
    name="Reference CO2 Removal Rate",
    units="TonC/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_co2_removal_rate():
    return 37000000.0


@component.add(
    name="CDR Policy Transition Period",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def cdr_policy_transition_period():
    return 1


@component.add(
    name="Carbon Removal Rate",
    units="TonC/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"climate_policy_scenario": 1, "_smooth_carbon_removal_rate": 1},
    other_deps={
        "_smooth_carbon_removal_rate": {
            "initial": {
                "reference_co2_removal_rate": 1,
                "climate_action_year": 1,
                "time": 1,
            },
            "step": {
                "reference_co2_removal_rate": 1,
                "climate_action_year": 1,
                "time": 1,
                "cdr_policy_transition_period": 1,
            },
        }
    },
)
def carbon_removal_rate():
    """
    Climate Policy Scenario*SMOOTH(STEP(Carbon Removal Impact Slope*Reference Removal Rate, Climate Action Year), Climate Policy Transition Period)
    """
    return climate_policy_scenario() * _smooth_carbon_removal_rate()


_smooth_carbon_removal_rate = Smooth(
    lambda: ramp(
        __data["time"], reference_co2_removal_rate(), climate_action_year(), 2100
    ),
    lambda: cdr_policy_transition_period(),
    lambda: ramp(
        __data["time"], reference_co2_removal_rate(), climate_action_year(), 2100
    ),
    lambda: 1,
    "_smooth_carbon_removal_rate",
)


@component.add(
    name="Carbon Removal Impact Slope", comp_type="Constant", comp_subtype="Normal"
)
def carbon_removal_impact_slope():
    return 1.1


@component.add(
    name="Climate Policy Scenario",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_policy_scenario():
    """
    0: No climate policy 1: Climate policy
    """
    return 0


@component.add(
    name="CO2 Intensity of Fuels",
    units="tCO2/Mtoe",
    subscripts=["Fossil Fuels"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def co2_intensity_of_fuels():
    """
    Coal: 220 (Pounds of CO2 emitted per million British thermal units for coal) * 0.000453592 (pound to ton) / 0.025 (milltion British thermal units to toe) * 1e+6 (toe to Mtoe) Gas: 117 (Pounds of CO2 emitted per million British thermal units for coal) * 0.000453592 (pound to ton) / 0.025 (milltion British thermal units to toe) * 1e+6 (toe to Mtoe) Oil: 160 (Pounds of CO2 emitted per million British thermal units for coal) * 0.000453592 (pound to ton) / 0.025 (milltion British thermal units to toe) * 1e+6 (toe to Mtoe) Data from EIA: https://www.eia.gov/tools/faqs/faq.php?id=73&t=11
    """
    value = xr.DataArray(
        np.nan, {"Fossil Fuels": _subscript_dict["Fossil Fuels"]}, ["Fossil Fuels"]
    )
    value.loc[["Coal"]] = 220 * (0.000453592 / 0.025) * 1000000.0
    value.loc[["Gas"]] = 117 * (0.000453592 / 0.025) * 1000000.0
    value.loc[["Oil"]] = 160 * (0.000453592 / 0.025) * 1000000.0
    return value


@component.add(
    name="Climate Action Year",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_action_year():
    return 2020


@component.add(
    name="Normal shift fraction from meat to vegetarianism",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_normal_shift_fraction_from_meat_to_vegetarianism": 1},
    other_deps={
        "_smooth_normal_shift_fraction_from_meat_to_vegetarianism": {
            "initial": {
                "normal_shift_fraction_from_meat_to_vegetarianism_variation": 1,
                "time": 1,
            },
            "step": {
                "normal_shift_fraction_from_meat_to_vegetarianism_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        }
    },
)
def normal_shift_fraction_from_meat_to_vegetarianism():
    return 0.003 + _smooth_normal_shift_fraction_from_meat_to_vegetarianism()


_smooth_normal_shift_fraction_from_meat_to_vegetarianism = Smooth(
    lambda: step(
        __data["time"],
        normal_shift_fraction_from_meat_to_vegetarianism_variation() - 0.003,
        2020,
    ),
    lambda: ssp_food_and_diet_variation_time(),
    lambda: step(
        __data["time"],
        normal_shift_fraction_from_meat_to_vegetarianism_variation() - 0.003,
        2020,
    ),
    lambda: 1,
    "_smooth_normal_shift_fraction_from_meat_to_vegetarianism",
)


@component.add(
    name="Feed share of crop types",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "feed_share_of_crop_types_data": 4,
        "_smooth_feed_share_of_crop_types": 1,
        "_smooth_feed_share_of_crop_types_1": 1,
        "_smooth_feed_share_of_crop_types_2": 1,
        "_smooth_feed_share_of_crop_types_3": 1,
    },
    other_deps={
        "_smooth_feed_share_of_crop_types": {
            "initial": {"feed_share_of_grains_variation": 1, "time": 1},
            "step": {
                "feed_share_of_grains_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_feed_share_of_crop_types_1": {
            "initial": {"feed_share_of_vegfruits_variation": 1, "time": 1},
            "step": {
                "feed_share_of_vegfruits_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_feed_share_of_crop_types_2": {
            "initial": {"feed_share_of_pulses_variation": 1, "time": 1},
            "step": {
                "feed_share_of_pulses_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
        "_smooth_feed_share_of_crop_types_3": {
            "initial": {"feed_share_of_othercrops_variation": 1, "time": 1},
            "step": {
                "feed_share_of_othercrops_variation": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        },
    },
)
def feed_share_of_crop_types():
    """
    This parameter represents the fraction of each crop type in the total feed amount used to produce crop-based meat, i.e. pork and poultry. For instance, if the value of this parameter for grains is 72%, it means that 72% of total feed comes from grains. It is estimated based on the FAO balance sheets, the data for 1961-1985, by summing the amount of each crop type used as feed. See FoodBalanceSheets.xlsx
    """
    value = xr.DataArray(
        np.nan, {"PlantFood": _subscript_dict["PlantFood"]}, ["PlantFood"]
    )
    value.loc[["Grains"]] = (
        float(feed_share_of_crop_types_data().loc["Grains"])
        * (1 + _smooth_feed_share_of_crop_types())
    ).values
    value.loc[["VegFruits"]] = (
        float(feed_share_of_crop_types_data().loc["VegFruits"])
        * (1 + _smooth_feed_share_of_crop_types_1())
    ).values
    value.loc[["Pulses"]] = (
        float(feed_share_of_crop_types_data().loc["Pulses"])
        * (1 + _smooth_feed_share_of_crop_types_2())
    ).values
    value.loc[["OtherCrops"]] = (
        float(feed_share_of_crop_types_data().loc["OtherCrops"])
        * (1 + _smooth_feed_share_of_crop_types_3())
    ).values
    return value


_smooth_feed_share_of_crop_types = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_grains_variation() - 1, 2020),
        {"PlantFood": ["Grains"]},
        ["PlantFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"PlantFood": ["Grains"]}, ["PlantFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_grains_variation() - 1, 2020),
        {"PlantFood": ["Grains"]},
        ["PlantFood"],
    ),
    lambda: 1,
    "_smooth_feed_share_of_crop_types",
)

_smooth_feed_share_of_crop_types_1 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_vegfruits_variation() - 1, 2020),
        {"PlantFood": ["VegFruits"]},
        ["PlantFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"PlantFood": ["VegFruits"]}, ["PlantFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_vegfruits_variation() - 1, 2020),
        {"PlantFood": ["VegFruits"]},
        ["PlantFood"],
    ),
    lambda: 1,
    "_smooth_feed_share_of_crop_types_1",
)

_smooth_feed_share_of_crop_types_2 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_pulses_variation() - 1, 2020),
        {"PlantFood": ["Pulses"]},
        ["PlantFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"PlantFood": ["Pulses"]}, ["PlantFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_pulses_variation() - 1, 2020),
        {"PlantFood": ["Pulses"]},
        ["PlantFood"],
    ),
    lambda: 1,
    "_smooth_feed_share_of_crop_types_2",
)

_smooth_feed_share_of_crop_types_3 = Smooth(
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_othercrops_variation() - 1, 2020),
        {"PlantFood": ["OtherCrops"]},
        ["PlantFood"],
    ),
    lambda: xr.DataArray(
        ssp_food_and_diet_variation_time(), {"PlantFood": ["OtherCrops"]}, ["PlantFood"]
    ),
    lambda: xr.DataArray(
        step(__data["time"], feed_share_of_othercrops_variation() - 1, 2020),
        {"PlantFood": ["OtherCrops"]},
        ["PlantFood"],
    ),
    lambda: 1,
    "_smooth_feed_share_of_crop_types_3",
)


@component.add(
    name="Harvested Forest Biomass Land Indicator",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_forest_land_harvested": 1},
)
def harvested_forest_biomass_land_indicator():
    return actual_forest_land_harvested()


@component.add(
    name="Total Food Production",
    units="Million tDM/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "livestock_production_indicator": 1,
        "nonenergy_crops_production_indicator": 1,
    },
)
def total_food_production():
    return livestock_production_indicator() + nonenergy_crops_production_indicator()


@component.add(
    name="Renewable Energy Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_production_indicator": 1,
        "solar_energy_production_indicator": 1,
        "wind_energy_production_indicator": 1,
    },
)
def renewable_energy_production_indicator():
    return (
        biomass_energy_production_indicator()
        + solar_energy_production_indicator()
        + wind_energy_production_indicator()
    )


@component.add(
    name="Animal Calories Consumption Indicator",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"percentage_of_animal_calories": 1},
)
def animal_calories_consumption_indicator():
    return percentage_of_animal_calories()


@component.add(
    name="Agricultural Land Area",
    units="Million ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pasture_land_indicator": 1, "total_croplands_indicator": 1},
)
def agricultural_land_area():
    return pasture_land_indicator() + total_croplands_indicator()


@component.add(
    name="Fossil Energy Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coal_production_indicator": 1,
        "gas_production_indicator": 1,
        "oil_production_indicator": 1,
    },
)
def fossil_energy_production_indicator():
    return (
        coal_production_indicator()
        + gas_production_indicator()
        + oil_production_indicator()
    )


@component.add(
    name="Total Birth Rate Indicator",
    units="Person/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_birth_rate": 1},
)
def total_birth_rate_indicator():
    return total_birth_rate()


@component.add(
    name="Population with No or Incomplete Education Indicator",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_population_with_no_or_incomplete_education": 1, "population": 1},
)
def population_with_no_or_incomplete_education_indicator():
    return total_population_with_no_or_incomplete_education() / population()


@component.add(
    name="Population Growth Rate",
    units="Person/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_birth_rate": 1, "total_death_rate": 1},
)
def population_growth_rate():
    return total_birth_rate() - total_death_rate()


@component.add(
    name="Grassland Meat Yield Indicator",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_meat_yield": 1},
)
def grassland_meat_yield_indicator():
    return grassland_meat_yield()


@component.add(
    name="Meat Based Diet Followers Indicator",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"percentage_of_meatbased_diet_followers": 1},
)
def meat_based_diet_followers_indicator():
    return float(np.maximum(0, percentage_of_meatbased_diet_followers()))


@component.add(
    name="Plant Based Diet Followers Indicator",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"percentage_of_vegetarian_diet_followers": 1},
)
def plant_based_diet_followers_indicator():
    return float(np.maximum(0, percentage_of_vegetarian_diet_followers()))


@component.add(
    name="Cropland Yield Indicator",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cropland_yield": 1},
)
def cropland_yield_indicator():
    return cropland_yield()


@component.add(
    name="Market Share Renewables Indicator",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"market_share_renewables": 1},
)
def market_share_renewables_indicator():
    return market_share_renewables()


@component.add(
    name="Children Out of Primary School Rate",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "population_with_no_or_incomplete_education": 1,
        "population_cohorts": 1,
    },
)
def children_out_of_primary_school_rate():
    """
    ((sum(Population with No or Incomplete Education[Gender!,"10-14"])) / (sum(Population Cohorts[Gender!,"10-14"])))*100
    """
    return (
        sum(
            population_with_no_or_incomplete_education()
            .loc[:, '"10-14"']
            .reset_coords(drop=True)
            .rename({"Gender": "Gender!"}),
            dim=["Gender!"],
        )
        / sum(
            population_cohorts()
            .loc[:, '"10-14"']
            .reset_coords(drop=True)
            .rename({"Gender": "Gender!"}),
            dim=["Gender!"],
        )
    ) * 100


@component.add(
    name="Total Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_fertility": 1,
        "impact_of_education_on_fertility": 1,
        "impact_of_gdp_on_fertility": 1,
    },
)
def total_fertility():
    """
    Total fertility of mature reproductive population. Source of historical data: http://esa.un.org/unpp
    """
    return (
        normal_fertility()
        * impact_of_education_on_fertility()
        * impact_of_gdp_on_fertility()
    )


@component.add(
    name="net to gross ter",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def net_to_gross_ter():
    return xr.DataArray([0.6, 0.6], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Persistence",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def persistence():
    """
    WORLD BANK DATA INDICATORS: Persistence to last grade of primary is the percentage of children enrolled in the first grade of primary school who eventually reach the last grade of primary education. The estimate is based on the reconstructed cohort method.
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
        ],
        [
            0.672027,
            0.666965,
            0.664065,
            0.660664,
            0.663916,
            0.669295,
            0.677297,
            0.688329,
            0.686798,
            0.688356,
            0.684377,
            0.689278,
            0.689136,
            0.69319,
            0.692022,
            0.700484,
            0.711609,
            0.727936,
            0.730575,
            0.730886,
            0.742719,
            0.744286,
            0.748626,
            0.752946,
            0.754012,
            0.762202,
            0.761068,
            0.761713,
            0.763965,
            0.764819,
            0.757996,
            0.767335,
            0.758975,
            0.749462,
            0.746309,
            0.741466,
            0.747464,
            0.754092,
            0.772682,
            0.76853,
            0.765765,
            0.767346,
            0.753631,
            0.750484,
            0.797371,
            0.796902,
            0.798215,
            0.805835,
        ],
    )
    value.loc[["female"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
        ],
        [
            0.679114,
            0.673352,
            0.670841,
            0.665051,
            0.667718,
            0.674349,
            0.685076,
            0.698729,
            0.695744,
            0.697124,
            0.692872,
            0.695902,
            0.700734,
            0.70389,
            0.702634,
            0.709909,
            0.719057,
            0.732887,
            0.733325,
            0.733855,
            0.746166,
            0.747999,
            0.752023,
            0.756935,
            0.759732,
            0.769925,
            0.770275,
            0.771772,
            0.775036,
            0.773736,
            0.771029,
            0.786615,
            0.771629,
            0.761558,
            0.758142,
            0.757387,
            0.76093,
            0.766676,
            0.784083,
            0.781961,
            0.778424,
            0.781395,
            0.767328,
            0.767567,
            0.818997,
            0.821234,
            0.814776,
            0.829103,
        ],
    )
    return value


@component.add(
    name="Net enrolment secondary historical",
    units="1/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def net_enrolment_secondary_historical():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = np.interp(
        time(),
        [
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.515403,
            0.518327,
            0.527175,
            0.536091,
            0.5437,
            0.555553,
            0.565771,
            0.574469,
            0.58152,
            0.591571,
            0.600249,
            0.607105,
            0.620955,
            0.632764,
            0.638382,
            0.648316,
            0.656666,
            0.657656,
            0.658486,
            0.662673,
            0.662658,
        ],
    )
    value.loc[["male"]] = np.interp(
        time(),
        [
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.561372,
            0.562732,
            0.570533,
            0.573919,
            0.576707,
            0.582727,
            0.589875,
            0.594934,
            0.600299,
            0.609673,
            0.616124,
            0.618743,
            0.629693,
            0.637767,
            0.637554,
            0.649643,
            0.65632,
            0.656659,
            0.658112,
            0.661317,
            0.662793,
        ],
    )
    return value


@component.add(
    name="Net intake rate in grade 1",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def net_intake_rate_in_grade_1():
    """
    Net intake rate in grade 1 is the number of new entrants in the first grade of primary education who are of official primary school entrance age, expressed as a percentage of the population of the corresponding age.
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = np.interp(
        time(),
        [
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.651358,
            0.659823,
            0.659946,
            0.658728,
            0.662043,
            0.671791,
            0.672977,
            0.677231,
            0.686237,
            0.697164,
            0.705859,
            0.702615,
            0.703141,
        ],
    )
    value.loc[["female"]] = np.interp(
        time(),
        [
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.641848,
            0.646937,
            0.656432,
            0.656568,
            0.654965,
            0.655178,
            0.66343,
            0.664672,
            0.669069,
            0.677505,
            0.68797,
            0.696344,
            0.694619,
            0.694762,
        ],
    )
    return value


@component.add(
    name="Gross enrolment primary historical",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def gross_enrolment_primary_historical():
    """
    Gross enrollment ratio is the ratio of total enrollment, regardless of age, to the population of the age group that officially corresponds to the level of education shown.
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.789667,
            0.791487,
            0.799756,
            0.822901,
            0.829701,
            0.858518,
            0.874188,
            0.876437,
            0.864985,
            0.870171,
            0.883556,
            0.892587,
            0.895741,
            0.894957,
            0.901066,
            0.907526,
            0.927891,
            0.923714,
            0.930934,
            0.933864,
            0.933188,
            0.931766,
            0.929245,
            0.931433,
            0.932693,
            0.934539,
            0.928554,
            0.926184,
            0.934147,
            0.938938,
            0.94733,
            0.957706,
            0.961468,
            0.987499,
            0.992846,
            0.99731,
            1.00048,
            1.00932,
            1.01666,
            1.01808,
            1.01776,
            1.02241,
            1.03118,
            1.03902,
            1.02666,
            1.02483,
            1.04383,
            1.03934,
            1.04135,
        ],
    )
    value.loc[["male"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.888884,
            0.891472,
            0.90122,
            0.928758,
            0.939005,
            0.95208,
            0.95845,
            0.958429,
            0.946258,
            0.951834,
            0.964922,
            0.974303,
            0.978953,
            0.980087,
            0.983832,
            0.987683,
            1.00156,
            0.993557,
            0.999319,
            1.00118,
            0.997266,
            0.990826,
            0.984419,
            0.983493,
            0.982491,
            0.98321,
            0.975608,
            0.970018,
            0.976927,
            0.979367,
            0.987694,
            0.995646,
            0.998421,
            1.01385,
            1.01879,
            1.02193,
            1.02282,
            1.03056,
            1.03418,
            1.03301,
            1.03151,
            1.03487,
            1.04173,
            1.04019,
            1.02781,
            1.02512,
            1.0395,
            1.03654,
            1.03946,
        ],
    )
    return value


@component.add(
    name="Net enrolment primary historical",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def net_enrolment_primary_historical():
    """
    WB data indicators: Net enrollment rate is the ratio of children of official school age who are enrolled in school to the population of the corresponding official school age.
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.642132,
            0.638255,
            0.648587,
            0.678352,
            0.687001,
            0.702434,
            0.708253,
            0.70584,
            0.688695,
            0.690386,
            0.704107,
            0.715603,
            0.720626,
            0.724776,
            0.729434,
            0.740194,
            0.752776,
            0.757928,
            0.766022,
            0.775644,
            0.77249,
            0.777546,
            0.776501,
            0.779925,
            0.782502,
            0.779782,
            0.779119,
            0.781425,
            0.788885,
            0.798993,
            0.80683,
            0.810111,
            0.813975,
            0.835393,
            0.847214,
            0.854408,
            0.860111,
            0.871624,
            0.876232,
            0.878541,
            0.878841,
            0.88066,
            0.88194,
            0.882025,
            0.883301,
            0.881737,
            0.883363,
            0.881706,
            0.882163,
        ],
    )
    value.loc[["male"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.78823,
            0.789945,
            0.796934,
            0.811367,
            0.816814,
            0.823521,
            0.830323,
            0.833386,
            0.829753,
            0.834347,
            0.84292,
            0.848162,
            0.851865,
            0.852753,
            0.853031,
            0.855005,
            0.858035,
            0.859186,
            0.864358,
            0.868385,
            0.864827,
            0.8658,
            0.862339,
            0.860039,
            0.857402,
            0.852783,
            0.847991,
            0.846462,
            0.850446,
            0.854332,
            0.859007,
            0.860553,
            0.861181,
            0.86629,
            0.875184,
            0.88054,
            0.883334,
            0.896384,
            0.896258,
            0.893531,
            0.893335,
            0.892029,
            0.89765,
            0.897401,
            0.900623,
            0.901001,
            0.904264,
            0.902825,
            0.905316,
        ],
    )
    return value


@component.add(
    name="Gross enrolment secondary historical",
    units="1/Year",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def gross_enrolment_secondary_historical():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.34457,
            0.368595,
            0.384467,
            0.39894,
            0.404453,
            0.412452,
            0.42842,
            0.439239,
            0.442274,
            0.452968,
            0.446433,
            0.437467,
            0.428865,
            0.430829,
            0.430789,
            0.418928,
            0.449067,
            0.458918,
            0.463141,
            0.465038,
            0.468862,
            0.480682,
            0.494722,
            0.509032,
            0.521684,
            0.533777,
            0.545408,
            0.551277,
            0.562265,
            0.566647,
            0.573569,
            0.578331,
            0.587613,
            0.601736,
            0.611679,
            0.623131,
            0.635747,
            0.654191,
            0.672312,
            0.684076,
            0.698406,
            0.711148,
            0.720403,
            0.738959,
            0.748815,
            0.749424,
            0.752362,
            0.748956,
            0.751078,
        ],
    )
    value.loc[["male"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.454185,
            0.483164,
            0.504075,
            0.517345,
            0.51627,
            0.518016,
            0.534599,
            0.544126,
            0.538723,
            0.547448,
            0.541275,
            0.533601,
            0.525185,
            0.52172,
            0.527531,
            0.516484,
            0.542618,
            0.549203,
            0.552441,
            0.551409,
            0.554988,
            0.565614,
            0.578468,
            0.592727,
            0.599428,
            0.607112,
            0.616237,
            0.617314,
            0.620208,
            0.618089,
            0.623769,
            0.62736,
            0.635166,
            0.641059,
            0.650569,
            0.657811,
            0.668973,
            0.683907,
            0.698357,
            0.703291,
            0.721982,
            0.733254,
            0.740379,
            0.750608,
            0.757288,
            0.758608,
            0.760396,
            0.758266,
            0.759837,
        ],
    )
    return value


@component.add(
    name="Gross enrolment tertiary historical",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 2},
)
def gross_enrolment_tertiary_historical():
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["female"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.082582,
            0.083288,
            0.0853796,
            0.0883727,
            0.0919498,
            0.0969259,
            0.101497,
            0.104095,
            0.107493,
            0.109522,
            0.111657,
            0.114511,
            0.116839,
            0.118544,
            0.121834,
            0.122753,
            0.121486,
            0.122613,
            0.122856,
            0.124838,
            0.12811,
            0.130651,
            0.134324,
            0.135856,
            0.144311,
            0.151232,
            0.153217,
            0.162019,
            0.170839,
            0.18284,
            0.190277,
            0.201123,
            0.219423,
            0.23163,
            0.241317,
            0.24943,
            0.260055,
            0.269373,
            0.280611,
            0.29195,
            0.306915,
            0.325764,
            0.342551,
            0.351806,
            0.377782,
            0.388985,
            0.396611,
            0.402733,
            0.40605,
        ],
    )
    value.loc[["male"]] = np.interp(
        time(),
        [
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
        ],
        [
            0.111699,
            0.114442,
            0.116193,
            0.11771,
            0.120519,
            0.12525,
            0.130942,
            0.130087,
            0.132478,
            0.133644,
            0.135137,
            0.138185,
            0.138976,
            0.141022,
            0.144521,
            0.144824,
            0.144298,
            0.145107,
            0.142477,
            0.143054,
            0.143916,
            0.145122,
            0.146149,
            0.1451,
            0.154218,
            0.159389,
            0.16044,
            0.167417,
            0.175415,
            0.184979,
            0.191291,
            0.201544,
            0.214189,
            0.225431,
            0.232511,
            0.237646,
            0.244118,
            0.251772,
            0.261057,
            0.271237,
            0.284959,
            0.30279,
            0.312664,
            0.317939,
            0.338862,
            0.34828,
            0.352668,
            0.355997,
            0.356392,
        ],
    )
    return value


@component.add(
    name="RCMW Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcmw_var_s": 1},
    other_deps={
        "_smooth_rcmw_var_s": {
            "initial": {"rcmw_s": 1, "time": 1},
            "step": {"rcmw_s": 1, "time": 1},
        }
    },
)
def rcmw_var_s():
    """
    Reference change in wind energy market share due to price competitiveness.
    """
    return 3 + _smooth_rcmw_var_s()


_smooth_rcmw_var_s = Smooth(
    lambda: step(__data["time"], rcmw_s() - 3, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcmw_s() - 3, 2020),
    lambda: 1,
    "_smooth_rcmw_var_s",
)


@component.add(name="RCBI S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def rcbi_s():
    """
    Reference change in biomass energy market share due to price competitiveness.
    """
    return 1.5


@component.add(
    name="RCBI Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcbi_var_s": 1},
    other_deps={
        "_smooth_rcbi_var_s": {
            "initial": {"rcbi_s": 1, "time": 1},
            "step": {"rcbi_s": 1, "time": 1},
        }
    },
)
def rcbi_var_s():
    """
    Reference change in biomass energy market share due to price competitiveness.
    """
    return 1.5 + _smooth_rcbi_var_s()


_smooth_rcbi_var_s = Smooth(
    lambda: step(__data["time"], rcbi_s() - 1.5, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcbi_s() - 1.5, 2020),
    lambda: 1,
    "_smooth_rcbi_var_s",
)


@component.add(name="RCMW S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def rcmw_s():
    """
    Reference change in wind energy market share due to price competitiveness.
    """
    return 3


@component.add(
    name="Reference Change in Market Share Solar Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_change_in_market_share_solar_variation():
    """
    Reference change in solar energy market share due to price competitiveness.
    """
    return 8


@component.add(name="RCMS S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def rcms_s():
    """
    Reference change in solar energy market share due to price competitiveness.
    """
    return 4.5


@component.add(
    name="RCMS Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcms_var_s": 1},
    other_deps={
        "_smooth_rcms_var_s": {
            "initial": {"rcms_s": 1, "time": 1},
            "step": {"rcms_s": 1, "time": 1},
        }
    },
)
def rcms_var_s():
    """
    Reference change in solar energy market share due to price competitiveness.
    """
    return 4.5 + _smooth_rcms_var_s()


_smooth_rcms_var_s = Smooth(
    lambda: step(__data["time"], rcms_s() - 4.5, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcms_s() - 4.5, 2020),
    lambda: 1,
    "_smooth_rcms_var_s",
)


@component.add(
    name="Reference Change in Market Share Biomass Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_change_in_market_share_biomass_variation():
    """
    Reference change in biomass energy market share due to price competitiveness.
    """
    return 3.25


@component.add(
    name="Reference Change in Market Share Wind Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_change_in_market_share_wind_variation():
    """
    Reference change in wind energy market share due to price competitiveness.
    """
    return 6


@component.add(
    name="Annual Change in Oil Reserves",
    units="Barrel/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"uro_var_s": 1, "_smooth_annual_change_in_oil_reserves": 1, "time": 1},
    other_deps={
        "_smooth_annual_change_in_oil_reserves": {
            "initial": {
                "annual_change_in_oil_reserves_variation": 1,
                "uro_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "annual_change_in_oil_reserves_variation": 1,
                "uro_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def annual_change_in_oil_reserves():
    return step(
        __data["time"], uro_var_s() + _smooth_annual_change_in_oil_reserves(), 2010
    )


_smooth_annual_change_in_oil_reserves = Smooth(
    lambda: step(
        __data["time"],
        annual_change_in_oil_reserves_variation() - uro_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        annual_change_in_oil_reserves_variation() - uro_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_annual_change_in_oil_reserves",
)


@component.add(
    name="SCENARIO ON",
    units="Dmnl",
    limits=(0.0, 1.0, 1.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1},
)
def scenario_on():
    """
    Scenario is on to consider the impact on GDP
    """
    return step(__data["time"], 1, 2010)


@component.add(
    name="URO Var S",
    units="Barrel/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_uro_var_s": 1},
    other_deps={
        "_smooth_uro_var_s": {
            "initial": {"uro_s": 1, "time": 1},
            "step": {"uro_s": 1, "time": 1},
        }
    },
)
def uro_var_s():
    return 5000000000.0 + _smooth_uro_var_s()


_smooth_uro_var_s = Smooth(
    lambda: step(__data["time"], uro_s() - 5000000000.0, 2020),
    lambda: 1,
    lambda: step(__data["time"], uro_s() - 5000000000.0, 2020),
    lambda: 1,
    "_smooth_uro_var_s",
)


@component.add(
    name="URO S",
    units="Barrel/Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def uro_s():
    return 5000000000.0


@component.add(
    name="Rate of New Discovery Oil",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mtoe_per_barrel": 1, "annual_change_in_oil_reserves": 1},
)
def rate_of_new_discovery_oil():
    return mtoe_per_barrel() * annual_change_in_oil_reserves()


@component.add(
    name="URG Var S",
    units="Billion Cubic Meters/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_urg_var_s": 1},
    other_deps={
        "_smooth_urg_var_s": {
            "initial": {"urg_s": 1, "time": 1},
            "step": {"urg_s": 1, "time": 1},
        }
    },
)
def urg_var_s():
    return 3400 + _smooth_urg_var_s()


_smooth_urg_var_s = Smooth(
    lambda: step(__data["time"], urg_s() - 3400, 2020),
    lambda: 1,
    lambda: step(__data["time"], urg_s() - 3400, 2020),
    lambda: 1,
    "_smooth_urg_var_s",
)


@component.add(
    name="Annual Growth in Gas Reserves",
    units="Billion Cubic Meters/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"urg_var_s": 1, "_smooth_annual_growth_in_gas_reserves": 1, "time": 1},
    other_deps={
        "_smooth_annual_growth_in_gas_reserves": {
            "initial": {
                "annual_growth_in_gas_reserves_variation": 1,
                "urg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "annual_growth_in_gas_reserves_variation": 1,
                "urg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def annual_growth_in_gas_reserves():
    """
    We asssumed the gas boost equal to the average annual growth in the total proved gas reserves is 2.2 Trillion cubic meters in the last 20 years (1999-2019).
    """
    return step(
        __data["time"], urg_var_s() + _smooth_annual_growth_in_gas_reserves(), 2010
    )


_smooth_annual_growth_in_gas_reserves = Smooth(
    lambda: step(
        __data["time"],
        annual_growth_in_gas_reserves_variation() - urg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        annual_growth_in_gas_reserves_variation() - urg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_annual_growth_in_gas_reserves",
)


@component.add(
    name="Initial World Stock of Gas Billion Cubic meter",
    units="Billion Cubic Meters",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_world_stock_of_gas_billion_cubic_meter():
    return 849505


@component.add(
    name="Mtoe per Billion Cubic meter",
    units="Mtoe/Billion Cubic Meters",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mtoe_per_billion_cubic_meter():
    """
    Unit conversion: https://www.bp.com/content/dam/bp/business-sites/en/global/corporate/pdfs/e nergy-economics/statistical-review/bp-stats-review-2019-approximate-convers ion-factors.pdf
    """
    return 0.86


@component.add(
    name="Rate of New Discovery Gas",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_growth_in_gas_reserves": 1, "mtoe_per_billion_cubic_meter": 1},
)
def rate_of_new_discovery_gas():
    return annual_growth_in_gas_reserves() * mtoe_per_billion_cubic_meter()


@component.add(
    name="URG S",
    units="Billion Cubic Meters/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def urg_s():
    return 3400


@component.add(name="VM S", units="1/Year", comp_type="Constant", comp_subtype="Normal")
def vm_s():
    return 0.01


@component.add(
    name="CI S", units="kcal/(Person*Day)", comp_type="Constant", comp_subtype="Normal"
)
def ci_s():
    """
    1961 World average, from FAO data - 2194 kcal Calibrated 1672.6 kcal 1970 value, when gdp effect=1:2325
    """
    return 1672.6


@component.add(
    name="CI Var S",
    units="kcal/(Person*Day)",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_ci_var_s": 1},
    other_deps={
        "_smooth_ci_var_s": {
            "initial": {"ci_s": 1, "time": 1},
            "step": {"ci_s": 1, "time": 1},
        }
    },
)
def ci_var_s():
    """
    1961 World average, from FAO data - 2194 kcal Calibrated 1672.6 kcal 1970 value, when gdp effect=1:2325
    """
    return 1672.6 + _smooth_ci_var_s()


_smooth_ci_var_s = Smooth(
    lambda: step(__data["time"], ci_s() - 1672.6, 2020),
    lambda: 1,
    lambda: step(__data["time"], ci_s() - 1672.6, 2020),
    lambda: 1,
    "_smooth_ci_var_s",
)


@component.add(
    name="VM Var S",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_vm_var_s": 1},
    other_deps={
        "_smooth_vm_var_s": {
            "initial": {"vm_s": 1, "time": 1},
            "step": {"vm_s": 1, "time": 1},
        }
    },
)
def vm_var_s():
    return 0.01 + _smooth_vm_var_s()


_smooth_vm_var_s = Smooth(
    lambda: step(__data["time"], vm_s() - 0.01, 2020),
    lambda: 1,
    lambda: step(__data["time"], vm_s() - 0.01, 2020),
    lambda: 1,
    "_smooth_vm_var_s",
)


@component.add(
    name="Normal Shift Fraction from Vegetarianism to Meat",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "vm_var_s": 1,
        "_smooth_normal_shift_fraction_from_vegetarianism_to_meat": 1,
    },
    other_deps={
        "_smooth_normal_shift_fraction_from_vegetarianism_to_meat": {
            "initial": {
                "normal_shift_fraction_from_vegetarianism_to_meat_variation": 1,
                "vm_var_s": 1,
                "l_var_t": 1,
                "time": 1,
            },
            "step": {
                "normal_shift_fraction_from_vegetarianism_to_meat_variation": 1,
                "vm_var_s": 1,
                "l_var_t": 1,
                "time": 1,
                "ssp_food_and_diet_variation_time": 1,
            },
        }
    },
)
def normal_shift_fraction_from_vegetarianism_to_meat():
    return vm_var_s() + _smooth_normal_shift_fraction_from_vegetarianism_to_meat()


_smooth_normal_shift_fraction_from_vegetarianism_to_meat = Smooth(
    lambda: step(
        __data["time"],
        normal_shift_fraction_from_vegetarianism_to_meat_variation() - vm_var_s(),
        2020 + l_var_t(),
    ),
    lambda: ssp_food_and_diet_variation_time(),
    lambda: step(
        __data["time"],
        normal_shift_fraction_from_vegetarianism_to_meat_variation() - vm_var_s(),
        2020 + l_var_t(),
    ),
    lambda: 1,
    "_smooth_normal_shift_fraction_from_vegetarianism_to_meat",
)


@component.add(
    name="MY Var S",
    units="Ton/ha",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_my_var_s": 1},
    other_deps={
        "_smooth_my_var_s": {
            "initial": {"my_s": 1, "time": 1},
            "step": {"my_s": 1, "time": 1},
        }
    },
)
def my_var_s():
    return 0.1877 + _smooth_my_var_s()


_smooth_my_var_s = Smooth(
    lambda: step(__data["time"], my_s() - 0.1877, 2020),
    lambda: 1,
    lambda: step(__data["time"], my_s() - 0.1877, 2020),
    lambda: 1,
    "_smooth_my_var_s",
)


@component.add(name="AF S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def af_s():
    return 0.95


@component.add(
    name="AF Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_af_var_s": 1},
    other_deps={
        "_smooth_af_var_s": {
            "initial": {"af_s": 1, "time": 1},
            "step": {"af_s": 1, "time": 1},
        }
    },
)
def af_var_s():
    return 0.95 + _smooth_af_var_s()


_smooth_af_var_s = Smooth(
    lambda: step(__data["time"], af_s() - 0.95, 2020),
    lambda: 1,
    lambda: step(__data["time"], af_s() - 0.95, 2020),
    lambda: 1,
    "_smooth_af_var_s",
)


@component.add(
    name="FAT Var S",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_fat_var_s": 1},
    other_deps={
        "_smooth_fat_var_s": {
            "initial": {"fat_s": 1, "time": 1},
            "step": {"fat_s": 1, "time": 1},
        }
    },
)
def fat_var_s():
    return 5 + _smooth_fat_var_s()


_smooth_fat_var_s = Smooth(
    lambda: step(__data["time"], fat_s() - 5, 2020),
    lambda: 1,
    lambda: step(__data["time"], fat_s() - 5, 2020),
    lambda: 1,
    "_smooth_fat_var_s",
)


@component.add(name="MY S", units="Ton/ha", comp_type="Constant", comp_subtype="Normal")
def my_s():
    return 0.1877


@component.add(
    name="Fraction of Agricultural Land Conversion from Forest",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "af_var_s": 1,
        "_smooth_fraction_of_agricultural_land_conversion_from_forest": 1,
    },
    other_deps={
        "_smooth_fraction_of_agricultural_land_conversion_from_forest": {
            "initial": {
                "fraction_of_agricultural_land_conversion_from_forest_variation": 1,
                "af_var_s": 1,
                "l_var_t": 1,
                "time": 1,
            },
            "step": {
                "fraction_of_agricultural_land_conversion_from_forest_variation": 1,
                "af_var_s": 1,
                "l_var_t": 1,
                "time": 1,
                "ssp_land_use_change_variation_time": 1,
            },
        }
    },
)
def fraction_of_agricultural_land_conversion_from_forest():
    return af_var_s() + _smooth_fraction_of_agricultural_land_conversion_from_forest()


_smooth_fraction_of_agricultural_land_conversion_from_forest = Smooth(
    lambda: step(
        __data["time"],
        fraction_of_agricultural_land_conversion_from_forest_variation() - af_var_s(),
        2020 + l_var_t(),
    ),
    lambda: ssp_land_use_change_variation_time(),
    lambda: step(
        __data["time"],
        fraction_of_agricultural_land_conversion_from_forest_variation() - af_var_s(),
        2020 + l_var_t(),
    ),
    lambda: 1,
    "_smooth_fraction_of_agricultural_land_conversion_from_forest",
)


@component.add(
    name="DE S", units="TonC/Year", comp_type="Constant", comp_subtype="Normal"
)
def de_s():
    """
    The upper level of acceptable total carbon emission from fossil fuels.
    """
    return 7500000000.0


@component.add(
    name="L Var T", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def l_var_t():
    return 0


@component.add(name="FAT S", units="Year", comp_type="Constant", comp_subtype="Normal")
def fat_s():
    return 5


@component.add(
    name="Waste Fraction PasMeat CropMeat Variation 0 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def waste_fraction_pasmeat_cropmeat_variation_0_0():
    return 1


@component.add(
    name="TC Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_tc_var_s": 1},
    other_deps={
        "_smooth_tc_var_s": {
            "initial": {"tc_s": 1, "time": 1},
            "step": {"tc_s": 1, "time": 1},
        }
    },
)
def tc_var_s():
    return 0.3 + _smooth_tc_var_s()


_smooth_tc_var_s = Smooth(
    lambda: step(__data["time"], tc_s() - 0.3, 2020),
    lambda: 1,
    lambda: step(__data["time"], tc_s() - 0.3, 2020),
    lambda: 1,
    "_smooth_tc_var_s",
)


@component.add(
    name="Waste Fraction PasMeat CropMeat Variation 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def waste_fraction_pasmeat_cropmeat_variation_0():
    return 1


@component.add(name="TC S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def tc_s():
    return 0.3


@component.add(
    name="DE Var S",
    units="TonC/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_de_var_s": 1},
    other_deps={
        "_smooth_de_var_s": {
            "initial": {"de_s": 1, "time": 1},
            "step": {"de_s": 1, "time": 1},
        }
    },
)
def de_var_s():
    """
    The upper level of acceptable total carbon emission from fossil fuels.
    """
    return 7500000000.0 + _smooth_de_var_s()


_smooth_de_var_s = Smooth(
    lambda: step(__data["time"], de_s() - 7500000000.0, 2020),
    lambda: 1,
    lambda: step(__data["time"], de_s() - 7500000000.0, 2020),
    lambda: 1,
    "_smooth_de_var_s",
)


@component.add(
    name="RCW S", units="1/Year", comp_type="Constant", comp_subtype="Normal"
)
def rcw_s():
    """
    Final Educational Attainment Change Rate
    """
    return 7


@component.add(
    name="MFC S", units="$/Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def mfc_s():
    return 1000000000.0


@component.add(
    name="RCB S", units="1/Year", comp_type="Constant", comp_subtype="Normal"
)
def rcb_s():
    """
    Final Educational Attainment Change Rate
    """
    return 30000000.0


@component.add(
    name="RCB Var S",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcb_var_s": 1},
    other_deps={
        "_smooth_rcb_var_s": {
            "initial": {"rcb_s": 1, "time": 1},
            "step": {"rcb_s": 1, "time": 1},
        }
    },
)
def rcb_var_s():
    """
    Final Educational Attainment Change Rate
    """
    return 30000000.0 + _smooth_rcb_var_s()


_smooth_rcb_var_s = Smooth(
    lambda: step(__data["time"], rcb_s() - 30000000.0, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcb_s() - 30000000.0, 2020),
    lambda: 1,
    "_smooth_rcb_var_s",
)


@component.add(
    name="Final Change Rate13",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcb_var_s": 1, "_smooth_final_change_rate13": 1},
    other_deps={
        "_smooth_final_change_rate13": {
            "initial": {
                "reference_cost_of_biomass_energy_production_final_change_rate_variation": 1,
                "rcb_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_cost_of_biomass_energy_production_final_change_rate_variation": 1,
                "rcb_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def final_change_rate13():
    """
    Final Educational Attainment Change Rate
    """
    return rcb_var_s() + _smooth_final_change_rate13()


_smooth_final_change_rate13 = Smooth(
    lambda: step(
        __data["time"],
        reference_cost_of_biomass_energy_production_final_change_rate_variation()
        - rcb_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        reference_cost_of_biomass_energy_production_final_change_rate_variation()
        - rcb_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_final_change_rate13",
)


@component.add(
    name="Final Change Rate14",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcs_var_s": 1, "_smooth_final_change_rate14": 1},
    other_deps={
        "_smooth_final_change_rate14": {
            "initial": {
                "reference_cost_of_solar_energy_production_final_change_rate_variation": 1,
                "rcs_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_cost_of_solar_energy_production_final_change_rate_variation": 1,
                "rcs_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def final_change_rate14():
    """
    Final Educational Attainment Change Rate
    """
    return rcs_var_s() + _smooth_final_change_rate14()


_smooth_final_change_rate14 = Smooth(
    lambda: step(
        __data["time"],
        reference_cost_of_solar_energy_production_final_change_rate_variation()
        - rcs_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        reference_cost_of_solar_energy_production_final_change_rate_variation()
        - rcs_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_final_change_rate14",
)


@component.add(
    name="RCS S", units="1/Year", comp_type="Constant", comp_subtype="Normal"
)
def rcs_s():
    """
    Final Educational Attainment Change Rate
    """
    return 10


@component.add(
    name="RCS Var S",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcs_var_s": 1},
    other_deps={
        "_smooth_rcs_var_s": {
            "initial": {"rcs_s": 1, "time": 1},
            "step": {"rcs_s": 1, "time": 1},
        }
    },
)
def rcs_var_s():
    """
    Final Educational Attainment Change Rate
    """
    return 10 + _smooth_rcs_var_s()


_smooth_rcs_var_s = Smooth(
    lambda: step(__data["time"], rcs_s() - 10, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcs_s() - 10, 2020),
    lambda: 1,
    "_smooth_rcs_var_s",
)


@component.add(name="SA S", units="m*m", comp_type="Constant", comp_subtype="Normal")
def sa_s():
    """
    Total area available for solar energy production capacities.
    """
    return 500000000000.0


@component.add(
    name="RCW Var S",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcw_var_s": 1},
    other_deps={
        "_smooth_rcw_var_s": {
            "initial": {"rcw_s": 1, "time": 1},
            "step": {"rcw_s": 1, "time": 1},
        }
    },
)
def rcw_var_s():
    """
    Final Educational Attainment Change Rate
    """
    return 7 + _smooth_rcw_var_s()


_smooth_rcw_var_s = Smooth(
    lambda: step(__data["time"], rcw_s() - 7, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcw_s() - 7, 2020),
    lambda: 1,
    "_smooth_rcw_var_s",
)


@component.add(
    name="MFC Var S",
    units="$/Mtoe",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_mfc_var_s": 1},
    other_deps={
        "_smooth_mfc_var_s": {
            "initial": {"mfc_s": 1, "time": 1},
            "step": {"mfc_s": 1, "time": 1},
        }
    },
)
def mfc_var_s():
    return 1000000000.0 + _smooth_mfc_var_s()


_smooth_mfc_var_s = Smooth(
    lambda: step(__data["time"], mfc_s() - 1000000000.0, 2020),
    lambda: 1,
    lambda: step(__data["time"], mfc_s() - 1000000000.0, 2020),
    lambda: 1,
    "_smooth_mfc_var_s",
)


@component.add(name="UC S", units="Mtoe", comp_type="Constant", comp_subtype="Normal")
def uc_s():
    return 900000


@component.add(
    name="UC Var S",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_uc_var_s": 1},
    other_deps={
        "_smooth_uc_var_s": {
            "initial": {"uc_s": 1, "time": 1},
            "step": {"uc_s": 1, "time": 1},
        }
    },
)
def uc_var_s():
    return 900000 + _smooth_uc_var_s()


_smooth_uc_var_s = Smooth(
    lambda: step(__data["time"], uc_s() - 900000, 2020),
    lambda: 1,
    lambda: step(__data["time"], uc_s() - 900000, 2020),
    lambda: 1,
    "_smooth_uc_var_s",
)


@component.add(
    name="Final Change Rate15",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcw_var_s": 1, "_smooth_final_change_rate15": 1},
    other_deps={
        "_smooth_final_change_rate15": {
            "initial": {
                "reference_cost_of_wind_energy_production_final_change_rate_variation": 1,
                "rcw_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_cost_of_wind_energy_production_final_change_rate_variation": 1,
                "rcw_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def final_change_rate15():
    """
    Final Educational Attainment Change Rate
    """
    return rcw_var_s() + _smooth_final_change_rate15()


_smooth_final_change_rate15 = Smooth(
    lambda: step(
        __data["time"],
        reference_cost_of_wind_energy_production_final_change_rate_variation()
        - rcw_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        reference_cost_of_wind_energy_production_final_change_rate_variation()
        - rcw_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_final_change_rate15",
)


@component.add(
    name="SA Var S",
    units="m*m",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_sa_var_s": 1},
    other_deps={
        "_smooth_sa_var_s": {
            "initial": {"sa_s": 1, "time": 1},
            "step": {"sa_s": 1, "time": 1},
        }
    },
)
def sa_var_s():
    """
    Total area available for solar energy production capacities.
    """
    return 500000000000.0 + _smooth_sa_var_s()


_smooth_sa_var_s = Smooth(
    lambda: step(__data["time"], sa_s() - 500000000000.0, 2020),
    lambda: 1,
    lambda: step(__data["time"], sa_s() - 500000000000.0, 2020),
    lambda: 1,
    "_smooth_sa_var_s",
)


@component.add(
    name="IF S",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def if_s():
    return 5


@component.add(
    name="IF Var S",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_if_var_s": 1},
    other_deps={
        "_smooth_if_var_s": {
            "initial": {"if_s": 1, "time": 1},
            "step": {"if_s": 1, "time": 1},
        }
    },
)
def if_var_s():
    return 5 + _smooth_if_var_s()


_smooth_if_var_s = Smooth(
    lambda: step(__data["time"], if_s() - 5, 2020),
    lambda: 1,
    lambda: step(__data["time"], if_s() - 5, 2020),
    lambda: 1,
    "_smooth_if_var_s",
)


@component.add(
    name="FO S",
    units="Dmnl",
    limits=(0.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def fo_s():
    """
    Percentage of total oil sector revenue dedicated to exploration and production technology development.
    """
    return 0.04


@component.add(
    name="FO Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_fo_var_s": 1},
    other_deps={
        "_smooth_fo_var_s": {
            "initial": {"fo_s": 1, "time": 1},
            "step": {"fo_s": 1, "time": 1},
        }
    },
)
def fo_var_s():
    """
    Percentage of total oil sector revenue dedicated to exploration and production technology development.
    """
    return 0.04 + _smooth_fo_var_s()


_smooth_fo_var_s = Smooth(
    lambda: step(__data["time"], fo_s() - 0.04, 2020),
    lambda: 1,
    lambda: step(__data["time"], fo_s() - 0.04, 2020),
    lambda: 1,
    "_smooth_fo_var_s",
)


@component.add(
    name="FG Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_fg_var_s": 1},
    other_deps={
        "_smooth_fg_var_s": {
            "initial": {"fg_s": 1, "time": 1},
            "step": {"fg_s": 1, "time": 1},
        }
    },
)
def fg_var_s():
    """
    Percentage of total gas sector revenue dedicated to exploration and production technology development.
    """
    return 0.4 + _smooth_fg_var_s()


_smooth_fg_var_s = Smooth(
    lambda: step(__data["time"], fg_s() - 0.4, 2020),
    lambda: 1,
    lambda: step(__data["time"], fg_s() - 0.4, 2020),
    lambda: 1,
    "_smooth_fg_var_s",
)


@component.add(name="SC S", units="1/Year", comp_type="Constant", comp_subtype="Normal")
def sc_s():
    """
    Final Educational Attainment Change Rate
    """
    return 2


@component.add(
    name="SC Var S",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_sc_var_s": 1},
    other_deps={
        "_smooth_sc_var_s": {
            "initial": {"sc_s": 1, "time": 1},
            "step": {"sc_s": 1, "time": 1},
        }
    },
)
def sc_var_s():
    """
    Final Educational Attainment Change Rate
    """
    return 2 + _smooth_sc_var_s()


_smooth_sc_var_s = Smooth(
    lambda: step(__data["time"], sc_s() - 2, 2020),
    lambda: 1,
    lambda: step(__data["time"], sc_s() - 2, 2020),
    lambda: 1,
    "_smooth_sc_var_s",
)


@component.add(
    name="FG S",
    units="Dmnl",
    limits=(0.0, 0.6),
    comp_type="Constant",
    comp_subtype="Normal",
)
def fg_s():
    """
    Percentage of total gas sector revenue dedicated to exploration and production technology development.
    """
    return 0.4


@component.add(
    name="FC Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_fc_var_s": 1},
    other_deps={
        "_smooth_fc_var_s": {
            "initial": {"fc_s": 1, "time": 1},
            "step": {"fc_s": 1, "time": 1},
        }
    },
)
def fc_var_s():
    """
    Percentage of total coal sector revenue dedicated to exploration and production technology development.
    """
    return 0.03 + _smooth_fc_var_s()


_smooth_fc_var_s = Smooth(
    lambda: step(__data["time"], fc_s() - 0.03, 2020),
    lambda: 1,
    lambda: step(__data["time"], fc_s() - 0.03, 2020),
    lambda: 1,
    "_smooth_fc_var_s",
)


@component.add(
    name="WC Var S",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_wc_var_s": 1},
    other_deps={
        "_smooth_wc_var_s": {
            "initial": {"wc_s": 1, "time": 1},
            "step": {"wc_s": 1, "time": 1},
        }
    },
)
def wc_var_s():
    """
    Final Educational Attainment Change Rate
    """
    return 0.35 + _smooth_wc_var_s()


_smooth_wc_var_s = Smooth(
    lambda: step(__data["time"], wc_s() - 0.35, 2020),
    lambda: 1,
    lambda: step(__data["time"], wc_s() - 0.35, 2020),
    lambda: 1,
    "_smooth_wc_var_s",
)


@component.add(
    name="Final Change Rate3",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"wc_var_s": 1, "_smooth_final_change_rate3": 1},
    other_deps={
        "_smooth_final_change_rate3": {
            "initial": {
                "average_wind_capacity_per_sqmeter_final_change_rate_variation": 1,
                "wc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "average_wind_capacity_per_sqmeter_final_change_rate_variation": 1,
                "wc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def final_change_rate3():
    """
    Final Educational Attainment Change Rate
    """
    return wc_var_s() + _smooth_final_change_rate3()


_smooth_final_change_rate3 = Smooth(
    lambda: step(
        __data["time"],
        average_wind_capacity_per_sqmeter_final_change_rate_variation() - wc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        average_wind_capacity_per_sqmeter_final_change_rate_variation() - wc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_final_change_rate3",
)


@component.add(name="FC S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def fc_s():
    """
    Percentage of total coal sector revenue dedicated to exploration and production technology development.
    """
    return 0.03


@component.add(
    name="Final Change Rate2",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"sc_var_s": 1, "_smooth_final_change_rate2": 1},
    other_deps={
        "_smooth_final_change_rate2": {
            "initial": {
                "solar_conversion_efficiency_factor_final_change_rate_variation": 1,
                "sc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "solar_conversion_efficiency_factor_final_change_rate_variation": 1,
                "sc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def final_change_rate2():
    """
    Final Educational Attainment Change Rate
    """
    return sc_var_s() + _smooth_final_change_rate2()


_smooth_final_change_rate2 = Smooth(
    lambda: step(
        __data["time"],
        solar_conversion_efficiency_factor_final_change_rate_variation() - sc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        solar_conversion_efficiency_factor_final_change_rate_variation() - sc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_final_change_rate2",
)


@component.add(name="WC S", units="1/Year", comp_type="Constant", comp_subtype="Normal")
def wc_s():
    """
    Final Educational Attainment Change Rate
    """
    return 0.35


@component.add(
    name="RPC Var S",
    units="toe/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rpc_var_s": 1},
    other_deps={
        "_smooth_rpc_var_s": {
            "initial": {"rpc_s": 1, "time": 1},
            "step": {"rpc_s": 1, "time": 1},
        }
    },
)
def rpc_var_s():
    """
    Relative Productivity of Investment in Coal Exploration without taking into account remaining undiscovered coal resources and advances in exploration technologies.
    """
    return 0.5 + _smooth_rpc_var_s()


_smooth_rpc_var_s = Smooth(
    lambda: step(__data["time"], rpc_s() - 0.5, 2020),
    lambda: 1,
    lambda: step(__data["time"], rpc_s() - 0.5, 2020),
    lambda: 1,
    "_smooth_rpc_var_s",
)


@component.add(
    name="FDR S",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def fdr_s():
    return 6


@component.add(
    name="FDR Var S",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_fdr_var_s": 1},
    other_deps={
        "_smooth_fdr_var_s": {
            "initial": {"fdr_s": 1, "time": 1},
            "step": {"fdr_s": 1, "time": 1},
        }
    },
)
def fdr_var_s():
    return 6 + _smooth_fdr_var_s()


_smooth_fdr_var_s = Smooth(
    lambda: step(__data["time"], fdr_s() - 6, 2020),
    lambda: 1,
    lambda: step(__data["time"], fdr_s() - 6, 2020),
    lambda: 1,
    "_smooth_fdr_var_s",
)


@component.add(name="EIGR S", units="1/$", comp_type="Constant", comp_subtype="Normal")
def eigr_s():
    """
    Effectiveness of resources dedicated to gas recovery technology development.
    """
    return 3e-11


@component.add(
    name="EIGR Var S",
    units="1/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_eigr_var_s": 1},
    other_deps={
        "_smooth_eigr_var_s": {
            "initial": {"eigr_s": 1, "time": 1},
            "step": {"eigr_s": 1, "time": 1},
        }
    },
)
def eigr_var_s():
    """
    Effectiveness of resources dedicated to gas recovery technology development.
    """
    return 3e-11 + _smooth_eigr_var_s()


_smooth_eigr_var_s = Smooth(
    lambda: step(__data["time"], eigr_s() - 3e-11, 2020),
    lambda: 1,
    lambda: step(__data["time"], eigr_s() - 3e-11, 2020),
    lambda: 1,
    "_smooth_eigr_var_s",
)


@component.add(
    name="EIOR S",
    units="1/$",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def eior_s():
    """
    Effectiveness of resources dedicated to recovery technology development.
    """
    return 2.8e-11


@component.add(
    name="EIOR Var S",
    units="1/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_eior_var_s": 1},
    other_deps={
        "_smooth_eior_var_s": {
            "initial": {"eior_s": 1, "time": 1},
            "step": {"eior_s": 1, "time": 1},
        }
    },
)
def eior_var_s():
    """
    Effectiveness of resources dedicated to recovery technology development.
    """
    return 2.8e-11 + _smooth_eior_var_s()


_smooth_eior_var_s = Smooth(
    lambda: step(__data["time"], eior_s() - 2.8e-11, 2020),
    lambda: 1,
    lambda: step(__data["time"], eior_s() - 2.8e-11, 2020),
    lambda: 1,
    "_smooth_eior_var_s",
)


@component.add(
    name="RPC S",
    units="toe/$",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rpc_s():
    """
    Relative Productivity of Investment in Coal Exploration without taking into account remaining undiscovered coal resources and advances in exploration technologies.
    """
    return 0.5


@component.add(
    name="SF S",
    units="Dmnl",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def sf_s():
    return 1.4


@component.add(
    name="Fossil Fuel Discovery and Recovery Technology Development Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fossil_fuel_discovery_and_recovery_technology_development_time_variation():
    return 6


@component.add(
    name="RPPE Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rppe_var_s": 1},
    other_deps={
        "_smooth_rppe_var_s": {
            "initial": {"rppe_s": 1, "time": 1},
            "step": {"rppe_s": 1, "time": 1},
        }
    },
)
def rppe_var_s():
    return 10 + _smooth_rppe_var_s()


_smooth_rppe_var_s = Smooth(
    lambda: step(__data["time"], rppe_s() - 10, 2020),
    lambda: 1,
    lambda: step(__data["time"], rppe_s() - 10, 2020),
    lambda: 1,
    "_smooth_rppe_var_s",
)


@component.add(
    name="SF Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_sf_var_s": 1},
    other_deps={
        "_smooth_sf_var_s": {
            "initial": {"sf_s": 1, "time": 1},
            "step": {"sf_s": 1, "time": 1},
        }
    },
)
def sf_var_s():
    return 2 + _smooth_sf_var_s()


_smooth_sf_var_s = Smooth(
    lambda: step(__data["time"], sf_s() - 2, 2020),
    lambda: 1,
    lambda: step(__data["time"], sf_s() - 2, 2020),
    lambda: 1,
    "_smooth_sf_var_s",
)


@component.add(
    name="RPPE S",
    units="Dmnl",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rppe_s():
    return 10


@component.add(
    name="ME S", units="Mtoe/(Year*Person)", comp_type="Constant", comp_subtype="Normal"
)
def me_s():
    """
    Maximal reference Energy Demand per Capita.
    """
    return 4.8e-06


@component.add(
    name="ME Var S",
    units="Mtoe/(Year*Person)",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_me_var_s": 1},
    other_deps={
        "_smooth_me_var_s": {
            "initial": {"me_s": 1, "time": 1},
            "step": {"me_s": 1, "time": 1},
        }
    },
)
def me_var_s():
    """
    Maximal reference Energy Demand per Capita.
    """
    return 4.8e-06 + _smooth_me_var_s()


_smooth_me_var_s = Smooth(
    lambda: step(__data["time"], me_s() - 4.8e-06, 2020),
    lambda: 1,
    lambda: step(__data["time"], me_s() - 4.8e-06, 2020),
    lambda: 1,
    "_smooth_me_var_s",
)


@component.add(name="EGI S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def egi_s():
    return 1.25


@component.add(name="PEO S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def peo_s():
    """
    Oil energy price elasticity of demand.
    """
    return 0.6


@component.add(
    name="E Var T", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def e_var_t():
    return 0


@component.add(
    name="EGX Var S",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"egx_s": 1, "time": 1},
)
def egx_var_s():
    return 5 + step(__data["time"], egx_s() - 5, 2020)


@component.add(
    name="PEC Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pec_var_s": 1},
    other_deps={
        "_smooth_pec_var_s": {
            "initial": {"pec_s": 1, "time": 1},
            "step": {"pec_s": 1, "time": 1},
        }
    },
)
def pec_var_s():
    """
    Coal energy price elasticity of demand.
    """
    return 0.89 + _smooth_pec_var_s()


_smooth_pec_var_s = Smooth(
    lambda: step(__data["time"], pec_s() - 0.89, 2020),
    lambda: 1,
    lambda: step(__data["time"], pec_s() - 0.89, 2020),
    lambda: 1,
    "_smooth_pec_var_s",
)


@component.add(name="CE S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def ce_s():
    """
    Capital Elasticity of Output.
    """
    return 0.425


@component.add(
    name="CE Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_ce_var_s": 1},
    other_deps={
        "_smooth_ce_var_s": {
            "initial": {"ce_s": 1, "time": 1},
            "step": {"ce_s": 1, "time": 1},
        }
    },
)
def ce_var_s():
    """
    Capital Elasticity of Output.
    """
    return 0.425 + _smooth_ce_var_s()


_smooth_ce_var_s = Smooth(
    lambda: step(__data["time"], ce_s() - 0.425, 2020),
    lambda: 1,
    lambda: step(__data["time"], ce_s() - 0.425, 2020),
    lambda: 1,
    "_smooth_ce_var_s",
)


@component.add(name="PEW S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def pew_s():
    """
    Wind energy price elasticity of demand.
    """
    return 1


@component.add(
    name="EGI Var S",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"egi_s": 1, "time": 1},
)
def egi_var_s():
    return 1.25 + step(__data["time"], egi_s() - 1.25, 2020)


@component.add(name="EGX S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def egx_s():
    return 5


@component.add(
    name="L urban land",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "egi_var_s": 2,
        "time": 1,
        "se_var_t": 1,
        "effect_of_gdp_on_urban_land_requirement_l_variation": 1,
    },
)
def l_urban_land():
    return egi_var_s() + step(
        __data["time"],
        effect_of_gdp_on_urban_land_requirement_l_variation() - egi_var_s(),
        2020 + se_var_t(),
    )


@component.add(name="PEG S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def peg_s():
    """
    Gas energy price elasticity of demand.
    """
    return 0.54


@component.add(
    name="PEW Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_pew_var_s": 1},
    other_deps={
        "_smooth_pew_var_s": {
            "initial": {"pew_s": 1, "time": 1},
            "step": {"pew_s": 1, "time": 1},
        }
    },
)
def pew_var_s():
    """
    Wind energy price elasticity of demand.
    """
    return 1 + _smooth_pew_var_s()


_smooth_pew_var_s = Smooth(
    lambda: step(__data["time"], pew_s() - 1, 2020),
    lambda: 1,
    lambda: step(__data["time"], pew_s() - 1, 2020),
    lambda: 1,
    "_smooth_pew_var_s",
)


@component.add(
    name="PEO Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_peo_var_s": 1},
    other_deps={
        "_smooth_peo_var_s": {
            "initial": {"peo_s": 1, "time": 1},
            "step": {"peo_s": 1, "time": 1},
        }
    },
)
def peo_var_s():
    """
    Oil energy price elasticity of demand.
    """
    return 0.6 + _smooth_peo_var_s()


_smooth_peo_var_s = Smooth(
    lambda: step(__data["time"], peo_s() - 0.6, 2020),
    lambda: 1,
    lambda: step(__data["time"], peo_s() - 0.6, 2020),
    lambda: 1,
    "_smooth_peo_var_s",
)


@component.add(
    name="PEG Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_peg_var_s": 1},
    other_deps={
        "_smooth_peg_var_s": {
            "initial": {"peg_s": 1, "time": 1},
            "step": {"peg_s": 1, "time": 1},
        }
    },
)
def peg_var_s():
    """
    Gas energy price elasticity of demand.
    """
    return 0.54 + _smooth_peg_var_s()


_smooth_peg_var_s = Smooth(
    lambda: step(__data["time"], peg_s() - 0.54, 2020),
    lambda: 1,
    lambda: step(__data["time"], peg_s() - 0.54, 2020),
    lambda: 1,
    "_smooth_peg_var_s",
)


@component.add(
    name="x0 urban land",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "egx_var_s": 2,
        "time": 1,
        "se_var_t": 1,
        "effect_of_gdp_on_urban_land_requirement_x0_variation": 1,
    },
)
def x0_urban_land():
    return egx_var_s() + step(
        __data["time"],
        effect_of_gdp_on_urban_land_requirement_x0_variation() - egx_var_s(),
        2020 + se_var_t(),
    )


@component.add(name="RCF S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def rcf_s():
    return 1


@component.add(
    name="RCF Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_rcf_var_s": 1},
    other_deps={
        "_smooth_rcf_var_s": {
            "initial": {"rcf_s": 1, "time": 1},
            "step": {"rcf_s": 1, "time": 1},
        }
    },
)
def rcf_var_s():
    return 1 + _smooth_rcf_var_s()


_smooth_rcf_var_s = Smooth(
    lambda: step(__data["time"], rcf_s() - 1, 2020),
    lambda: 1,
    lambda: step(__data["time"], rcf_s() - 1, 2020),
    lambda: 1,
    "_smooth_rcf_var_s",
)


@component.add(name="PEC S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def pec_s():
    """
    Coal energy price elasticity of demand.
    """
    return 0.89


@component.add(
    name="PEB Var S",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_peb_var_s": 1},
    other_deps={
        "_smooth_peb_var_s": {
            "initial": {"peb_s": 1, "time": 1},
            "step": {"peb_s": 1, "time": 1},
        }
    },
)
def peb_var_s():
    """
    Biomass energy price elasticity of demand.
    """
    return 0.8 + _smooth_peb_var_s()


_smooth_peb_var_s = Smooth(
    lambda: step(__data["time"], peb_s() - 0.8, 2020),
    lambda: 1,
    lambda: step(__data["time"], peb_s() - 0.8, 2020),
    lambda: 1,
    "_smooth_peb_var_s",
)


@component.add(name="PEB S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def peb_s():
    """
    Biomass energy price elasticity of demand.
    """
    return 0.8


@component.add(
    name="Life Expectancy Normal Variation 1",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def life_expectancy_normal_variation_1():
    return 28


@component.add(
    name="Labor Force Participation Fraction Variation",
    units="Dmnl",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"labor_force_participation_fraction_variation": 6},
)
def labor_force_participation_fraction_variation():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "WorkingAge": _subscript_dict["WorkingAge"],
        },
        ["Gender", "WorkingAge"],
    )
    value.loc[:, _subscript_dict['"15 to 24"']] = 0
    value.loc[["male"], _subscript_dict['"25 to 54"']] = 0
    value.loc[["male"], _subscript_dict['"55 to 64"']] = 0
    value.loc[["female"], ['"55-59"']] = 0
    value.loc[["female"], ['"60-64"']] = float(
        labor_force_participation_fraction_variation().loc["female", '"55-59"']
    )
    value.loc[["female"], ['"25-29"']] = 0
    value.loc[["female"], ['"30-34"']] = float(
        labor_force_participation_fraction_variation().loc["female", '"25-29"']
    )
    value.loc[["female"], ['"35-39"']] = float(
        labor_force_participation_fraction_variation().loc["female", '"25-29"']
    )
    value.loc[["female"], ['"40-44"']] = float(
        labor_force_participation_fraction_variation().loc["female", '"25-29"']
    )
    value.loc[["female"], ['"45-49"']] = float(
        labor_force_participation_fraction_variation().loc["female", '"25-29"']
    )
    value.loc[["female"], ['"50-54"']] = float(
        labor_force_participation_fraction_variation().loc["female", '"25-29"']
    )
    return value


@component.add(name="LF S", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def lf_s():
    return 0.75


@component.add(
    name="SE Var T", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def se_var_t():
    return 0


@component.add(
    name="SSP Land Use Change Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_land_use_change_variation_time():
    return 5


@component.add(
    name="SSP Demographic Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_demographic_variation_time():
    return 5


@component.add(
    name="SSP Energy Production Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_energy_production_variation_time():
    return 5


@component.add(
    name="SSP Energy Demand Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_energy_demand_variation_time():
    return 5


@component.add(
    name="SSP Energy Technology Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_energy_technology_variation_time():
    return 5


@component.add(
    name="SSP Food and Diet Variation Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ssp_food_and_diet_variation_time():
    return 5


@component.add(
    name="Energy Intensity of GWP",
    units="MJ/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_energy_intensity_of_gwp": 1},
    other_deps={
        "_smooth_energy_intensity_of_gwp": {
            "initial": {
                "energy_production": 1,
                "mtoe_to_mj": 1,
                "gross_world_product": 1,
            },
            "step": {"energy_production": 1, "mtoe_to_mj": 1, "gross_world_product": 1},
        }
    },
)
def energy_intensity_of_gwp():
    return _smooth_energy_intensity_of_gwp()


_smooth_energy_intensity_of_gwp = Smooth(
    lambda: energy_production() * mtoe_to_mj() / gross_world_product(),
    lambda: 5,
    lambda: energy_production() * mtoe_to_mj() / gross_world_product(),
    lambda: 1,
    "_smooth_energy_intensity_of_gwp",
)


@component.add(
    name="CO2 Emissions per GWP",
    units="kgCO2/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_from_fossil_energy": 1,
        "ton_to_kg": 1,
        "gross_world_product": 1,
    },
)
def co2_emissions_per_gwp():
    return (
        total_co2_emissions_from_fossil_energy() * ton_to_kg() / gross_world_product()
    )


@component.add(
    name="Average Dietary Energy Supply Adequacy",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_supply_in_kcal": 1, "annual_caloric_demand": 1},
)
def average_dietary_energy_supply_adequacy():
    """
    (Average Daily Calorie Supply per Capita/Average Total Daily Calorie Intake)*100
    """
    return (
        sum(
            food_supply_in_kcal().rename({"FoodCategories": "FoodCategories!"}),
            dim=["FoodCategories!"],
        )
        / sum(
            annual_caloric_demand().rename({"FoodCategories": "FoodCategories!"}),
            dim=["FoodCategories!"],
        )
    ) * 100


@component.add(
    name="Variable16 Technology",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate16": 1,
        "scenario_on": 1,
        "change_rate_slope16": 1,
        "time": 1,
        "change_rate_finish16": 1,
        "change_rate_start16": 1,
    },
)
def variable16_technology():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate16() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope16(),
        change_rate_start16(),
        change_rate_finish16(),
    )


@component.add(
    name="Variable2 Solar",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate2": 1,
        "scenario_on": 1,
        "change_rate_start2": 1,
        "time": 1,
        "change_rate_slope2": 1,
        "change_rate_finish2": 1,
    },
)
def variable2_solar():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate2() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope2(),
        change_rate_start2(),
        change_rate_finish2(),
    )


@component.add(
    name="Variable3 Wind",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate3": 1,
        "scenario_on": 1,
        "change_rate_slope3": 1,
        "change_rate_start3": 1,
        "time": 1,
        "change_rate_finish3": 1,
    },
)
def variable3_wind():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate3() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope3(),
        change_rate_start3(),
        change_rate_finish3(),
    )


@component.add(
    name="Variable7 Forest MP",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate7": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_finish7": 1,
        "change_rate_slope7": 1,
        "change_rate_start7": 1,
    },
)
def variable7_forest_mp():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate7() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope7(),
        change_rate_start7(),
        change_rate_finish7(),
    )


@component.add(
    name="Variable8 Cropland MP",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate8": 1,
        "scenario_on": 1,
        "change_rate_finish8": 1,
        "change_rate_slope8": 1,
        "time": 1,
        "change_rate_start8": 1,
    },
)
def variable8_cropland_mp():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate8() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope8(),
        change_rate_start8(),
        change_rate_finish8(),
    )


@component.add(
    name="Variable9 Food land MP",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate9": 1,
        "scenario_on": 1,
        "change_rate_slope9": 1,
        "change_rate_start9": 1,
        "time": 1,
        "change_rate_finish9": 1,
    },
)
def variable9_food_land_mp():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate9() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope9(),
        change_rate_start9(),
        change_rate_finish9(),
    )


@component.add(
    name="Technological Improvement Scenario Switch Variation",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"technological_improvement_scenario_variation": 4},
)
def technological_improvement_scenario_switch_variation():
    return if_then_else(
        np.logical_and(
            0 <= technological_improvement_scenario_variation(),
            technological_improvement_scenario_variation() < 1,
        ),
        lambda: 0,
        lambda: 0,
    ) + if_then_else(
        np.logical_and(
            1 <= technological_improvement_scenario_variation(),
            technological_improvement_scenario_variation() < 2,
        ),
        lambda: 1,
        lambda: 0,
    )


@component.add(
    name="Technological Improvement Scenario Variation",
    comp_type="Constant",
    comp_subtype="Normal",
)
def technological_improvement_scenario_variation():
    return 1


@component.add(
    name="Total Croplands Indicator",
    units="Million ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"arable_land": 1, "permanent_crops": 1, "ha_into_million_ha": 1},
)
def total_croplands_indicator():
    return (arable_land() + permanent_crops()) * ha_into_million_ha()


@component.add(
    name="CCS Scenario Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ccs_scenario_variation():
    return 0


@component.add(
    name="Variable10 Industrial Water",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate10": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_start10": 1,
        "change_rate_slope10": 1,
        "change_rate_finish10": 1,
    },
)
def variable10_industrial_water():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate10() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope10(),
        change_rate_start10(),
        change_rate_finish10(),
    )


@component.add(
    name="Variable12 Water Recovery",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate12": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_slope12": 1,
        "change_rate_start12": 1,
        "change_rate_finish12": 1,
    },
)
def variable12_water_recovery():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate12() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope12(),
        change_rate_start12(),
        change_rate_finish12(),
    )


@component.add(
    name="Variable13 Biomas Cost",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate13": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_start13": 1,
        "change_rate_slope13": 1,
        "change_rate_finish13": 1,
    },
)
def variable13_biomas_cost():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate13() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope13(),
        change_rate_start13(),
        change_rate_finish13(),
    )


@component.add(
    name="Variable14 Solar Cost",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate14": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_slope14": 1,
        "change_rate_start14": 1,
        "change_rate_finish14": 1,
    },
)
def variable14_solar_cost():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate14() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope14(),
        change_rate_start14(),
        change_rate_finish14(),
    )


@component.add(
    name="Variable15 Wind Cost",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate15": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_start15": 1,
        "change_rate_finish15": 1,
        "change_rate_slope15": 1,
    },
)
def variable15_wind_cost():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate15() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope15(),
        change_rate_start15(),
        change_rate_finish15(),
    )


@component.add(
    name="Variable11 Domestic Water",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate11": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_slope11": 1,
        "change_rate_finish11": 1,
        "change_rate_start11": 1,
    },
)
def variable11_domestic_water():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate11() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope11(),
        change_rate_start11(),
        change_rate_finish11(),
    )


@component.add(
    name="CCS Scenario Switch Variation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ccs_scenario_variation": 4},
)
def ccs_scenario_switch_variation():
    """
    IF THEN ELSE(0 <= CCS Scenario Variation :AND: CCS Scenario Variation < 1, 0 , 0) + IF THEN ELSE(1 <= CCS Scenario Variation :AND: CCS Scenario Variation < 2, 1 , 0)
    """
    return if_then_else(
        np.logical_and(0 <= ccs_scenario_variation(), ccs_scenario_variation() < 1),
        lambda: 0,
        lambda: 0,
    ) + if_then_else(
        np.logical_and(1 <= ccs_scenario_variation(), ccs_scenario_variation() < 2),
        lambda: 1,
        lambda: 0,
    )


@component.add(
    name="Variable1 Biomass",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate1": 1,
        "scenario_on": 1,
        "time": 1,
        "change_rate_slope1": 1,
        "change_rate_finish1": 1,
        "change_rate_start1": 1,
    },
)
def variable1_biomass():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate1() + scenario_on() * ramp(
        __data["time"],
        change_rate_slope1(),
        change_rate_start1(),
        change_rate_finish1(),
    )


@component.add(
    name="Food and Agriculture Nitrogen Balance",
    units="kg/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_n_application_for_agriculture": 1,
        "nitrogen_application_with_manure": 1,
        "total_n_uptake_rate": 1,
        "ton_to_kg": 1,
        "land_allocated_for_animal_calories": 1,
        "area_harvested": 1,
    },
)
def food_and_agriculture_nitrogen_balance():
    return (
        (
            commercial_n_application_for_agriculture()
            + nitrogen_application_with_manure()
            - total_n_uptake_rate()
        )
        * ton_to_kg()
        / (
            land_allocated_for_animal_calories()
            + sum(
                area_harvested().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"]
            )
        )
    )


@component.add(
    name="Agriculture CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_agriculture": 1, "population": 1},
)
def agriculture_co2_emissions_per_capita():
    return total_co2_emissions_from_agriculture() / population()


@component.add(
    name="Food and Agriculture Phosphorous Balance",
    units="kg/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_p_application_for_agriculture": 1,
        "phosphorus_application_with_manure": 1,
        "total_p_uptake_rate": 1,
        "ton_to_kg": 1,
        "land_allocated_for_animal_calories": 1,
        "area_harvested": 1,
    },
)
def food_and_agriculture_phosphorous_balance():
    return (
        (
            commercial_p_application_for_agriculture()
            + phosphorus_application_with_manure()
            - total_p_uptake_rate()
        )
        * ton_to_kg()
        / (
            land_allocated_for_animal_calories()
            + sum(
                area_harvested().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"]
            )
        )
    )


@component.add(
    name="Total Secondary Enrolment Rate",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "primary_education_graduates": 1,
        "secondary_education_graduates": 1,
        "population_cohorts": 1,
    },
)
def total_secondary_enrolment_rate():
    return (
        (
            sum(
                primary_education_graduates()
                .loc[:, '"15-19"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
            + sum(
                secondary_education_graduates()
                .loc[:, '"15-19"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
        )
        / sum(
            population_cohorts()
            .loc[:, '"15-19"']
            .reset_coords(drop=True)
            .rename({"Gender": "Gender!"}),
            dim=["Gender!"],
        )
    ) * 100


@component.add(
    name="Deforestation as Percentage of Initial Forest Land",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"init_forest_land": 2, "forest_land": 1},
)
def deforestation_as_percentage_of_initial_forest_land():
    return (
        float(np.maximum(0, init_forest_land() - forest_land())) / init_forest_land()
    ) * 100


@component.add(
    name="Ratio of Agricultural Land Degraded",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land_degradation": 1, "agricultural_land": 1},
)
def ratio_of_agricultural_land_degraded():
    return (agricultural_land_degradation() / agricultural_land()) * 100


@component.add(
    name="ton to 1000ton",
    units="Thousonds ton/Ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ton_to_1000ton():
    return 1 / 1000


@component.add(
    name="Mtoe to MJ", units="MJ/Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def mtoe_to_mj():
    """
    https://www.unitjuggler.com/convert-energy-from-Mtoe-to-MJ.html
    """
    return 41868000000.0


@component.add(
    name="ton to kg", units="kg/Ton", comp_type="Constant", comp_subtype="Normal"
)
def ton_to_kg():
    return 1000


@component.add(
    name="Achieved Grassland Meat Yield per Hectare",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "production_rate_of_animal_food": 1,
        "grassland_allocated_for_food_production": 1,
    },
)
def achieved_grassland_meat_yield_per_hectare():
    return (
        float(production_rate_of_animal_food().loc["PasMeat"])
        / grassland_allocated_for_food_production()
    )


@component.add(
    name="Achieved Cropland Food Yield per Hectare",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"production_rate_of_crops": 1, "area_harvested": 1},
)
def achieved_cropland_food_yield_per_hectare():
    return sum(
        production_rate_of_crops().rename({"PlantFood": "PlantFood!"}),
        dim=["PlantFood!"],
    ) / sum(area_harvested().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"])


@component.add(
    name="GWP per Employed Person",
    units="$*Thousand/(Year*Person)",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gross_world_product": 1,
        "nvs_into_thousand": 1,
        "labor_force_input": 1,
        "indicative_labor_force_participation_fraction": 1,
    },
)
def gwp_per_employed_person():
    return (
        (gross_world_product() * nvs_into_thousand())
        / sum(
            labor_force_input().rename({"Labor force type": "Labor force type!"}),
            dim=["Labor force type!"],
        )
        * indicative_labor_force_participation_fraction()
    )


@component.add(
    name="Phosphorous Budget",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_budget": 1},
)
def phosphorous_budget():
    return p_budget()


@component.add(
    name="Population Age 25 to 34 with Tertiary Education",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates": 2, "population_cohorts": 2},
)
def population_age_25_to_34_with_tertiary_education():
    return (
        (
            sum(
                tertiary_education_graduates()
                .loc[:, '"25-29"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
            + sum(
                tertiary_education_graduates()
                .loc[:, '"30-34"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
        )
        / (
            sum(
                population_cohorts()
                .loc[:, '"25-29"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
            + sum(
                population_cohorts()
                .loc[:, '"30-34"']
                .reset_coords(drop=True)
                .rename({"Gender": "Gender!"}),
                dim=["Gender!"],
            )
        )
    ) * 100


@component.add(
    name="Potential Cropland Food Yield per Hectare",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cropland_yield": 1},
)
def potential_cropland_food_yield_per_hectare():
    return cropland_yield()


@component.add(
    name="Total Accumulated Phosphorous in Soil",
    units="Ton",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"phosphorus": 1},
)
def total_accumulated_phosphorous_in_soil():
    return phosphorus()


@component.add(
    name="Potential Grassland Meat Yield per Hectare",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_meat_yield": 1},
)
def potential_grassland_meat_yield_per_hectare():
    return grassland_meat_yield()


@component.add(
    name="Agriculture C Emissions per Capita",
    units="TonC/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_agriculture_c_emissions": 1, "population": 1},
)
def agriculture_c_emissions_per_capita():
    return total_agriculture_c_emissions() / population()


@component.add(
    name="Share of Fossil Energy in Total C Emissions",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_fossil_fuels": 1, "total_c_emission": 1},
)
def share_of_fossil_energy_in_total_c_emissions():
    return total_c_emission_from_fossil_fuels() / total_c_emission()


@component.add(
    name="Total CO2 Emissions from Fossil Energy",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_fossil_fuels": 1, "co2_to_c": 1},
)
def total_co2_emissions_from_fossil_energy():
    return total_c_emission_from_fossil_fuels() * co2_to_c()


@component.add(
    name="Renewable C Emissions per Capita",
    units="TonC/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_renewable_energy_c_emissions": 1, "population": 1},
)
def renewable_c_emissions_per_capita():
    return total_renewable_energy_c_emissions() / population()


@component.add(
    name="Renewable CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_renewables": 1, "population": 1},
)
def renewable_co2_emissions_per_capita():
    return total_co2_emissions_from_renewables() / population()


@component.add(
    name="Total Fossil Energy C Emissions",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_fossil_fuels": 1},
)
def total_fossil_energy_c_emissions():
    return total_c_emission_from_fossil_fuels()


@component.add(
    name="Land use CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_land_use": 1, "population": 1},
)
def land_use_co2_emissions_per_capita():
    return total_co2_emissions_from_land_use() / population()


@component.add(
    name="Fossil Energy C Emissions per Capita",
    units="TonC/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_fossil_energy_c_emissions": 1, "population": 1},
)
def fossil_energy_c_emissions_per_capita():
    return total_fossil_energy_c_emissions() / population()


@component.add(
    name="Fossil Energy CO2 Emissions per Capita",
    units="TonCO2/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_fossil_energy": 1, "population": 1},
)
def fossil_energy_co2_emissions_per_capita():
    return total_co2_emissions_from_fossil_energy() / population()


@component.add(
    name="Global Food Tonnes Shortage",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_shortage_in_tonnes": 1},
)
def global_food_tonnes_shortage():
    return float(
        np.maximum(
            0,
            sum(
                food_shortage_in_tonnes().rename({"FoodCategories": "FoodCategories!"}),
                dim=["FoodCategories!"],
            ),
        )
    )


@component.add(
    name="Total CO2 Emissions from Renewables",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_renewables": 1, "co2_to_c": 1},
)
def total_co2_emissions_from_renewables():
    return total_c_emission_from_renewables() * co2_to_c()


@component.add(
    name="Land use C Emissions per Capita",
    units="TonC/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_land_use_c_emissions": 1, "population": 1},
)
def land_use_c_emissions_per_capita():
    return total_land_use_c_emissions() / population()


@component.add(
    name="Share of Renewable Energy in Total C Emissions",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_renewables": 1, "total_c_emission": 1},
)
def share_of_renewable_energy_in_total_c_emissions():
    return total_c_emission_from_renewables() / total_c_emission()


@component.add(
    name="Total Renewable Energy C Emissions",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_renewables": 1},
)
def total_renewable_energy_c_emissions():
    return total_c_emission_from_renewables()


@component.add(
    name="Food Calorie Deficit per Capita",
    units="Mkcal/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_shortage_in_kcal": 1, "population": 1},
)
def food_calorie_deficit_per_capita():
    return (
        float(
            np.maximum(
                0,
                sum(
                    food_shortage_in_kcal().rename(
                        {"FoodCategories": "FoodCategories!"}
                    ),
                    dim=["FoodCategories!"],
                ),
            )
        )
        / population()
    )


@component.add(
    name="Per 1000 Women", units="Person", comp_type="Constant", comp_subtype="Normal"
)
def per_1000_women():
    return 1000


@component.add(
    name="Meat Based Diet Population Percentage",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_meat_eaters": 1, "population": 1},
)
def meat_based_diet_population_percentage():
    return total_meat_eaters() / population()


@component.add(
    name="Energy Consumption",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "energy_production": 1},
)
def energy_consumption():
    return float(np.minimum(energy_demand(), energy_production()))


@component.add(
    name="Share of Land Use in Total C Emissions",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_emission_from_land_use": 1, "total_c_emission": 1},
)
def share_of_land_use_in_total_c_emissions():
    return c_emission_from_land_use() / total_c_emission()


@component.add(
    name="Total Land use C Emissions",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_emission_from_land_use": 1},
)
def total_land_use_c_emissions():
    return c_emission_from_land_use()


@component.add(
    name="Total Agriculture C Emissions",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emissions_from_the_agriculture": 1},
)
def total_agriculture_c_emissions():
    return total_c_emissions_from_the_agriculture()


@component.add(
    name="Share of Agriculture in Total C Emissions",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emissions_from_the_agriculture": 1, "total_c_emission": 1},
)
def share_of_agriculture_in_total_c_emissions():
    return total_c_emissions_from_the_agriculture() / total_c_emission()


@component.add(
    name="Annual Change in Oil Reserves Variation",
    units="Barrel/Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def annual_change_in_oil_reserves_variation():
    return 21000000000.0


@component.add(
    name="Undiscovered Coal Resources Variation",
    units="Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def undiscovered_coal_resources_variation():
    return 900000


@component.add(
    name="Annual Growth in Gas Reserves Variation",
    units="Billion Cubic Meters/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def annual_growth_in_gas_reserves_variation():
    return 5000


@component.add(
    name="Total Population Indicator",
    units="Person*Million",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_female": 1, "population_male": 1},
)
def total_population_indicator():
    return population_female() + population_male()


@component.add(
    name="CO2 Radiative Forcing Indicator",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_radiative_forcing": 1},
)
def co2_radiative_forcing_indicator():
    return co2_radiative_forcing()


@component.add(
    name="Urban Industrial Land Indicator",
    units="Million ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"urban_and_industrial_land": 1, "ha_into_million_ha": 1},
)
def urban_industrial_land_indicator():
    return urban_and_industrial_land() * ha_into_million_ha()


@component.add(
    name="Nonenergy Crops Production Indicator",
    units="Million tDM/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "production_rate_of_crops": 4,
        "moisture_content": 4,
        "tdm_to_million_tdm": 1,
    },
)
def nonenergy_crops_production_indicator():
    return (
        float(production_rate_of_crops().loc["Pulses"])
        * (1 - float(moisture_content().loc["Pulses"]))
        + float(production_rate_of_crops().loc["Grains"])
        * (1 - float(moisture_content().loc["Grains"]))
        + float(production_rate_of_crops().loc["VegFruits"])
        * (1 - float(moisture_content().loc["VegFruits"]))
        + float(production_rate_of_crops().loc["OtherCrops"])
        * (1 - float(moisture_content().loc["OtherCrops"]))
    ) * tdm_to_million_tdm()


@component.add(
    name="tDM to Million tDM",
    units="Million tDM/tDM",
    comp_type="Constant",
    comp_subtype="Normal",
)
def tdm_to_million_tdm():
    return 1 / 1000000.0


@component.add(
    name="Livestock Production Indicator",
    units="Million tDM/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "production_rate_of_animal_food": 4,
        "moisture_content": 4,
        "tdm_to_million_tdm": 1,
    },
)
def livestock_production_indicator():
    return (
        float(production_rate_of_animal_food().loc["CropMeat"])
        * (1 - float(moisture_content().loc["CropMeat"]))
        + float(production_rate_of_animal_food().loc["PasMeat"])
        * (1 - float(moisture_content().loc["PasMeat"]))
        + float(production_rate_of_animal_food().loc["Dairy"])
        * (1 - float(moisture_content().loc["Dairy"]))
        + float(production_rate_of_animal_food().loc["Eggs"])
        * (1 - float(moisture_content().loc["Eggs"]))
    ) * tdm_to_million_tdm()


@component.add(
    name="Moisture Content",
    units="tDM/Ton",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def moisture_content():
    """
    Data from Food and Animal moisture content https://lca-net.com/files/LCAfood2014-LCAofGlobalFoodConsumption.pdf CropMeat = average (poultry and pork) PasMeat = average ( Cattle beef and other meats) Dairy = Animal raw milk Vegetable and fruits = vegetable and fuits Other plant products = average (oil crops, sugar crops and crops other) https://www.researchgate.net/publication/325594668_Postharvest_Losses_in_Ethiopia_and _Opportunities_for_Reduction_A_Review/figures?lo=1 Crops = average of all crops in Table 2. Pulses = average pulses and lentil and pea from Table 2
    """
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[["CropMeat"]] = (0.7 + 0.55) / 2
    value.loc[["Eggs"]] = 0.26
    value.loc[["PasMeat"]] = (0.53 + 0.57) / 2
    value.loc[["Dairy"]] = 0.88
    value.loc[["Pulses"]] = (0.15 + 0.14) / 2
    value.loc[["Grains"]] = (
        0.15 + 0.115 + 0.13 + 0.135 + 0.16 + 0.135 + 0.135 + 0.12
    ) / 8
    value.loc[["VegFruits"]] = 0.82
    value.loc[["OtherCrops"]] = (0.79 + 0.09 + 0.75) / 3
    return value


@component.add(
    name="INIT Average Coal Production", comp_type="Constant", comp_subtype="Normal"
)
def init_average_coal_production():
    return 191.404


@component.add(
    name="Pasture Land Indicator",
    units="Million ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"permanent_meadows_and_pastures": 1, "ha_into_million_ha": 1},
)
def pasture_land_indicator():
    return permanent_meadows_and_pastures() * ha_into_million_ha()


@component.add(name="INIT EIGP", comp_type="Constant", comp_subtype="Normal")
def init_eigp():
    """
    Effective Investment in Gas Production
    """
    return 9081650.0


@component.add(
    name="INIT Cumulative Biomass Produced", comp_type="Constant", comp_subtype="Normal"
)
def init_cumulative_biomass_produced():
    return 0


@component.add(
    name="INIT Cumulative Solar Produced", comp_type="Constant", comp_subtype="Normal"
)
def init_cumulative_solar_produced():
    return 0


@component.add(name="INIT GPI", comp_type="Constant", comp_subtype="Normal")
def init_gpi():
    """
    Gas Productivity of Investment
    """
    return 0.0205941


@component.add(name="INIT CCS Improvement", comp_type="Constant", comp_subtype="Normal")
def init_ccs_improvement():
    return 0


@component.add(
    name="INIT Climate Events in Memory", comp_type="Constant", comp_subtype="Normal"
)
def init_climate_events_in_memory():
    return 0


@component.add(name="INIT CPI", comp_type="Constant", comp_subtype="Normal")
def init_cpi():
    return 0.00188537


@component.add(
    name="INIT Cumulative Wind Produced", comp_type="Constant", comp_subtype="Normal"
)
def init_cumulative_wind_produced():
    return 0


@component.add(name="INIT EICE", comp_type="Constant", comp_subtype="Normal")
def init_eice():
    """
    Effective Investment in Coal Exploration
    """
    return 101518000000.0


@component.add(name="INIT EICP", comp_type="Constant", comp_subtype="Normal")
def init_eicp():
    """
    Effective Investment in Coal Production
    """
    return 10152100000.0


@component.add(name="INIT EIGE", comp_type="Constant", comp_subtype="Normal")
def init_eige():
    """
    Effective Investment in Gas Exploration
    """
    return 90816400.0


@component.add(
    name="INIT OPI", limits=(0.0, np.nan), comp_type="Constant", comp_subtype="Normal"
)
def init_opi():
    """
    Oil Productivity of Investment
    """
    return 0.01


@component.add(
    name="INIT EIOE", limits=(0.0, np.nan), comp_type="Constant", comp_subtype="Normal"
)
def init_eioe():
    """
    Effective Investment in Oil Exploration
    """
    return 1250680000.0


@component.add(
    name="INIT EIOP", limits=(0.0, np.nan), comp_type="Constant", comp_subtype="Normal"
)
def init_eiop():
    """
    Effective Investment in Oil Production
    """
    return 125068000.0


@component.add(
    name="INIT Average Gas Production", comp_type="Constant", comp_subtype="Normal"
)
def init_average_gas_production():
    return 1.87028


@component.add(
    name="INIT Average Oil Production",
    units="Mtoe/Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_average_oil_production():
    return 6.537


@component.add(
    name="Diet Composition Switch Variation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"diet_composition_variation": 10},
)
def diet_composition_switch_variation():
    """
    0: Reference meat and vegetarian diets 1: Everyone is flexitarian from 2020 on 2: Meat-eaters eat 'Healthy', vegetarians eat 'Reference' veg diet 3: Meat-eaters eat 'Healthy', vegetarians eat 'Vegan' diet 4: Meat-eaters eat 'Flexitarian', vegetarians eat vegan
    """
    return (
        if_then_else(
            np.logical_and(
                0 <= diet_composition_variation(), diet_composition_variation() < 1
            ),
            lambda: 0,
            lambda: 0,
        )
        + if_then_else(
            np.logical_and(
                1 <= diet_composition_variation(), diet_composition_variation() < 2
            ),
            lambda: 1,
            lambda: 0,
        )
        + if_then_else(
            np.logical_and(
                2 <= diet_composition_variation(), diet_composition_variation() < 3
            ),
            lambda: 2,
            lambda: 0,
        )
        + if_then_else(
            np.logical_and(
                3 <= diet_composition_variation(), diet_composition_variation() < 4
            ),
            lambda: 3,
            lambda: 0,
        )
        + if_then_else(
            np.logical_and(
                4 <= diet_composition_variation(), diet_composition_variation() < 5
            ),
            lambda: 4,
            lambda: 0,
        )
    )


@component.add(
    name="Diet Composition Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def diet_composition_variation():
    """
    0: Reference meat and vegetarian diets 1: Everyone is flexitarian from 2020 on 2: Meat-eaters eat 'Healthy', vegetarians eat 'Reference' veg diet 3: Meat-eaters eat 'Healthy', vegetarians eat 'Vegan' diet 4: Meat-eaters eat 'Flexitarian', vegetarians eat vegan
    """
    return 0


@component.add(
    name="Event Perception Threshold",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"event_perception_threshold_variation": 1, "time": 1},
)
def event_perception_threshold():
    """
    A threshold (Beta) that an events value must be higher than to register in the public psyche and eneter the pool.
    """
    return 0.5 + step(
        __data["time"], event_perception_threshold_variation() - 0.5, 2020
    )


@component.add(
    name="Normal Shift Fraction from Meat to Vegetarianism Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_shift_fraction_from_meat_to_vegetarianism_variation():
    return 0.003


@component.add(
    name="Normal Shift Fraction from Vegetarianism to Meat Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_shift_fraction_from_vegetarianism_to_meat_variation():
    return 0.01


@component.add(
    name="Ramp Period8",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_cropland_management_practices_increment_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period8():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        effect_of_gdp_on_cropland_management_practices_increment_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Agriculture to Urban Land Allocation Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agriculture_to_urban_land_allocation_time_variation():
    """
    Average time which natural transformation of Agriculture to Urban and Industrial Land would take.
    """
    return 5


@component.add(
    name="Self Efficacy Multiplier Male Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def self_efficacy_multiplier_male_variation():
    """
    Is it also dependent on age?
    """
    return 0.8


@component.add(
    name="Final Change Rate7",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_forest_management_practices_increment_final_change_rate_variation": 1,
        "time": 1,
    },
)
def final_change_rate7():
    """
    Final Educational Attainment Change Rate
    """
    return 1.5 + step(
        __data["time"],
        effect_of_gdp_on_forest_management_practices_increment_final_change_rate_variation()
        - 1.5,
        2020,
    )


@component.add(
    name="Final Change Rate8",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_cropland_management_practices_increment_final_change_rate_variation": 1,
        "time": 1,
    },
)
def final_change_rate8():
    """
    Final Educational Attainment Change Rate
    """
    return 10 + step(
        __data["time"],
        effect_of_gdp_on_cropland_management_practices_increment_final_change_rate_variation()
        - 10,
        2020,
    )


@component.add(
    name="Reference meat yield Variation",
    units="Ton/ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_meat_yield_variation():
    return 0.1877


@component.add(
    name="Response efficacy multiplier",
    units="Dmnl",
    subscripts=["Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "response_efficacy_multiplier_noed_variation": 1,
        "time": 4,
        "response_efficacy_multiplier_primary_variation": 1,
        "response_efficacy_multiplier_secondary_variation": 1,
        "response_efficacy_multiplier_tertiary_variation": 1,
    },
)
def response_efficacy_multiplier():
    """
    Base: 0.8, 0.9, 1, 1.2
    """
    value = xr.DataArray(
        np.nan, {"Education": _subscript_dict["Education"]}, ["Education"]
    )
    value.loc[["noEd"]] = 0.8 + step(
        __data["time"], response_efficacy_multiplier_noed_variation() - 0.8, 2020
    )
    value.loc[["primary"]] = 0.9 + step(
        __data["time"], response_efficacy_multiplier_primary_variation() - 0.9, 2020
    )
    value.loc[["secondary"]] = 1 + step(
        __data["time"], response_efficacy_multiplier_secondary_variation() - 1, 2020
    )
    value.loc[["tertiary"]] = 1.2 + step(
        __data["time"], response_efficacy_multiplier_tertiary_variation() - 1.2, 2020
    )
    return value


@component.add(
    name="Forest to Urban Land Allocation Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_to_urban_land_allocation_time_variation():
    """
    Average time which natural transformation of Forest to Urban and Industrial Land would take.
    """
    return 10


@component.add(
    name="Fraction of Urban Land Conversion from Agriculture Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_urban_land_conversion_from_agriculture_variation():
    return 0.9


@component.add(
    name="Other to Forest Land Allocation Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_to_forest_land_allocation_time_variation():
    """
    Average time which natural transformation of Other to Forest Land would take.
    """
    return 40


@component.add(
    name="Effect of GDP on Cropland Management Practices Increment Ramp Period Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_cropland_management_practices_increment_ramp_period_variation():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Effect of GDP on Forest Land Fertility Elasticity Variation",
    units="(Year*Year*Person*Person)/($*$)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_forest_land_fertility_elasticity_variation():
    """
    Elasticity of impact of GDP on forest land management practices.
    """
    return 7e-08


@component.add(
    name="Agricultural Land Erosion Fraction Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agricultural_land_erosion_fraction_variation():
    """
    This is actually dependent on yield. The highher the yield, the shorter the lifetime of the agricultural land.
    """
    return 0.0001


@component.add(
    name="Response Efficacy Multiplier NoEd Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def response_efficacy_multiplier_noed_variation():
    """
    Base: 0.8, 0.9, 1, 1.2
    """
    return 0.8


@component.add(
    name="Response Efficacy Multiplier Primary Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def response_efficacy_multiplier_primary_variation():
    """
    Base: 0.8, 0.9, 1, 1.2
    """
    return 0.9


@component.add(
    name="Response Efficacy Multiplier Secondary Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def response_efficacy_multiplier_secondary_variation():
    """
    Base: 0.8, 0.9, 1, 1.2
    """
    return 1


@component.add(
    name="Response Efficacy Multiplier Tertiary Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def response_efficacy_multiplier_tertiary_variation():
    """
    Base: 0.8, 0.9, 1, 1.2
    """
    return 1.2


@component.add(
    name="Forest Land Fraction Harvested excluding Protected Area Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_land_fraction_harvested_excluding_protected_area_variation():
    """
    Fraction of Forest dedicated to be harvested.
    """
    return 0.5


@component.add(
    name="Agricultural Land Erosion Fraction",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land_erosion_fraction_variation": 1, "time": 1},
)
def agricultural_land_erosion_fraction():
    """
    This is actually dependent on yield. The highher the yield, the shorter the lifetime of the agricultural land.
    """
    return 0.0001 + step(
        __data["time"], agricultural_land_erosion_fraction_variation() - 0.0001, 2020
    )


@component.add(
    name="Effect of GDP on Forest Management Practices Increment Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_forest_management_practices_increment_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 1.5


@component.add(
    name="Agriculture to Forest Land Allocation Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agriculture_to_forest_land_allocation_time_variation():
    """
    Average time which natural transformation of Agriculture to Forest Land would take.
    """
    return 150


@component.add(
    name="Desired Total C Emission from Fossil Fuels Variation",
    units="TonC/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def desired_total_c_emission_from_fossil_fuels_variation():
    """
    The upper level of acceptable total carbon emission from fossil fuels.
    """
    return 7500000000.0


@component.add(
    name="Agricultural Land Development Time",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land_development_time_variation": 1, "time": 1},
)
def agricultural_land_development_time():
    return 100 + step(
        __data["time"], agricultural_land_development_time_variation() - 100, 2020
    )


@component.add(
    name="Agricultural Land Development Time Variation",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agricultural_land_development_time_variation():
    return 100


@component.add(
    name="Self Efficacy Multiplier Female Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def self_efficacy_multiplier_female_variation():
    """
    Is it also dependent on age?
    """
    return 1.2


@component.add(
    name="Ramp Period7",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_forest_management_practices_increment_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period7():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        effect_of_gdp_on_forest_management_practices_increment_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Effect of GDP on Forest Management Practices Increment Ramp Period Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_forest_management_practices_increment_ramp_period_variation():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Effect of GDP on Urban Land Requirement x0 Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_urban_land_requirement_x0_variation():
    return 5


@component.add(
    name="Effect of GDP on Urban Land Requirement k Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_urban_land_requirement_k_variation():
    return 1


@component.add(
    name="Effect of GDP on Urban Land Requirement l Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_urban_land_requirement_l_variation():
    return 1.25


@component.add(
    name="Self efficacy multiplier",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "self_efficacy_multiplier_male_variation": 1,
        "time": 2,
        "self_efficacy_multiplier_female_variation": 1,
    },
)
def self_efficacy_multiplier():
    """
    Is it also dependent on age?
    """
    value = xr.DataArray(np.nan, {"Gender": _subscript_dict["Gender"]}, ["Gender"])
    value.loc[["male"]] = 0.8 + step(
        __data["time"], self_efficacy_multiplier_male_variation() - 0.8, 2020
    )
    value.loc[["female"]] = 1.2 + step(
        __data["time"], self_efficacy_multiplier_female_variation() - 1.2, 2020
    )
    return value


@component.add(
    name="Fraction of Urban Land Conversion from Agriculture",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_urban_land_conversion_from_agriculture_variation": 1,
        "time": 1,
    },
)
def fraction_of_urban_land_conversion_from_agriculture():
    return 0.9 + step(
        __data["time"],
        fraction_of_urban_land_conversion_from_agriculture_variation() - 0.9,
        2020,
    )


@component.add(
    name="Effect of GDP on Cropland Management Practices Increment Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_cropland_management_practices_increment_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 10


@component.add(
    name="Reference Daily Caloric Intake Variation",
    units="kcal/(Person*Day)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_daily_caloric_intake_variation():
    """
    1961 World average, from FAO data - 2194 kcal Calibrated 1672.6 kcal 1970 value, when gdp effect=1:2325
    """
    return 1672.6


@component.add(
    name="Effect of GDP on Cropland Management Practices Elasticity Variation",
    units="(Year*Year*Person*Person)/($*$)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effect_of_gdp_on_cropland_management_practices_elasticity_variation():
    """
    Elasticity of impact of GDP on cropland management practices.
    """
    return 2.2e-08


@component.add(
    name="k urban land",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effect_of_gdp_on_urban_land_requirement_k_variation": 1, "time": 1},
)
def k_urban_land():
    return 1 + step(
        __data["time"], effect_of_gdp_on_urban_land_requirement_k_variation() - 1, 2020
    )


@component.add(
    name="Event Perception Threshold Variation",
    units="Events/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def event_perception_threshold_variation():
    """
    A threshold (Beta) that an events value must be higher than to register in the public psyche and eneter the pool.
    """
    return 0.5


@component.add(
    name="Effectiveness of Investment in Coal Discovery Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_coal_discovery_technology_variation():
    """
    Effectiveness of resources dedicated to coal discovery technology development.
    """
    return 1.62e-11


@component.add(
    name="Effectiveness of Investment in Coal Recovery Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_coal_recovery_technology_variation():
    """
    Effectiveness of resources dedicated to coal recovery technology development.
    """
    return 1.3e-12


@component.add(
    name="Effectiveness of Investment in Gas Discovery Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_gas_discovery_technology_variation():
    """
    Effectiveness of resources dedicated to gas discovery technology development.
    """
    return 1.86e-09


@component.add(
    name="Effectiveness of Investment in Gas Recovery Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_gas_recovery_technology_variation():
    """
    Effectiveness of resources dedicated to gas recovery technology development.
    """
    return 3e-11


@component.add(
    name="Effectiveness of Investment in Oil Discovery Technology Variation",
    units="1/$",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_oil_discovery_technology_variation():
    """
    Effectiveness of resources dedicated to oil discovery technology development.
    """
    return 4.48e-09


@component.add(
    name="Effectiveness of Investment in Oil Recovery Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_oil_recovery_technology_variation():
    """
    Effectiveness of resources dedicated to recovery technology development.
    """
    return 2.8e-11


@component.add(
    name="Biomass Conversion Efficiency Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biomass_conversion_efficiency_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 3.17e-07


@component.add(
    name="Fraction of Coal Revenues Invested in Technology Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_coal_revenues_invested_in_technology_variation():
    """
    Percentage of total coal sector revenue dedicated to exploration and production technology development.
    """
    return 0.03


@component.add(
    name="Reference Cost of Biomass Energy Production Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_cost_of_biomass_energy_production_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 30000000.0


@component.add(
    name="Fraction of Gas Revenues Invested in Technology Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_gas_revenues_invested_in_technology_variation():
    """
    Percentage of total gas sector revenue dedicated to exploration and production technology development.
    """
    return 0.4


@component.add(
    name="Fraction of Oil Revenues Invested in Technology Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_oil_revenues_invested_in_technology_variation():
    """
    Percentage of total oil sector revenue dedicated to exploration and production technology development.
    """
    return 0.04


@component.add(
    name="Wind Available Area Variation",
    units="m*m",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wind_available_area_variation():
    """
    Total area available for wind energy production capacities.
    """
    return 8000000000000.0


@component.add(
    name="Average Wind Capacity per SqMeter Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_wind_capacity_per_sqmeter_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 0.35


@component.add(
    name="Final Change Rate1",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_conversion_efficiency_final_change_rate_variation": 1,
        "time": 1,
    },
)
def final_change_rate1():
    """
    Final Educational Attainment Change Rate
    """
    return 3.17e-07 + step(
        __data["time"],
        biomass_conversion_efficiency_final_change_rate_variation() - 3.17e-07,
        2020,
    )


@component.add(
    name="Relative Productivity of Investment in Gas Exploration Variation",
    units="toe/$",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_gas_exploration_variation():
    """
    Relative Productivity of Investment in Gas Exploration without taking into account remaining undiscovered gas resources and advances in exploration technologies.
    """
    return 0.1


@component.add(
    name="Fraction for Biomass Learning Curve Strength Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_for_biomass_learning_curve_strength_variation():
    """
    Fraction for Biomass Learning Curve Strength indicating by what percentage the biomass energy cost will drop for each doubling of biomass installed capacity.
    """
    return 0.01


@component.add(
    name="Relative Productivity of Investment in Coal Exploration Variation",
    units="toe/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_coal_exploration_variation():
    """
    Relative Productivity of Investment in Coal Exploration without taking into account remaining undiscovered coal resources and advances in exploration technologies.
    """
    return 0.5


@component.add(
    name="Relative Productivity of Investment in Oil Exploration Variation",
    units="toe/$",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_oil_exploration_variation():
    """
    Relative Productivity of Investment in Oil Exploration without taking into account remaining undiscovered oil resources and advances in exploration technologies.
    """
    return 0.05


@component.add(
    name="Reference Cost of Wind Energy Production Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_cost_of_wind_energy_production_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 7


@component.add(
    name="Solar Conversion Efficiency Factor Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def solar_conversion_efficiency_factor_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 2


@component.add(
    name="Reference Cost of Solar Energy Production Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_cost_of_solar_energy_production_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 10


@component.add(
    name="Effectiveness of Pressure to Adjust C Emission Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_pressure_to_adjust_c_emission_variation():
    """
    Rate at which the gap between acceptable and current carbon emission from fossil fuels level is addressed.
    """
    return 0.07


@component.add(
    name="Fraction of Revenue Invested in Solar Technology Ramp Investment Period Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_revenue_invested_in_solar_technology_ramp_investment_period_variation():
    """
    Period of fractional investments in new energy technologies.
    """
    return 100


@component.add(
    name="Solar Available Area Variation",
    units="m*m",
    comp_type="Constant",
    comp_subtype="Normal",
)
def solar_available_area_variation():
    """
    Total area available for solar energy production capacities.
    """
    return 500000000000.0


@component.add(
    name="Time to Improve CCS Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_improve_ccs_variation():
    """
    Average CCS technology development lead time.
    """
    return 10


@component.add(
    name="Price Elasticity of Demand Wind and Solar Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_elasticity_of_demand_wind_and_solar_variation():
    """
    Wind energy price elasticity of demand.
    """
    return 1


@component.add(
    name="Price Elasticity of Demand Biomass Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_elasticity_of_demand_biomass_variation():
    """
    Biomass energy price elasticity of demand.
    """
    return 0.8


@component.add(
    name="Price Elasticity of Demand Coal Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_elasticity_of_demand_coal_variation():
    """
    Coal energy price elasticity of demand.
    """
    return 0.89


@component.add(
    name="Price Elasticity of Demand Gas Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_elasticity_of_demand_gas_variation():
    """
    Gas energy price elasticity of demand.
    """
    return 0.54


@component.add(
    name="Price Elasticity of Demand Oil Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_elasticity_of_demand_oil_variation():
    """
    Oil energy price elasticity of demand.
    """
    return 0.6


@component.add(
    name="Price Elasticity of Demand Solar 0",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_elasticity_of_demand_solar_0():
    """
    Solar energy price elasticity of demand.
    """
    return 1


@component.add(
    name="Other Technology Inflection Point Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_technology_inflection_point_variation():
    """
    Parameter determining inflection point of reference factor productivity in other than energy sectors.
    """
    return 100


@component.add(
    name="Max Energy Demand per Capita Variation",
    units="Mtoe/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_energy_demand_per_capita_variation():
    """
    Maximal reference Energy Demand per Capita.
    """
    return 4.8e-06


@component.add(
    name="Ramp Period16",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_technology_steepness_ramp_period_variation": 1, "time": 1},
)
def ramp_period16():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"], other_technology_steepness_ramp_period_variation() - 50, 2020
    )


@component.add(
    name="Final Change Rate16",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_technology_steepness_final_change_rate_variation": 1, "time": 1},
)
def final_change_rate16():
    """
    Final Educational Attainment Change Rate
    """
    return 6 + step(
        __data["time"],
        other_technology_steepness_final_change_rate_variation() - 6,
        2020,
    )


@component.add(
    name="Other Technology Steepness Final Change Rate Variation",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_technology_steepness_final_change_rate_variation():
    """
    Final Educational Attainment Change Rate
    """
    return 6


@component.add(
    name="Other Technology Steepness Ramp Period Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_technology_steepness_ramp_period_variation():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Capital Elasticity Output Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def capital_elasticity_output_variation():
    """
    Capital Elasticity of Output.
    """
    return 0.425


@component.add(
    name="Forest Land Indicator",
    units="Million ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_land": 1, "ha_into_million_ha": 1},
)
def forest_land_indicator():
    return forest_land() * ha_into_million_ha()


@component.add(
    name="Energy Crops Production",
    units="Biomass ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "arable_land_allocated_for_energy_crops": 1,
        "agriculture_land_energy_yield": 1,
    },
)
def energy_crops_production():
    """
    Total energy biomass production from energy crops.
    """
    return arable_land_allocated_for_energy_crops() * agriculture_land_energy_yield()


@component.add(
    name="ha into million ha",
    units="Million ha/ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ha_into_million_ha():
    return 1 / 1000000.0


@component.add(
    name="Energy Crops Production Indicator",
    units="Biomass million ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_crops_production": 1,
        "biomass_ton_into_biomass_million_ton": 1,
    },
)
def energy_crops_production_indicator():
    return energy_crops_production() * biomass_ton_into_biomass_million_ton()


@component.add(
    name="Ton to Million ton",
    units="Million ton/Ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ton_to_million_ton():
    return 1 / 1000000.0


@component.add(
    name="Biomass ton into Biomass million ton",
    units="Biomass million ton/Biomass ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biomass_ton_into_biomass_million_ton():
    return 1 / 1000000.0


@component.add(
    name="TonCO2 to Million ton CO2",
    units="Million ton CO2/TonCO2",
    comp_type="Constant",
    comp_subtype="Normal",
)
def tonco2_to_million_ton_co2():
    return 1 / 1000000.0


@component.add(
    name="Renewable Installation Technology Development Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def renewable_installation_technology_development_time_variation():
    return 100


@component.add(
    name="Renewable Final Investment Fraction Variation",
    comp_type="Constant",
    comp_subtype="Normal",
)
def renewable_final_investment_fraction_variation():
    return 0.03


@component.add(
    name="Reference Change in Fossil Fuel Market Share Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_change_in_fossil_fuel_market_share_variation():
    return 1


@component.add(
    name="Ramp Period2",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_cost_reduction_and_technology_improvement_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period2():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        renewable_cost_reduction_and_technology_improvement_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Ramp Period3",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_cost_reduction_and_technology_improvement_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period3():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        renewable_cost_reduction_and_technology_improvement_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Ramp Period1",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_cost_reduction_and_technology_improvement_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period1():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        renewable_cost_reduction_and_technology_improvement_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Sensitivity of Fossil Fuel Price to Supply and Demand Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_fossil_fuel_price_to_supply_and_demand_variation():
    return 2


@component.add(
    name="Fraction for Wind and Solar Learning Curve Strength Variation",
    units="1",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_for_wind_and_solar_learning_curve_strength_variation():
    return 0.2


@component.add(
    name="Effectiveness of Investment in Renewable Energy Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_renewable_energy_technology_variation():
    return 1e-09


@component.add(
    name="Effectiveness of Investment in Renewable Installation Technology Variation",
    units="1/$",
    comp_type="Constant",
    comp_subtype="Normal",
)
def effectiveness_of_investment_in_renewable_installation_technology_variation():
    return 1e-10


@component.add(
    name="Ramp Period14",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_cost_reduction_and_technology_improvement_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period14():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        renewable_cost_reduction_and_technology_improvement_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Ramp Period15",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_cost_reduction_and_technology_improvement_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period15():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        renewable_cost_reduction_and_technology_improvement_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name="Max Unit Cost of Fossil Fuel Exploration Variation",
    units="$/Mtoe",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_unit_cost_of_fossil_fuel_exploration_variation():
    return 1000000000.0


@component.add(
    name="Investment in Fossil Fuel Exploration and Production Delay Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def investment_in_fossil_fuel_exploration_and_production_delay_variation():
    return 5


@component.add(
    name="Renewable Energy Technology Development Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def renewable_energy_technology_development_time_variation():
    return 50


@component.add(
    name="Relative Productivity of Investment in Fossil Fuel Production Compared to Exploration Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def relative_productivity_of_investment_in_fossil_fuel_production_compared_to_exploration_variation():
    return 10


@component.add(
    name="Renewable Cost Reduction and Technology Improvement Ramp Period Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def renewable_cost_reduction_and_technology_improvement_ramp_period_variation():
    return 50


@component.add(
    name="Ramp Period13",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_cost_reduction_and_technology_improvement_ramp_period_variation": 1,
        "time": 1,
    },
)
def ramp_period13():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50 + step(
        __data["time"],
        renewable_cost_reduction_and_technology_improvement_ramp_period_variation()
        - 50,
        2020,
    )


@component.add(
    name='"$ into $thousand"',
    units="Thousand",
    comp_type="Constant",
    comp_subtype="Normal",
)
def nvs_into_thousand():
    return 1 / 1000


@component.add(
    name="Change Rate Slope17",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate17": 1,
        "initial_change_rate17": 1,
        "ramp_period17": 1,
    },
)
def change_rate_slope17():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        float(np.abs(final_change_rate17() - initial_change_rate17())) / ramp_period17()
    )


@component.add(
    name="Population Female",
    units="Person*Million",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_by_gender": 1, "people_to_million_people": 1},
)
def population_female():
    return float(population_by_gender().loc["female"]) * people_to_million_people()


@component.add(
    name="SA Waste fraction 0 0 0 0",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_waste_fraction_0_0_0_0():
    return xr.DataArray(
        [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="SA Feed share of crop types",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_feed_share_of_crop_types():
    return xr.DataArray(
        [1.0, 1.0, 1.0, 1.0], {"PlantFood": _subscript_dict["PlantFood"]}, ["PlantFood"]
    )


@component.add(
    name="Population Male",
    units="Person*Million",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_by_gender": 1, "people_to_million_people": 1},
)
def population_male():
    return float(population_by_gender().loc["male"]) * people_to_million_people()


@component.add(name="Ramp Start161 0", comp_type="Constant", comp_subtype="Normal")
def ramp_start161_0():
    return 2020


@component.add(name="Ramp Start17", comp_type="Constant", comp_subtype="Normal")
def ramp_start17():
    return 2020


@component.add(
    name="Feed Share of VegFruits Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def feed_share_of_vegfruits_variation():
    return 1


@component.add(
    name="Wind Energy Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_production": 1, "mtoe_into_ej": 1},
)
def wind_energy_production_indicator():
    return wind_energy_production() * mtoe_into_ej()


@component.add(
    name="Gas Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_production": 1, "mtoe_into_ej": 1},
)
def gas_production_indicator():
    return gas_production() * mtoe_into_ej()


@component.add(
    name="Change Rate Slope161 0",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate161_0": 1,
        "initial_change_rate161_0": 1,
        "ramp_period161_0": 1,
    },
)
def change_rate_slope161_0():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        float(np.abs(final_change_rate161_0() - initial_change_rate161_0()))
        / ramp_period161_0()
    )


@component.add(
    name="Coal Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mtoe_into_ej": 1, "coal_production": 1},
)
def coal_production_indicator():
    return mtoe_into_ej() * coal_production()


@component.add(
    name="Mtoe into EJ", units="EJ/Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def mtoe_into_ej():
    return 1 / 23.8846


@component.add(
    name="SA Waste fraction",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_waste_fraction():
    return xr.DataArray(
        [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="GWP per Capita Indicator",
    units="$*Thousand/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gwp_per_capita": 1, "nvs_into_thousand": 1},
)
def gwp_per_capita_indicator():
    return gwp_per_capita() * nvs_into_thousand()


@component.add(
    name="Solar Energy Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_production": 1, "mtoe_into_ej": 1},
)
def solar_energy_production_indicator():
    return solar_energy_production() * mtoe_into_ej()


@component.add(
    name="Ramp Period161 0", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period161_0():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Ramp Period17", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period17():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Total Primary Education Graduates",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"primary_education_graduates_by_gender": 1},
)
def total_primary_education_graduates():
    return sum(
        primary_education_graduates_by_gender().rename({"Gender": "Gender!"}),
        dim=["Gender!"],
    )


@component.add(
    name="Total Secondary Education Graduates Indicator",
    units="Person*Million",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_secondary_education_graduates": 1,
        "people_to_million_people": 1,
    },
)
def total_secondary_education_graduates_indicator():
    return total_secondary_education_graduates() * people_to_million_people()


@component.add(
    name="Feed Share of Grains Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def feed_share_of_grains_variation():
    return 1


@component.add(
    name="Feed Share of OtherCrops Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def feed_share_of_othercrops_variation():
    return 1


@component.add(
    name="Feed Share of Pulses Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def feed_share_of_pulses_variation():
    return 1


@component.add(
    name="Waste Fraction PlantFood Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def waste_fraction_plantfood_variation():
    return 1


@component.add(
    name="Climate Risk Perception Delay Secondary Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_risk_perception_delay_secondary_variation():
    return 5


@component.add(
    name="Final Change Rate161 0",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate161_0():
    """
    Final Educational Attainment Change Rate
    """
    return 6


@component.add(
    name="Oil Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_production": 1, "mtoe_into_ej": 1},
)
def oil_production_indicator():
    return oil_production() * mtoe_into_ej()


@component.add(
    name="Final Change Rate17",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate17():
    """
    Final Educational Attainment Change Rate
    """
    return 6


@component.add(
    name="Climate Risk Perception Delay Tertiary Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_risk_perception_delay_tertiary_variation():
    return 3


@component.add(
    name="Climate Risk Perception Delay Primary Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_risk_perception_delay_primary_variation():
    return 8


@component.add(
    name="Change Rate Start17",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start17": 1},
)
def change_rate_start17():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start17()


@component.add(
    name="Biomass Energy Production Indicator",
    units="EJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_energy_production": 1, "mtoe_into_ej": 1},
)
def biomass_energy_production_indicator():
    return biomass_energy_production() * mtoe_into_ej()


@component.add(
    name="Climate Risk Perception Delay",
    units="Year",
    subscripts=["Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "climate_risk_perception_delay_noed_variation": 1,
        "time": 4,
        "climate_risk_perception_delay_primary_variation": 1,
        "climate_risk_perception_delay_secondary_variation": 1,
        "climate_risk_perception_delay_tertiary_variation": 1,
    },
)
def climate_risk_perception_delay():
    """
    10, 8, 5, 3
    """
    value = xr.DataArray(
        np.nan, {"Education": _subscript_dict["Education"]}, ["Education"]
    )
    value.loc[["noEd"]] = 10 + step(
        __data["time"], climate_risk_perception_delay_noed_variation() - 10, 2020
    )
    value.loc[["primary"]] = 8 + step(
        __data["time"], climate_risk_perception_delay_primary_variation() - 8, 2020
    )
    value.loc[["secondary"]] = 5 + step(
        __data["time"], climate_risk_perception_delay_secondary_variation() - 5, 2020
    )
    value.loc[["tertiary"]] = 3 + step(
        __data["time"], climate_risk_perception_delay_tertiary_variation() - 3, 2020
    )
    return value


@component.add(
    name="Climate Risk Perception Delay NoEd Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_risk_perception_delay_noed_variation():
    return 10


@component.add(
    name="People to Million People",
    units="Million",
    comp_type="Constant",
    comp_subtype="Normal",
)
def people_to_million_people():
    return 1 / 1000000.0


@component.add(
    name="Waste Fraction PasMeat CropMeat Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def waste_fraction_pasmeat_cropmeat_variation():
    return 1


@component.add(
    name="Initial Change Rate17",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate17():
    """
    Initial Educational Attainment Change Rate
    """
    return 3


@component.add(
    name="Waste Fraction EggsDairy Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def waste_fraction_eggsdairy_variation():
    return 1


@component.add(
    name="Change Rate Start161 0",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start161_0": 1},
)
def change_rate_start161_0():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start161_0()


@component.add(
    name="Change Rate Finish17",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start17": 1, "ramp_period17": 1},
)
def change_rate_finish17():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start17() + ramp_period17()


@component.add(
    name="Initial Change Rate161 0",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate161_0():
    """
    Initial Educational Attainment Change Rate
    """
    return 3


@component.add(
    name="Total Primary Education Graduates Indicator",
    units="Person*Million",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_primary_education_graduates": 1, "people_to_million_people": 1},
)
def total_primary_education_graduates_indicator():
    return total_primary_education_graduates() * people_to_million_people()


@component.add(
    name="Total Tertiary Education Graduates Indicator",
    units="Person*Million",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_tertiary_education_graduates": 1, "people_to_million_people": 1},
)
def total_tertiary_education_graduates_indicator():
    return total_tertiary_education_graduates() * people_to_million_people()


@component.add(
    name="Change Rate Finish161 0",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start161_0": 1, "ramp_period161_0": 1},
)
def change_rate_finish161_0():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start161_0() + ramp_period161_0()


@component.add(
    name="C in Atmosphere Compared to Preindustrial",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_atmosphere": 1, "preindustrial_c_in_atmosphere": 2},
)
def c_in_atmosphere_compared_to_preindustrial():
    return (
        (c_in_atmosphere() - preindustrial_c_in_atmosphere())
        / preindustrial_c_in_atmosphere()
    ) * 100


@component.add(
    name="Forest to Total Land Area",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_land": 1, "total_land_area": 1},
)
def forest_to_total_land_area():
    return (forest_land() / total_land_area()) * 100


@component.add(
    name="Renewable Energy Access Percentage",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"people_with_access_to_renewable_energy": 1, "population": 1},
)
def renewable_energy_access_percentage():
    return (people_with_access_to_renewable_energy() / population()) * 100


@component.add(
    name="Total Renewable Investment per GWP",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_biomass": 1,
        "investment_in_solar": 1,
        "investment_in_wind": 1,
        "population": 1,
        "gwp_per_capita": 1,
    },
)
def total_renewable_investment_per_gwp():
    return (
        (investment_in_biomass() + investment_in_solar() + investment_in_wind())
        / (population() * gwp_per_capita())
    ) * 100


@component.add(
    name="Carbon Emissions per GWP",
    units="TonC/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission": 1, "gross_world_product": 1},
)
def carbon_emissions_per_gwp():
    return total_c_emission() / gross_world_product()


@component.add(
    name="Investment in Biomass",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_biomass_capacity": 1,
        "investment_in_biomass_energy_efficiency": 1,
        "investment_in_biomass_energy_installation": 1,
        "investment_in_biomass_energy_technology": 1,
    },
)
def investment_in_biomass():
    return (
        investment_in_biomass_capacity()
        + investment_in_biomass_energy_efficiency()
        + investment_in_biomass_energy_installation()
        + investment_in_biomass_energy_technology()
    )


@component.add(
    name="Agricultral Land Erosion",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land_erosion_rate": 1},
)
def agricultral_land_erosion():
    return agricultural_land_erosion_rate()


@component.add(
    name="Total Land Area",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "forest_land": 1,
        "other_land": 1,
        "urban_and_industrial_land": 1,
    },
)
def total_land_area():
    return (
        agricultural_land() + forest_land() + other_land() + urban_and_industrial_land()
    )


@component.add(
    name="Energy Demand per Capita Calibrated",
    units="Mtoe/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "population": 1},
)
def energy_demand_per_capita_calibrated():
    return energy_demand() / population()


@component.add(
    name="Renewable Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_production": 1,
        "solar_energy_production": 1,
        "wind_energy_production": 1,
    },
)
def renewable_energy_production():
    return (
        biomass_energy_production()
        + solar_energy_production()
        + wind_energy_production()
    )


@component.add(
    name="Agricultural Land Degradation",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_agricultural_land_degradation": 1},
    other_deps={
        "_integ_agricultural_land_degradation": {
            "initial": {},
            "step": {"agricultural_land_conversion": 1, "agricultral_land_erosion": 1},
        }
    },
)
def agricultural_land_degradation():
    """
    Negative changes in agricultural land area from year 1900.
    """
    return _integ_agricultural_land_degradation()


_integ_agricultural_land_degradation = Integ(
    lambda: agricultural_land_conversion() + agricultral_land_erosion(),
    lambda: 0,
    "_integ_agricultural_land_degradation",
)


@component.add(
    name="Agricultural Land Conversion",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land_conversion_rate_to_urban_land": 1},
)
def agricultural_land_conversion():
    return agricultural_land_conversion_rate_to_urban_land()


@component.add(
    name="Investment in Wind",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_wind_capacity": 1,
        "investment_in_wind_energy_efficiency": 1,
        "investment_in_wind_energy_installation": 1,
        "investment_in_wind_energy_technology": 1,
    },
)
def investment_in_wind():
    return (
        investment_in_wind_capacity()
        + investment_in_wind_energy_efficiency()
        + investment_in_wind_energy_installation()
        + investment_in_wind_energy_technology()
    )


@component.add(
    name="Daily Calorie Demand Supply Average Deficit per Capita",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_daily_calorie_demand_per_capita": 2,
        "total_daily_calorie_supply_per_capita": 2,
    },
)
def daily_calorie_demand_supply_average_deficit_per_capita():
    return if_then_else(
        average_daily_calorie_demand_per_capita()
        / total_daily_calorie_supply_per_capita()
        > 1,
        lambda: (
            average_daily_calorie_demand_per_capita()
            / total_daily_calorie_supply_per_capita()
            - 1
        )
        * 100,
        lambda: 0,
    )


@component.add(
    name="People with Access to Renewable Energy",
    units="Person",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_energy_production": 1,
        "energy_demand_per_capita_calibrated": 1,
    },
)
def people_with_access_to_renewable_energy():
    return renewable_energy_production() / energy_demand_per_capita_calibrated()


@component.add(
    name="Investment in Solar",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_solar_capacity": 1,
        "investment_in_solar_energy_efficiency": 1,
        "investment_in_solar_energy_installation": 1,
        "investment_in_solar_energy_technology": 1,
    },
)
def investment_in_solar():
    return (
        investment_in_solar_capacity()
        + investment_in_solar_energy_efficiency()
        + investment_in_solar_energy_installation()
        + investment_in_solar_energy_technology()
    )


@component.add(
    name="Diet Composition Switch",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"diet_composition_switch_variation": 1, "time": 1},
)
def diet_composition_switch():
    """
    0: Reference meat and vegetarian diets 1: Everyone is flexitarian from 2020 on 2: Meat-eaters eat 'Healthy', vegetarians eat 'Reference' veg diet 3: Meat-eaters eat 'Healthy', vegetarians eat 'Vegan' diet 4: Meat-eaters eat 'Flexitarian', vegetarians eat vegan
    """
    return 0 + step(__data["time"], diet_composition_switch_variation(), 2020)


@component.add(
    name="N fertilizer shares2",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "n_fertilizer_shares_data": 3,
        "time": 2,
        "sa_n_fertilizer_shares": 2,
        "n_fertilizer_shares2": 4,
    },
)
def n_fertilizer_shares2():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[["Grains"]] = float(n_fertilizer_shares_data().loc["Grains"]) * (
        1
        + step(__data["time"], float(sa_n_fertilizer_shares().loc["Grains"]) - 1, 2020)
    )
    value.loc[["PasMeat"]] = 0.047
    value.loc[["OtherCrops"]] = float(n_fertilizer_shares_data().loc["OtherCrops"]) * (
        1
        + step(
            __data["time"], float(sa_n_fertilizer_shares().loc["OtherCrops"]) - 1, 2020
        )
    )
    value.loc[["VegFruits"]] = 1 - (
        float(n_fertilizer_shares2().loc["Grains"])
        + float(n_fertilizer_shares2().loc["Pulses"])
        + float(n_fertilizer_shares2().loc["OtherCrops"])
        + float(n_fertilizer_shares2().loc["PasMeat"])
    )
    value.loc[["Pulses"]] = float(n_fertilizer_shares_data().loc["Pulses"])
    return value


@component.add(
    name="Commercial N application for each category",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_n_application_for_agriculture": 2,
        "n_fertilizer_shares_normalized": 2,
    },
)
def commercial_n_application_for_each_category():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        commercial_n_application_for_agriculture()
        * n_fertilizer_shares_normalized()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = commercial_n_application_for_agriculture() * float(
        n_fertilizer_shares_normalized().loc["PasMeat"]
    )
    return value


@component.add(
    name="P fertilizer shares normalized",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_fertilizer_shares": 6},
)
def p_fertilizer_shares_normalized():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        p_fertilizer_shares()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / (
            sum(
                p_fertilizer_shares()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood!"}),
                dim=["PlantFood!"],
            )
            + float(p_fertilizer_shares().loc["PasMeat"])
        )
    ).values
    value.loc[["PasMeat"]] = float(p_fertilizer_shares().loc["PasMeat"]) / (
        sum(
            p_fertilizer_shares()
            .loc[_subscript_dict["PlantFood"]]
            .rename({"FoodCategories": "PlantFood!"}),
            dim=["PlantFood!"],
        )
        + float(p_fertilizer_shares().loc["PasMeat"])
    )
    return value


@component.add(
    name="Commercial P application for each category",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_p_application_for_agriculture": 2,
        "p_fertilizer_shares_normalized": 2,
    },
)
def commercial_p_application_for_each_category():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        commercial_p_application_for_agriculture()
        * p_fertilizer_shares_normalized()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = commercial_p_application_for_agriculture() * float(
        p_fertilizer_shares_normalized().loc["PasMeat"]
    )
    return value


@component.add(
    name="N fertilizer shares normalized",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_fertilizer_shares": 6},
)
def n_fertilizer_shares_normalized():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        n_fertilizer_shares()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / (
            sum(
                n_fertilizer_shares()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood!"}),
                dim=["PlantFood!"],
            )
            + float(n_fertilizer_shares().loc["PasMeat"])
        )
    ).values
    value.loc[["PasMeat"]] = float(n_fertilizer_shares().loc["PasMeat"]) / (
        sum(
            n_fertilizer_shares()
            .loc[_subscript_dict["PlantFood"]]
            .rename({"FoodCategories": "PlantFood!"}),
            dim=["PlantFood!"],
        )
        + float(n_fertilizer_shares().loc["PasMeat"])
    )
    return value


@component.add(
    name="N leaching and runoff fraction",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_n_leaching_and_runoff_fraction": 1, "time": 1},
)
def n_leaching_and_runoff_fraction():
    """
    Nitrate washed away. Especially going to the rivers and lakes. Runoff is 23% of "applied" N, not the stock as I use her. Leaching is around 12-15 M ton/year. In total, 46 M ton/year. The fraction is calibrated accordingly.
    """
    return 0.8 + step(__data["time"], sa_n_leaching_and_runoff_fraction() - 0.8, 2020)


@component.add(
    name="u Effect of C on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_u_effect_of_c_on_yield": 1, "time": 1},
)
def u_effect_of_c_on_yield():
    return 0 + step(__data["time"], sa_u_effect_of_c_on_yield() - 0, 2020)


@component.add(
    name="p Effect of C on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_p_effect_of_c_on_yield": 1, "time": 1},
)
def p_effect_of_c_on_yield():
    return 1.5 + step(__data["time"], sa_p_effect_of_c_on_yield() - 1.5, 2020)


@component.add(
    name="p Effect of T on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_p_effect_of_t_on_yield": 1, "time": 1},
)
def p_effect_of_t_on_yield():
    return 1.5 + step(__data["time"], sa_p_effect_of_t_on_yield() - 1.5, 2020)


@component.add(
    name="P fertilizer shares",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_fertilizer_shares_data": 1, "time": 1, "sa_p_fertilizer_shares": 1},
)
def p_fertilizer_shares():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        p_fertilizer_shares_data()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * (
            1
            + step(
                __data["time"],
                sa_p_fertilizer_shares()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood"})
                - 1,
                2020,
            )
        )
    ).values
    value.loc[["PasMeat"]] = 0.04
    return value


@component.add(
    name="P fertilizer shares Data",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def p_fertilizer_shares_data():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = xr.DataArray(
        [0.067, 0.446, 0.212, 0.235],
        {"FoodCategories": _subscript_dict["PlantFood"]},
        ["FoodCategories"],
    ).values
    value.loc[["PasMeat"]] = 0.04
    return value


@component.add(
    name="P leaching fraction",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_p_leaching_fraction": 1, "time": 1},
)
def p_leaching_fraction():
    """
    When parameter: 0.25 Calibrated: 0.06
    """
    return 0.3 + step(__data["time"], sa_p_leaching_fraction() - 0.3, 2020)


@component.add(
    name="SA x0 fertilizer",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_x0_fertilizer():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = xr.DataArray(
        [1.0, 1.0, 1.0, 1.0],
        {"FoodCategories": _subscript_dict["PlantFood"]},
        ["FoodCategories"],
    ).values
    value.loc[["PasMeat"]] = 1
    return value


@component.add(
    name="SA N fertilizer shares",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_n_fertilizer_shares():
    return xr.DataArray(
        [1.0, 1.0, 1.0, 1.0], {"PlantFood": _subscript_dict["PlantFood"]}, ["PlantFood"]
    )


@component.add(
    name="N fertilizer shares",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_fertilizer_shares_data": 1, "time": 1, "sa_n_fertilizer_shares": 1},
)
def n_fertilizer_shares():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        n_fertilizer_shares_data()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * (1 + step(__data["time"], sa_n_fertilizer_shares() - 1, 2020))
    ).values
    value.loc[["PasMeat"]] = 0.047
    return value


@component.add(
    name="N fertilizer shares Data",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def n_fertilizer_shares_data():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = xr.DataArray(
        [0.083, 0.559, 0.155, 0.155],
        {"FoodCategories": _subscript_dict["PlantFood"]},
        ["FoodCategories"],
    ).values
    value.loc[["PasMeat"]] = 0.047
    return value


@component.add(
    name="SA x0 land fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_x0_land_fert():
    return 1.13


@component.add(
    name="SA k land fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_k_land_fert():
    return 1.6


@component.add(
    name="SA p Effect of C on Yield",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_p_effect_of_c_on_yield():
    return 1.5


@component.add(
    name="SA p Effect of T on Yield",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_p_effect_of_t_on_yield():
    return 1.5


@component.add(name="Cbeta", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def cbeta():
    """
    End point of the domain of the table function. In this model, qual to 1.
    """
    return 5


@component.add(
    name="SA P leaching fraction",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_p_leaching_fraction():
    """
    When parameter: 0.25 Calibrated: 0.06
    """
    return 0.3


@component.add(
    name="SA L fertilizer",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_l_fertilizer():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = xr.DataArray(
        [1.56, 1.6, 1.5, 2.5],
        {"FoodCategories": _subscript_dict["PlantFood"]},
        ["FoodCategories"],
    ).values
    value.loc[["PasMeat"]] = 1.8
    return value


@component.add(
    name="SA Recoverable manure fraction pasture based",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_recoverable_manure_fraction_pasture_based():
    """
    Estimated based on FAO data and Scheldrick et al. 2003. See FAO...ProducingAnimals.xlsx
    """
    return 0.24


@component.add(
    name="SA L gwp fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_l_gwp_fert():
    """
    Calibrated simultaneously for Eff of GWP and Eff of Land. See FertilizerLookups.xlsx/Calibration...
    """
    return 1.25


@component.add(
    name="SA L land fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_l_land_fert():
    return 2.2


@component.add(
    name="Distortion Function C",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_concentration_ratio": 3,
        "p_effect_of_c_on_yield": 4,
        "calpha": 2,
        "m_effect_of_c_on_yield": 3,
        "u_effect_of_c_on_yield": 1,
        "cbeta": 1,
    },
)
def distortion_function_c():
    """
    Single Triangular Distortion Function with Static End Points l+m-(l+m-u)*(Iratio-p)/(1-p)
    """
    return if_then_else(
        c_concentration_ratio() <= p_effect_of_c_on_yield(),
        lambda: 1
        + m_effect_of_c_on_yield()
        * (c_concentration_ratio() - calpha())
        / (p_effect_of_c_on_yield() - calpha()),
        lambda: 1
        + m_effect_of_c_on_yield()
        - (1 + m_effect_of_c_on_yield() - u_effect_of_c_on_yield())
        * (c_concentration_ratio() - p_effect_of_c_on_yield())
        / (cbeta() - p_effect_of_c_on_yield()),
    )


@component.add(
    name="u Effect of T on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_u_effect_of_t_on_yield": 1, "time": 1},
)
def u_effect_of_t_on_yield():
    return 0 + step(__data["time"], sa_u_effect_of_t_on_yield() - 0, 2020)


@component.add(
    name="Recoverable manure fraction pasture based",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_recoverable_manure_fraction_pasture_based": 1, "time": 1},
)
def recoverable_manure_fraction_pasture_based():
    """
    Estimated based on FAO data and Scheldrick et al. 2003. See FAO...ProducingAnimals.xlsx
    """
    return 0.24 + step(
        __data["time"], sa_recoverable_manure_fraction_pasture_based() - 0.24, 2020
    )


@component.add(
    name="m Effect of C on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_m_effect_of_c_on_yield": 1, "time": 1},
)
def m_effect_of_c_on_yield():
    return 0 + step(__data["time"], sa_m_effect_of_c_on_yield(), 2020)


@component.add(
    name="SA m Effect of C on Yield",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_m_effect_of_c_on_yield():
    return 0


@component.add(
    name="SA m Effect of T on Yield",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_m_effect_of_t_on_yield():
    return 0


@component.add(
    name="SA x0 gwp fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_x0_gwp_fert():
    return 1.44


@component.add(
    name="L land fert",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_l_land_fert": 1, "time": 1},
)
def l_land_fert():
    return 2.2 + step(__data["time"], sa_l_land_fert() - 2.2, 2020)


@component.add(
    name="SA u Effect of T on Yield",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_u_effect_of_t_on_yield():
    return 1


@component.add(
    name="SA N leaching and runoff fraction",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_n_leaching_and_runoff_fraction():
    """
    Nitrate washed away. Especially going to the rivers and lakes. Runoff is 23% of "applied" N, not the stock as I use her. Leaching is around 12-15 M ton/year. In total, 46 M ton/year. The fraction is calibrated accordingly.
    """
    return 0.8


@component.add(
    name="SA P fertilizer shares",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_p_fertilizer_shares():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = xr.DataArray(
        [1.0, 1.0, 1.0, 1.0],
        {"FoodCategories": _subscript_dict["PlantFood"]},
        ["FoodCategories"],
    ).values
    value.loc[["PasMeat"]] = 0.04
    return value


@component.add(
    name="SA k fertilizer",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_k_fertilizer():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = xr.DataArray(
        [0.2, 0.8, 0.25, 1.0],
        {"FoodCategories": _subscript_dict["PlantFood"]},
        ["FoodCategories"],
    ).values
    value.loc[["PasMeat"]] = 1
    return value


@component.add(name="Calpha", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def calpha():
    """
    Beginning point of the domain of the table function. In this model, equal to 0.
    """
    return 1.25


@component.add(
    name="x0 fertilizer",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_x0_fertilizer": 1, "time": 1},
)
def x0_fertilizer():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        1
        + step(
            __data["time"],
            sa_x0_fertilizer()
            .loc[_subscript_dict["PlantFood"]]
            .rename({"FoodCategories": "PlantFood"})
            - 1,
            2020,
        )
    ).values
    value.loc[["PasMeat"]] = 1
    return value


@component.add(
    name="SA k gwp fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_k_gwp_fert():
    """
    1.5
    """
    return 3


@component.add(
    name="L fertilizer",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_l_fertilizer": 4, "time": 4},
)
def l_fertilizer():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[["Pulses"]] = 1.56 + step(
        __data["time"], float(sa_l_fertilizer().loc["Pulses"]) - 1.56, 2020
    )
    value.loc[["PasMeat"]] = 1.8
    value.loc[["Grains"]] = 1.6 + step(
        __data["time"], float(sa_l_fertilizer().loc["Grains"]) - 1.6, 2020
    )
    value.loc[["VegFruits"]] = 1.5 + step(
        __data["time"], float(sa_l_fertilizer().loc["VegFruits"]) - 1.5, 2020
    )
    value.loc[["OtherCrops"]] = 2.5 + step(
        __data["time"], float(sa_l_fertilizer().loc["OtherCrops"]) - 2.5, 2020
    )
    return value


@component.add(
    name="SA Recoverable manure fraction crop based",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_recoverable_manure_fraction_crop_based():
    """
    Estimated based on FAO data and Scheldrick et al. 2003. See FAO...ProducingAnimals.xlsx
    """
    return 0.78


@component.add(
    name="k land fert",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_k_land_fert": 1, "time": 1},
)
def k_land_fert():
    return 1.6 + step(__data["time"], sa_k_land_fert() - 1.6, 2020)


@component.add(
    name="m Effect of T on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_m_effect_of_t_on_yield": 1, "time": 1},
)
def m_effect_of_t_on_yield():
    return 0 + step(__data["time"], sa_m_effect_of_t_on_yield(), 2020)


@component.add(
    name="x0 land fert",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_x0_land_fert": 1, "time": 1},
)
def x0_land_fert():
    return 1.13 + step(__data["time"], sa_x0_land_fert() - 1.13, 2020)


@component.add(
    name="Recoverable manure fraction crop based",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_recoverable_manure_fraction_crop_based": 1, "time": 1},
)
def recoverable_manure_fraction_crop_based():
    """
    Estimated based on FAO data and Scheldrick et al. 2003. See FAO...ProducingAnimals.xlsx
    """
    return 0.78 + step(
        __data["time"], sa_recoverable_manure_fraction_crop_based() - 0.78, 2020
    )


@component.add(
    name="SA u Effect of C on Yield",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_u_effect_of_c_on_yield():
    return 1


@component.add(
    name="k fertilizer",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_k_fertilizer": 4, "time": 4},
)
def k_fertilizer():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[["Pulses"]] = 0.2 + step(
        __data["time"], float(sa_k_fertilizer().loc["Pulses"]) - 0.2, 2020
    )
    value.loc[["PasMeat"]] = 1
    value.loc[["Grains"]] = 0.8 + step(
        __data["time"], float(sa_k_fertilizer().loc["Grains"]) - 0.8, 2020
    )
    value.loc[["VegFruits"]] = 0.25 + step(
        __data["time"], float(sa_k_fertilizer().loc["VegFruits"]) - 0.25, 2020
    )
    value.loc[["OtherCrops"]] = 1 + step(
        __data["time"], float(sa_k_fertilizer().loc["OtherCrops"]) - 1, 2020
    )
    return value


@component.add(
    name="Distortion Function T",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "temperature_change_from_preindustrial": 3,
        "p_effect_of_t_on_yield": 4,
        "m_effect_of_t_on_yield": 3,
        "alpha": 2,
        "beta": 1,
        "u_effect_of_t_on_yield": 1,
    },
)
def distortion_function_t():
    """
    Single Triangular Distortion Function with Static End Points l+m-(l+m-u)*(Iratio-p)/(1-p)
    """
    return if_then_else(
        temperature_change_from_preindustrial() <= p_effect_of_t_on_yield(),
        lambda: 1
        + m_effect_of_t_on_yield()
        * (temperature_change_from_preindustrial() - alpha())
        / (p_effect_of_t_on_yield() - alpha()),
        lambda: 1
        + m_effect_of_t_on_yield()
        - (1 + m_effect_of_t_on_yield() - u_effect_of_t_on_yield())
        * (temperature_change_from_preindustrial() - p_effect_of_t_on_yield())
        / (beta() - p_effect_of_t_on_yield()),
    )


@component.add(name="alpha", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def alpha():
    """
    Beginning point of the domain of the table function. In this model, equal to 0.
    """
    return 1.25


@component.add(
    name="Distorted Effect of T on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "distortion_function_t": 1,
        "temperature_change_from_preindustrial": 1,
        "effect_of_t_on_yield_lookup": 1,
    },
)
def distorted_effect_of_t_on_yield():
    return distortion_function_t() * effect_of_t_on_yield_lookup(
        temperature_change_from_preindustrial()
    )


@component.add(name="beta", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def beta():
    """
    End point of the domain of the table function. In this model, qual to 1.
    """
    return 5


@component.add(
    name="Effect of T on Yield Lookup",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_effect_of_t_on_yield_lookup"},
)
def effect_of_t_on_yield_lookup(x, final_subs=None):
    return _hardcodedlookup_effect_of_t_on_yield_lookup(x, final_subs)


_hardcodedlookup_effect_of_t_on_yield_lookup = HardcodedLookups(
    [1.25, 1.5, 2.0, 2.5, 3.0],
    [1.0, 1.0, 1.0, 1.0, 1.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_effect_of_t_on_yield_lookup",
)


@component.add(
    name="SA k C on Yield", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_k_c_on_yield():
    return 0


@component.add(
    name="Desired Agricultural Land Conversion Trend Averaging Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def desired_agricultural_land_conversion_trend_averaging_time_variation():
    return 10


@component.add(
    name="SA x0 C on Yield", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_x0_c_on_yield():
    return 5


@component.add(
    name="SA k T on Yield", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_k_t_on_yield():
    return 0


@component.add(
    name="k T on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_k_t_on_yield": 1, "time": 1},
)
def k_t_on_yield():
    return 0 + step(__data["time"], sa_k_t_on_yield(), 2020)


@component.add(
    name="SA x0 T on Yield",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_x0_t_on_yield():
    return 2


@component.add(
    name="Population SSP1",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def population_ssp1():
    return np.interp(
        time(),
        [
            1970.0,
            1975.0,
            1980.0,
            1985.0,
            1990.0,
            1995.0,
            2000.0,
            2005.0,
            2010.0,
            2015.0,
            2020.0,
            2025.0,
            2030.0,
            2035.0,
            2040.0,
            2045.0,
            2050.0,
            2055.0,
            2060.0,
            2065.0,
            2070.0,
            2075.0,
            2080.0,
            2085.0,
            2090.0,
            2095.0,
            2100.0,
        ],
        [
            3.68074e09,
            4.05941e09,
            4.43414e09,
            4.79669e09,
            5.28493e09,
            5.70370e09,
            6.09965e09,
            6.48224e09,
            6.87086e09,
            7.22354e09,
            7.53499e09,
            7.80413e09,
            8.02440e09,
            8.21115e09,
            8.35685e09,
            8.45538e09,
            8.50423e09,
            8.50888e09,
            8.47265e09,
            8.39950e09,
            8.29207e09,
            8.15223e09,
            7.98198e09,
            7.78445e09,
            7.56537e09,
            7.33031e09,
            7.08389e09,
        ],
    )


@component.add(
    name="Population SSP2",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def population_ssp2():
    return np.interp(
        time(),
        [
            1970.0,
            1975.0,
            1980.0,
            1985.0,
            1990.0,
            1995.0,
            2000.0,
            2005.0,
            2010.0,
            2015.0,
            2020.0,
            2025.0,
            2030.0,
            2035.0,
            2040.0,
            2045.0,
            2050.0,
            2055.0,
            2060.0,
            2065.0,
            2070.0,
            2075.0,
            2080.0,
            2085.0,
            2090.0,
            2095.0,
            2100.0,
        ],
        [
            3.68074e09,
            4.05941e09,
            4.43414e09,
            4.79669e09,
            5.28493e09,
            5.70370e09,
            6.09965e09,
            6.48224e09,
            6.87086e09,
            7.24792e09,
            7.61173e09,
            7.94973e09,
            8.25612e09,
            8.53101e09,
            8.77220e09,
            8.97649e09,
            9.14040e09,
            9.26159e09,
            9.34085e09,
            9.38442e09,
            9.39716e09,
            9.38021e09,
            9.33460e09,
            9.26382e09,
            9.17313e09,
            9.06635e09,
            8.94823e09,
        ],
    )


@component.add(
    name="Population SSP3",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def population_ssp3():
    return np.interp(
        time(),
        [
            1970.0,
            1975.0,
            1980.0,
            1985.0,
            1990.0,
            1995.0,
            2000.0,
            2005.0,
            2010.0,
            2015.0,
            2020.0,
            2025.0,
            2030.0,
            2035.0,
            2040.0,
            2045.0,
            2050.0,
            2055.0,
            2060.0,
            2065.0,
            2070.0,
            2075.0,
            2080.0,
            2085.0,
            2090.0,
            2095.0,
            2100.0,
        ],
        [
            3.68074e09,
            4.05941e09,
            4.43414e09,
            4.79669e09,
            5.28493e09,
            5.70370e09,
            6.09965e09,
            6.48224e09,
            6.87086e09,
            7.27824e09,
            7.69384e09,
            8.10623e09,
            8.51113e09,
            8.89247e09,
            9.25997e09,
            9.61812e09,
            9.96610e09,
            1.02924e10,
            1.05964e10,
            1.08827e10,
            1.11599e10,
            1.14322e10,
            1.17018e10,
            1.19679e10,
            1.22331e10,
            1.24941e10,
            1.27517e10,
        ],
    )


@component.add(
    name="Population SSP4",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def population_ssp4():
    return np.interp(
        time(),
        [
            1970.0,
            1975.0,
            1980.0,
            1985.0,
            1990.0,
            1995.0,
            2000.0,
            2005.0,
            2010.0,
            2015.0,
            2020.0,
            2025.0,
            2030.0,
            2035.0,
            2040.0,
            2045.0,
            2050.0,
            2055.0,
            2060.0,
            2065.0,
            2070.0,
            2075.0,
            2080.0,
            2085.0,
            2090.0,
            2095.0,
            2100.0,
        ],
        [
            3.68074e09,
            4.05941e09,
            4.43414e09,
            4.79669e09,
            5.28493e09,
            5.70370e09,
            6.09965e09,
            6.48224e09,
            6.87086e09,
            7.24797e09,
            7.60818e09,
            7.94136e09,
            8.24256e09,
            8.51377e09,
            8.75486e09,
            8.96436e09,
            9.13967e09,
            9.27775e09,
            9.37804e09,
            9.44417e09,
            9.48298e09,
            9.49829e09,
            9.49356e09,
            9.47088e09,
            9.43664e09,
            9.39173e09,
            9.34039e09,
        ],
    )


@component.add(
    name="Population SSP5",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def population_ssp5():
    return np.interp(
        time(),
        [
            1970.0,
            1975.0,
            1980.0,
            1985.0,
            1990.0,
            1995.0,
            2000.0,
            2005.0,
            2010.0,
            2015.0,
            2020.0,
            2025.0,
            2030.0,
            2035.0,
            2040.0,
            2045.0,
            2050.0,
            2055.0,
            2060.0,
            2065.0,
            2070.0,
            2075.0,
            2080.0,
            2085.0,
            2090.0,
            2095.0,
            2100.0,
        ],
        [
            3.68074e09,
            4.05941e09,
            4.43414e09,
            4.79669e09,
            5.28493e09,
            5.70370e09,
            6.09965e09,
            6.48224e09,
            6.87086e09,
            7.22627e09,
            7.54328e09,
            7.82112e09,
            8.05357e09,
            8.25396e09,
            8.41534e09,
            8.53258e09,
            8.60428e09,
            8.63563e09,
            8.62990e09,
            8.59049e09,
            8.51970e09,
            8.41967e09,
            8.29287e09,
            8.14260e09,
            7.97431e09,
            7.79307e09,
            7.60303e09,
        ],
    )


@component.add(
    name="Forest to Agriculture Land Allocation Time Variation",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_to_agriculture_land_allocation_time_variation():
    return 5


@component.add(
    name="Fraction of Agricultural Land Conversion from Forest Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_agricultural_land_conversion_from_forest_variation():
    return 0.95


@component.add(
    name="Feed share of crop types Data",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def feed_share_of_crop_types_data():
    """
    PlantFood includes Pulses, grains, vegfruits, and other crops
    """
    return xr.DataArray(
        [0.014, 0.715, 0.223, 0.048],
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    )


@component.add(
    name="Fraction of Forest Land Conversion from Agriculture Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fraction_of_forest_land_conversion_from_agriculture_variation():
    return 0.1


@component.add(
    name="x0 T on Yield",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_x0_t_on_yield": 1, "time": 1},
)
def x0_t_on_yield():
    return 2 + step(__data["time"], sa_x0_t_on_yield() - 2, 2020)


@component.add(
    name="k C on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_k_c_on_yield": 1, "time": 1},
)
def k_c_on_yield():
    return 0 + step(__data["time"], sa_k_c_on_yield(), 2020)


@component.add(
    name="Trend Averaging Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "desired_agricultural_land_conversion_trend_averaging_time_variation": 1,
        "time": 1,
    },
)
def trend_averaging_time():
    """
    This parameter represents how many years ahead is taken into account to foresee the land demand for land conversion.
    """
    return 10 + step(
        __data["time"],
        desired_agricultural_land_conversion_trend_averaging_time_variation() - 10,
        2020,
    )


@component.add(
    name="Caloric value of food Data",
    units="Mkcal/Ton",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def caloric_value_of_food_data():
    return xr.DataArray(
        [1.2, 1.546, 0.6, 1.43, 3.442, 3.207, 0.483, 0.8],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Fraction of Forest Land Conversion from Agriculture",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_forest_land_conversion_from_agriculture_variation": 1,
        "time": 1,
    },
)
def fraction_of_forest_land_conversion_from_agriculture():
    return 0.1 + step(
        __data["time"],
        fraction_of_forest_land_conversion_from_agriculture_variation() - 0.1,
        2020,
    )


@component.add(
    name="SA multiplier for caloric value",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_multiplier_for_caloric_value():
    return 1


@component.add(
    name="Nominal Energy Agriculture Land Productivity Variation",
    units="Biomass ton/(ha*Year)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def nominal_energy_agriculture_land_productivity_variation():
    return 12.5


@component.add(
    name="SA L C on Yield", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_l_c_on_yield():
    return 2


@component.add(
    name="Caloric value of food",
    units="Mkcal/Ton",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "caloric_value_of_food_data": 1,
        "sa_multiplier_for_caloric_value": 1,
        "time": 1,
    },
)
def caloric_value_of_food():
    return caloric_value_of_food_data() * (
        1 + step(__data["time"], sa_multiplier_for_caloric_value() - 1, 2020)
    )


@component.add(
    name="Waste fraction Data",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def waste_fraction_data():
    return xr.DataArray(
        [0.2, 0.2, 0.2, 0.2, 0.2, 0.3, 0.45, 0.2],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="L T on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_l_t_on_yield": 1, "time": 1},
)
def l_t_on_yield():
    return 2 + step(__data["time"], sa_l_t_on_yield() - 2, 2020)


@component.add(
    name="SA L T on Yield", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_l_t_on_yield():
    return 2


@component.add(
    name="x0 C on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_x0_c_on_yield": 1, "time": 1},
)
def x0_c_on_yield():
    return 5 + step(__data["time"], sa_x0_c_on_yield() - 5, 2020)


@component.add(
    name="L C on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_l_c_on_yield": 1, "time": 1},
)
def l_c_on_yield():
    return 2 + step(__data["time"], sa_l_c_on_yield() - 2, 2020)


@component.add(
    name="Reference Input Neutral TC in Agriculture Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_input_neutral_tc_in_agriculture_variation():
    return 0.3


@component.add(
    name="a fertility", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def a_fertility():
    """
    Calibrated according to Total Fertility and Population data 1.013 + STEP(SA a fertility-1.013, 2020)
    """
    return 2.26591


@component.add(
    name="SA Subsistence Food per Capita",
    units="kcal/(Person*Day)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_subsistence_food_per_capita():
    return 2000


@component.add(
    name="Birth Gender Fraction Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def birth_gender_fraction_variation():
    return 0.515


@component.add(
    name="Max Impact of Biodiversity on Health",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_max_impact_of_biodiversity_on_health": 1, "time": 1},
)
def max_impact_of_biodiversity_on_health():
    """
    Max impact of biodiversity on health and thus life expectancy.
    """
    return 1 + step(__data["time"], sa_max_impact_of_biodiversity_on_health() - 1, 2020)


@component.add(
    name="b fertility", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def b_fertility():
    """
    Calibrated according to Total Fertility and Population data 0.0648 + STEP(SA b fertility-0.0648, 2020)
    """
    return 0.129381


@component.add(
    name="Life Expectancy Normal",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def life_expectancy_normal():
    return 28.785


@component.add(
    name="SA Max Impact of Biodiversity on Health",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_max_impact_of_biodiversity_on_health():
    return 1


@component.add(
    name="SA Min Impact of Biodiversity on Health",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_min_impact_of_biodiversity_on_health():
    return 0.95


@component.add(
    name="Min Impact of Biodiversity on Health",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_min_impact_of_biodiversity_on_health": 1, "time": 1},
)
def min_impact_of_biodiversity_on_health():
    """
    Minimal impact of biodiversity on health and thus life expectancy.
    """
    return 0.95 + step(
        __data["time"], sa_min_impact_of_biodiversity_on_health() - 0.95, 2020
    )


@component.add(
    name="Effect of Land Availability on Fertilizer UseLOOKUP",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_effect_of_land_availability_on_fertilizer_uselookup"
    },
)
def effect_of_land_availability_on_fertilizer_uselookup(x, final_subs=None):
    return _hardcodedlookup_effect_of_land_availability_on_fertilizer_uselookup(
        x, final_subs
    )


_hardcodedlookup_effect_of_land_availability_on_fertilizer_uselookup = HardcodedLookups(
    [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0],
    [0.0, 0.2, 0.45, 0.75, 1.0, 1.25, 1.4, 1.45, 1.5],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_effect_of_land_availability_on_fertilizer_uselookup",
)


@component.add(
    name="Effect of Land Availability on Fertilizer Use",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_land_fert": 1,
        "x0_land_fert": 1,
        "k_land_fert": 1,
        "relative_demsupply_ratio_agrland": 1,
    },
)
def effect_of_land_availability_on_fertilizer_use():
    """
    L land fert / ( 1 + EXP(-k land fert * (Relative DemSupply Ratio AgrLand - x0 land fert)) )
    """
    return l_land_fert() / (
        1
        + float(
            np.exp(
                -k_land_fert() * (relative_demsupply_ratio_agrland() - x0_land_fert())
            )
        )
    )


@component.add(
    name="L Fertility Variation",
    units="Dmnl",
    subscripts=["Fertile"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def l_fertility_variation():
    return xr.DataArray(0, {"Fertile": _subscript_dict["Fertile"]}, ["Fertile"])


@component.add(
    name="Subsistence Food per Capita",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_subsistence_food_per_capita": 1, "time": 1},
)
def subsistence_food_per_capita():
    """
    Subsistence amount of food per person required to survive.
    """
    return 2000 + step(__data["time"], sa_subsistence_food_per_capita() - 2000, 2020)


@component.add(
    name="Food Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_daily_calorie_supply_per_capita": 1,
        "subsistence_food_per_capita": 1,
    },
)
def food_ratio():
    """
    Available food to subsistence food per capita ratio.
    """
    return total_daily_calorie_supply_per_capita() / subsistence_food_per_capita()


@component.add(
    name="Effect of Income on Fertilizer Use LOOKUP",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_effect_of_income_on_fertilizer_use_lookup"
    },
)
def effect_of_income_on_fertilizer_use_lookup(x, final_subs=None):
    return _hardcodedlookup_effect_of_income_on_fertilizer_use_lookup(x, final_subs)


_hardcodedlookup_effect_of_income_on_fertilizer_use_lookup = HardcodedLookups(
    [0.0, 0.4, 1.0, 1.88, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0],
    [0.0, 0.1, 0.5, 1.0, 1.05, 1.25, 1.35, 1.42, 1.47, 1.5, 1.5, 1.5, 1.5],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_effect_of_income_on_fertilizer_use_lookup",
)


@component.add(
    name="Effect of Income on Fertilizer Use",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_gwp_fert": 1,
        "k_gwp_fert": 1,
        "relative_gwp_per_capita": 1,
        "x0_gwp_fert": 1,
    },
)
def effect_of_income_on_fertilizer_use():
    """
    L gwp fert / (1 + EXP(-k gwp fert * (Relative GWP per Capita - x0 gwp fert)) )
    """
    return l_gwp_fert() / (
        1 + float(np.exp(-k_gwp_fert() * (relative_gwp_per_capita() - x0_gwp_fert())))
    )


@component.add(
    name="Relative DemSupply Ratio AgrLand",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "smoothed_demand_supply_ratio_agr_land": 1,
        "reference_dem_suppyl_ratio_agr_land_2010": 1,
    },
)
def relative_demsupply_ratio_agrland():
    return (
        smoothed_demand_supply_ratio_agr_land()
        / reference_dem_suppyl_ratio_agr_land_2010()
    )


@component.add(
    name="NTotal P produced in manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "n_produced_in_the_manure_of_cropbased_animals": 1,
        "n_produced_in_the_manure_of_pasturebased_animals": 1,
    },
)
def ntotal_p_produced_in_manure():
    return (
        n_produced_in_the_manure_of_cropbased_animals()
        + n_produced_in_the_manure_of_pasturebased_animals()
    )


@component.add(
    name="Recoverable N generated in crop based manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "n_produced_in_the_manure_of_cropbased_animals": 1,
        "recoverable_manure_fraction_crop_based": 1,
    },
)
def recoverable_n_generated_in_crop_based_manure():
    return (
        n_produced_in_the_manure_of_cropbased_animals()
        * recoverable_manure_fraction_crop_based()
    )


@component.add(
    name="Recoverable N generated in pasture based manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "n_produced_in_the_manure_of_pasturebased_animals": 1,
        "recoverable_manure_fraction_pasture_based": 1,
    },
)
def recoverable_n_generated_in_pasture_based_manure():
    return (
        n_produced_in_the_manure_of_pasturebased_animals()
        * recoverable_manure_fraction_pasture_based()
    )


@component.add(
    name="Production rate of animal food",
    units="Ton/Year",
    subscripts=["AnimalFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "food_demand_in_tonnes": 1,
        "feed_availability": 1,
        "unit_feed_used_for_meat_production": 1,
        "production_rate_of_animal_food": 1,
        "meat_to_eggs_multiplier": 1,
        "production_rate_of_pasture_based_food": 2,
    },
)
def production_rate_of_animal_food():
    value = xr.DataArray(
        np.nan, {"AnimalFood": _subscript_dict["AnimalFood"]}, ["AnimalFood"]
    )
    value.loc[["CropMeat"]] = float(
        np.minimum(
            float(food_demand_in_tonnes().loc["CropMeat"]),
            sum(
                feed_availability().rename({"PlantFood": "PlantFood!"})
                / unit_feed_used_for_meat_production(),
                dim=["PlantFood!"],
            ),
        )
    )
    value.loc[["Eggs"]] = (
        float(production_rate_of_animal_food().loc["CropMeat"])
        * meat_to_eggs_multiplier()
    )
    value.loc[["PasMeat"]] = float(
        production_rate_of_pasture_based_food().loc["PasMeat"]
    )
    value.loc[["Dairy"]] = float(production_rate_of_pasture_based_food().loc["Dairy"])
    return value


@component.add(
    name="Nitrogen application with manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "recoverable_n_generated_in_crop_based_manure": 1,
        "recoverable_n_generated_in_pasture_based_manure": 1,
    },
)
def nitrogen_application_with_manure():
    return (
        recoverable_n_generated_in_crop_based_manure()
        + recoverable_n_generated_in_pasture_based_manure()
    )


@component.add(
    name="Nitrogen",
    units="Ton",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_nitrogen": 1},
    other_deps={
        "_integ_nitrogen": {
            "initial": {"initial_mobile_nitrogen": 1},
            "step": {
                "commercial_n_application_for_agriculture": 1,
                "deposition": 1,
                "mineralization": 1,
                "nitrogen_application_with_manure": 1,
                "denitrification_rate": 1,
                "nitrogen_leaching_and_runoff_rate": 1,
                "total_n_uptake_rate": 1,
            },
        }
    },
)
def nitrogen():
    """
    "Mobile" elemental nitrogen in soil.
    """
    return _integ_nitrogen()


_integ_nitrogen = Integ(
    lambda: commercial_n_application_for_agriculture()
    + deposition()
    + mineralization()
    + nitrogen_application_with_manure()
    - denitrification_rate()
    - nitrogen_leaching_and_runoff_rate()
    - total_n_uptake_rate(),
    lambda: initial_mobile_nitrogen(),
    "_integ_nitrogen",
)


@component.add(
    name='"N produced in the manure of pasture-based animals"',
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_n_production_via_manure_pasture_based": 1,
        "production_rate_of_animal_food": 2,
    },
)
def n_produced_in_the_manure_of_pasturebased_animals():
    return unit_n_production_via_manure_pasture_based() * (
        float(production_rate_of_animal_food().loc["PasMeat"])
        + float(production_rate_of_animal_food().loc["Dairy"])
    )


@component.add(
    name='"N produced in the manure of crop-based animals"',
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_n_production_via_manure_crop_based": 1,
        "production_rate_of_animal_food": 2,
    },
)
def n_produced_in_the_manure_of_cropbased_animals():
    return unit_n_production_via_manure_crop_based() * (
        float(production_rate_of_animal_food().loc["CropMeat"])
        + float(production_rate_of_animal_food().loc["Eggs"])
    )


@component.add(
    name="Reference Dem Suppyl Ratio Agr Land 2010",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_dem_suppyl_ratio_agr_land_2010():
    return 0.53


@component.add(
    name="Unit N production via manure crop based",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_n_production_via_manure_crop_based():
    """
    See FAO...ProducingAnimals.xls - Estimated based on FAO data on food production and number of livestock; and Shildrick et al 2003 for unit N manure production values. It is ton/ton, so dimensionless.
    """
    return 0.0702


@component.add(
    name="Total P produced in manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_produced_in_the_manure_of_cropbased_animals": 1,
        "p_produced_in_the_manure_of_pasturebased_animals": 1,
    },
)
def total_p_produced_in_manure():
    return (
        p_produced_in_the_manure_of_cropbased_animals()
        + p_produced_in_the_manure_of_pasturebased_animals()
    )


@component.add(
    name='"P produced in the manure of pasture-based animals"',
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_p_production_via_manure_pasture_based": 1,
        "production_rate_of_animal_food": 2,
    },
)
def p_produced_in_the_manure_of_pasturebased_animals():
    return unit_p_production_via_manure_pasture_based() * (
        float(production_rate_of_animal_food().loc["PasMeat"])
        + float(production_rate_of_animal_food().loc["Dairy"])
    )


@component.add(
    name='"P produced in the manure of crop-based animals"',
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_p_production_via_manure_crop_based": 1,
        "production_rate_of_animal_food": 2,
    },
)
def p_produced_in_the_manure_of_cropbased_animals():
    return unit_p_production_via_manure_crop_based() * (
        float(production_rate_of_animal_food().loc["CropMeat"])
        + float(production_rate_of_animal_food().loc["Eggs"])
    )


@component.add(
    name="Unit N production via manure pasture based",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_n_production_via_manure_pasture_based():
    """
    See FAO...ProducingAnimals.xls - Estimated based on FAO data on animal calorie supply and number of livestock; and Shildrick et al 2003 for unit N manure production values. [Ton/ton]
    """
    return 0.0334


@component.add(
    name="Total Agricultural and Land Use Emissions",
    units="TonCO2/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_co2_emissions_from_land_use": 1,
        "total_co2_emissions_from_agriculture": 1,
    },
)
def total_agricultural_and_land_use_emissions():
    return total_co2_emissions_from_land_use() + total_co2_emissions_from_agriculture()


@component.add(
    name="Percentage of animal calories",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"diet_composition_percentage": 1},
)
def percentage_of_animal_calories():
    return sum(
        diet_composition_percentage()
        .loc[_subscript_dict["AnimalFood"]]
        .rename({"FoodCategories": "AnimalFood!"}),
        dim=["AnimalFood!"],
    )


@component.add(
    name="Average Kcal Intake per Person",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "annual_caloric_demand": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def average_kcal_intake_per_person():
    return annual_caloric_demand() / (population() * days_in_year() * kcal_to_mkcal())


@component.add(
    name="Diet Composition Percentage",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_kcal_intake_per_person": 2},
)
def diet_composition_percentage():
    return average_kcal_intake_per_person() / sum(
        average_kcal_intake_per_person().rename({"FoodCategories": "FoodCategories!"}),
        dim=["FoodCategories!"],
    )


@component.add(
    name="Response Efficacy Multiplier Variation",
    units="Dmnl",
    subscripts=["Education"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def response_efficacy_multiplier_variation():
    """
    Base: 0.8, 0.9, 1, 1.2
    """
    return xr.DataArray(
        [0.8, 0.9, 1.0, 1.2], {"Education": _subscript_dict["Education"]}, ["Education"]
    )


@component.add(
    name="Self Efficacy Multiplier Variation",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def self_efficacy_multiplier_variation():
    """
    Is it also dependent on age?
    """
    return xr.DataArray([0.8, 1.2], {"Gender": _subscript_dict["Gender"]}, ["Gender"])


@component.add(
    name="Time to forget climate events",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_time_to_forget_climate_events": 1, "time": 1},
)
def time_to_forget_climate_events():
    """
    The time it takes for a memory to fade from public memory.
    """
    return 2 + step(__data["time"], sa_time_to_forget_climate_events() - 2, 2020)


@component.add(
    name="SA x0 risk attitude",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_x0_risk_attitude():
    return 5


@component.add(
    name="SA x0 social norm",
    units="Dmnl",
    subscripts=["PrimaryEdButOldest"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_x0_social_norm():
    """
    20-24: .35 40-44 : .5
    """
    value = xr.DataArray(
        np.nan,
        {"PrimaryEdButOldest": _subscript_dict["PrimaryEdButOldest"]},
        ["PrimaryEdButOldest"],
    )
    value.loc[['"10-14"']] = 0.6
    value.loc[['"20-24"']] = 0.45
    value.loc[['"40-44"']] = 0.55
    value.loc[['"80-84"']] = 0.7
    return value


@component.add(
    name="Meat diet composition multipliers",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "diet_composition_switch": 4,
        "reference_meat_diet_decomposition_multiplier": 1,
        "meat_diet_composition_multiplier_sc4": 1,
        "meat_diet_composition_multiplier_sc2": 1,
    },
)
def meat_diet_composition_multipliers():
    return if_then_else(
        np.logical_or(diet_composition_switch() == 0, diet_composition_switch() == 1),
        lambda: reference_meat_diet_decomposition_multiplier(),
        lambda: if_then_else(
            np.logical_or(
                diet_composition_switch() == 2, diet_composition_switch() == 3
            ),
            lambda: meat_diet_composition_multiplier_sc2(),
            lambda: meat_diet_composition_multiplier_sc4(),
        ),
    )


@component.add(
    name="Vegetarian diet composition multiplier Sc3",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_vegetarian_diet_decomposition_multiplier": 2,
        "vegan_diet_decomposition_multiplier": 1,
        "smooth_diet_switch_fnc": 1,
    },
)
def vegetarian_diet_composition_multiplier_sc3():
    return (
        reference_vegetarian_diet_decomposition_multiplier()
        + smooth_diet_switch_fnc()
        * (
            vegan_diet_decomposition_multiplier()
            - reference_vegetarian_diet_decomposition_multiplier()
        )
    )


@component.add(
    name="Average calorie intake in meat diet",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_total_daily_calorie_intake": 1,
        "meat_diet_composition_multipliers": 1,
    },
)
def average_calorie_intake_in_meat_diet():
    return average_total_daily_calorie_intake() * meat_diet_composition_multipliers()


@component.add(
    name="Average calorie intake in vegetarian diet",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_total_daily_calorie_intake": 1,
        "vegetarian_diet_composition_multipliers": 1,
    },
)
def average_calorie_intake_in_vegetarian_diet():
    return (
        average_total_daily_calorie_intake() * vegetarian_diet_composition_multipliers()
    )


@component.add(
    name="SA L social norm",
    units="Dmnl",
    subscripts=["PrimaryEdButOldest"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_l_social_norm():
    """
    1.7
    """
    value = xr.DataArray(
        np.nan,
        {"PrimaryEdButOldest": _subscript_dict["PrimaryEdButOldest"]},
        ["PrimaryEdButOldest"],
    )
    value.loc[['"10-14"']] = 1.2
    value.loc[['"20-24"']] = 1.5
    value.loc[['"40-44"']] = 1.5
    value.loc[['"80-84"']] = 1.2
    return value


@component.add(
    name="Normal Fraction Intended to Change Diet Variation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_fraction_intended_to_change_diet_variation():
    return 0.04


@component.add(
    name="Smooth Diet Switch Fnc",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def smooth_diet_switch_fnc():
    return np.interp(
        time(),
        [
            2020.0,
            2023.0,
            2026.0,
            2029.0,
            2032.0,
            2035.0,
            2038.0,
            2041.0,
            2044.0,
            2047.0,
            2050.0,
        ],
        [0.0, 0.02, 0.05, 0.15, 0.3, 0.5, 0.7, 0.85, 0.95, 0.98, 1.0],
    )


@component.add(
    name="Annual Caloric Demand",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "diet_composition_switch": 1,
        "annual_caloric_demand_shift": 3,
        "annual_caloric_demand_flex": 1,
        "smooth_diet_switch_fnc": 1,
    },
)
def annual_caloric_demand():
    """
    This variable can be changed according to which diet composition is used.
    """
    return if_then_else(
        diet_composition_switch() == 1,
        lambda: annual_caloric_demand_shift()
        + smooth_diet_switch_fnc()
        * (annual_caloric_demand_flex() - annual_caloric_demand_shift()),
        lambda: annual_caloric_demand_shift(),
    )


@component.add(
    name="Meat diet composition multiplier Sc2",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_meat_diet_decomposition_multiplier": 2,
        "healthy_diet_decomposition_multiplier": 1,
        "smooth_diet_switch_fnc": 1,
    },
)
def meat_diet_composition_multiplier_sc2():
    return reference_meat_diet_decomposition_multiplier() + smooth_diet_switch_fnc() * (
        healthy_diet_decomposition_multiplier()
        - reference_meat_diet_decomposition_multiplier()
    )


@component.add(
    name="SA k risk attitude", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_k_risk_attitude():
    return 0.9


@component.add(
    name="SA k social norm",
    units="Dmnl",
    subscripts=["PrimaryEdButOldest"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_k_social_norm():
    value = xr.DataArray(
        np.nan,
        {"PrimaryEdButOldest": _subscript_dict["PrimaryEdButOldest"]},
        ["PrimaryEdButOldest"],
    )
    value.loc[['"10-14"']] = 5
    value.loc[['"20-24"']] = 8
    value.loc[['"40-44"']] = 8
    value.loc[['"80-84"']] = 5
    return value


@component.add(
    name="SA L risk attitude", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def sa_l_risk_attitude():
    return 2


@component.add(
    name="Vegetarian diet composition multipliers",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "diet_composition_switch": 2,
        "vegetarian_diet_composition_multiplier_sc3": 1,
        "reference_vegetarian_diet_decomposition_multiplier": 1,
    },
)
def vegetarian_diet_composition_multipliers():
    return if_then_else(
        np.logical_or(diet_composition_switch() == 3, diet_composition_switch() == 4),
        lambda: vegetarian_diet_composition_multiplier_sc3(),
        lambda: reference_vegetarian_diet_decomposition_multiplier(),
    )


@component.add(
    name="x0 social norm",
    units="Dmnl",
    subscripts=["Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_x0_social_norm": 4, "time": 4},
)
def x0_social_norm():
    value = xr.DataArray(np.nan, {"Cohorts": _subscript_dict["Cohorts"]}, ["Cohorts"])
    value.loc[_subscript_dict["Childhood"]] = 0.6 + step(
        __data["time"], float(sa_x0_social_norm().loc['"10-14"']) - 0.6, 2020
    )
    value.loc[_subscript_dict["Young"]] = 0.45 + step(
        __data["time"], float(sa_x0_social_norm().loc['"20-24"']) - 0.45, 2020
    )
    value.loc[_subscript_dict["MiddleAged"]] = 0.55 + step(
        __data["time"], float(sa_x0_social_norm().loc['"40-44"']) - 0.55, 2020
    )
    value.loc[_subscript_dict["OldAge"]] = 0.7 + step(
        __data["time"], float(sa_x0_social_norm().loc['"80-84"']) - 0.7, 2020
    )
    return value


@component.add(
    name="SA Climate Risk Perception Delay",
    units="Year",
    subscripts=["Education"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_climate_risk_perception_delay():
    return xr.DataArray(
        [10.0, 8.0, 5.0, 3.0],
        {"Education": _subscript_dict["Education"]},
        ["Education"],
    )


@component.add(
    name="k social norm",
    units="Dmnl",
    subscripts=["Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_k_social_norm": 4, "time": 4},
)
def k_social_norm():
    value = xr.DataArray(np.nan, {"Cohorts": _subscript_dict["Cohorts"]}, ["Cohorts"])
    value.loc[_subscript_dict["Childhood"]] = 5 + step(
        __data["time"], float(sa_k_social_norm().loc['"10-14"']) - 5, 2020
    )
    value.loc[_subscript_dict["Young"]] = 8 + step(
        __data["time"], float(sa_k_social_norm().loc['"20-24"']) - 8, 2020
    )
    value.loc[_subscript_dict["MiddleAged"]] = 8 + step(
        __data["time"], float(sa_k_social_norm().loc['"40-44"']) - 8, 2020
    )
    value.loc[_subscript_dict["OldAge"]] = 5 + step(
        __data["time"], float(sa_k_social_norm().loc['"80-84"']) - 5, 2020
    )
    return value


@component.add(
    name="Meat diet composition multiplier Sc4",
    units="Dmnl",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_meat_diet_decomposition_multiplier": 2,
        "flexitarian_diet_decomposition_multiplier": 1,
        "smooth_diet_switch_fnc": 1,
    },
)
def meat_diet_composition_multiplier_sc4():
    return reference_meat_diet_decomposition_multiplier() + smooth_diet_switch_fnc() * (
        flexitarian_diet_decomposition_multiplier()
        - reference_meat_diet_decomposition_multiplier()
    )


@component.add(
    name="SA Time to forget climate events",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sa_time_to_forget_climate_events():
    """
    The time it takes for a memory to fade from public memory.
    """
    return 2


@component.add(
    name="L social norm",
    units="Dmnl",
    subscripts=["Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_l_social_norm": 4, "time": 4},
)
def l_social_norm():
    value = xr.DataArray(np.nan, {"Cohorts": _subscript_dict["Cohorts"]}, ["Cohorts"])
    value.loc[_subscript_dict["Childhood"]] = 1.2 + step(
        __data["time"], float(sa_l_social_norm().loc['"10-14"']) - 1.2, 2020
    )
    value.loc[_subscript_dict["Young"]] = 1.5 + step(
        __data["time"], float(sa_l_social_norm().loc['"20-24"']) - 1.5, 2020
    )
    value.loc[_subscript_dict["MiddleAged"]] = 1.5 + step(
        __data["time"], float(sa_l_social_norm().loc['"40-44"']) - 1.5, 2020
    )
    value.loc[_subscript_dict["OldAge"]] = 1.2 + step(
        __data["time"], float(sa_l_social_norm().loc['"80-84"']) - 1.2, 2020
    )
    return value


@component.add(
    name="P2O5 demand from agriculture",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_phosphate_consumption_2010": 1,
        "effect_of_income_on_fertilizer_use": 1,
        "effect_of_technology_on_fertilizer_consumption": 1,
        "effect_of_land_availability_on_fertilizer_use": 1,
    },
)
def p2o5_demand_from_agriculture():
    return (
        reference_phosphate_consumption_2010()
        * effect_of_income_on_fertilizer_use()
        * effect_of_technology_on_fertilizer_consumption()
        * effect_of_land_availability_on_fertilizer_use()
    )


@component.add(
    name="Grassland Allocated for Food Production",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"permanent_meadows_and_pastures": 1, "grassland_allocation_demand": 1},
)
def grassland_allocated_for_food_production():
    return float(
        np.minimum(permanent_meadows_and_pastures(), grassland_allocation_demand())
    )


@component.add(
    name="Effect of GWP on Daily Caloric Intake",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_gwp_per_capita": 1,
        "effect_of_gwp_on_calorie_intake_lookup": 1,
    },
)
def effect_of_gwp_on_daily_caloric_intake():
    """
    See FAOSTAT_..DailyCaloriesOverTime.xlsx GWP scenario: [(0,0)-(2.5,1.5)],(0,0.5),(0.25,0.55),(0.5,0.62),(0.75,0.75),(1,1),(1.25,1. 12),(1.5,1.2),(1.75,1.26),(2,1.3),(2.25,1.33),(2.5,1.35) ) BAU Scenario: ([(0,0)-(4,1.5)],(0,0.4),(0.5,0.52),(1,1),(1.5,1.15),(2,1.26),(2.5,1.33),(3 ,1.38),(3.5,1.4),(4,1.42) )
    """
    return effect_of_gwp_on_calorie_intake_lookup(relative_gwp_per_capita())


@component.add(
    name="Grassland allocation fraction",
    units="Dmnl",
    subscripts=["AnimalFood"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "_smooth_grassland_allocation_fraction": 1,
        "_smooth_grassland_allocation_fraction_1": 1,
    },
    other_deps={
        "_smooth_grassland_allocation_fraction": {
            "initial": {"demand_fraction_of_grassland": 1},
            "step": {"demand_fraction_of_grassland": 1},
        },
        "_smooth_grassland_allocation_fraction_1": {
            "initial": {"demand_fraction_of_grassland": 1},
            "step": {"demand_fraction_of_grassland": 1},
        },
    },
)
def grassland_allocation_fraction():
    value = xr.DataArray(
        np.nan, {"AnimalFood": _subscript_dict["AnimalFood"]}, ["AnimalFood"]
    )
    value.loc[["PasMeat"]] = _smooth_grassland_allocation_fraction().values
    value.loc[["Dairy"]] = _smooth_grassland_allocation_fraction_1().values
    return value


_smooth_grassland_allocation_fraction = Smooth(
    lambda: xr.DataArray(
        float(demand_fraction_of_grassland().loc["PasMeat"]),
        {"AnimalFood": ["PasMeat"]},
        ["AnimalFood"],
    ),
    lambda: xr.DataArray(5, {"AnimalFood": ["PasMeat"]}, ["AnimalFood"]),
    lambda: xr.DataArray(
        float(demand_fraction_of_grassland().loc["PasMeat"]),
        {"AnimalFood": ["PasMeat"]},
        ["AnimalFood"],
    ),
    lambda: 1,
    "_smooth_grassland_allocation_fraction",
)

_smooth_grassland_allocation_fraction_1 = Smooth(
    lambda: xr.DataArray(
        float(demand_fraction_of_grassland().loc["Dairy"]),
        {"AnimalFood": ["Dairy"]},
        ["AnimalFood"],
    ),
    lambda: xr.DataArray(5, {"AnimalFood": ["Dairy"]}, ["AnimalFood"]),
    lambda: xr.DataArray(
        float(demand_fraction_of_grassland().loc["Dairy"]),
        {"AnimalFood": ["Dairy"]},
        ["AnimalFood"],
    ),
    lambda: 1,
    "_smooth_grassland_allocation_fraction_1",
)


@component.add(
    name="Total area harvested",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area_harvested": 1},
)
def total_area_harvested():
    return sum(area_harvested().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"])


@component.add(
    name="Area harvested",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "arable_land_allocated_for_crops": 1,
        "arable_land_allocation_fraction": 1,
    },
)
def area_harvested():
    return arable_land_allocated_for_crops() * arable_land_allocation_fraction()


@component.add(
    name="Indicative fraction intended to change diet",
    units="1/Year",
    subscripts=["Cohorts", "Gender", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "self_efficacy_multiplier": 1,
        "subjective_norm_multiplier_for_diet_change": 1,
        "attitude_multiplier_for_diet_change": 1,
        "normal_fraction_intended_to_change_diet_stepped": 1,
    },
)
def indicative_fraction_intended_to_change_diet():
    return (
        self_efficacy_multiplier()
        * subjective_norm_multiplier_for_diet_change()
        * attitude_multiplier_for_diet_change()
        * normal_fraction_intended_to_change_diet_stepped()
    ).transpose("Cohorts", "Gender", "Education")


@component.add(
    name="N application per ha",
    units="Ton/(Year*ha)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_n_application_for_each_category": 2,
        "delayed_area_harvested": 1,
        "grassland_allocated_for_food_production": 1,
    },
)
def n_application_per_ha():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        commercial_n_application_for_each_category()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / delayed_area_harvested()
    ).values
    value.loc[["PasMeat"]] = (
        float(commercial_n_application_for_each_category().loc["PasMeat"])
        / grassland_allocated_for_food_production()
    )
    return value


@component.add(
    name="Initial Area harvested",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_initial_area_harvested": 1},
    other_deps={
        "_initial_initial_area_harvested": {
            "initial": {"area_harvested": 1},
            "step": {},
        }
    },
)
def initial_area_harvested():
    return _initial_initial_area_harvested()


_initial_initial_area_harvested = Initial(
    lambda: area_harvested(), "_initial_initial_area_harvested"
)


@component.add(
    name="Feed demand in tonnes",
    units="Ton/Year",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "food_demand_in_tonnes": 1,
        "feed_share_of_crop_types": 1,
        "unit_feed_used_for_meat_production": 1,
    },
)
def feed_demand_in_tonnes():
    """
    The amount of PlantFood required for crop-based meat production
    """
    return (
        float(food_demand_in_tonnes().loc["CropMeat"])
        * feed_share_of_crop_types()
        * unit_feed_used_for_meat_production()
    )


@component.add(
    name="n per ha",
    units="Ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_n_application_for_agriculture": 1,
        "total_area_harvested": 1,
    },
)
def n_per_ha():
    return commercial_n_application_for_agriculture() / total_area_harvested()


@component.add(
    name="Average Kcal Intake per Person SHIFT",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "annual_caloric_demand_shift": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def average_kcal_intake_per_person_shift():
    return annual_caloric_demand_shift() / (
        population() * days_in_year() * kcal_to_mkcal()
    )


@component.add(
    name="Annual Caloric Demand FLEX",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_kcal_intake_per_person_flex": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def annual_caloric_demand_flex():
    return (
        average_kcal_intake_per_person_flex()
        * population()
        * kcal_to_mkcal()
        * days_in_year()
    )


@component.add(
    name="Annual Caloric Demand inc Waste",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand": 1, "waste_fraction": 1},
)
def annual_caloric_demand_inc_waste():
    """
    Total Annual Calorie Demand for Food Category[FoodCategories]/(1-Waste fraction[FoodCategories])
    """
    return annual_caloric_demand() / (1 - waste_fraction())


@component.add(
    name="Annual Caloric Demand WRI",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_kcal_intake_per_person_wri": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def annual_caloric_demand_wri():
    return (
        average_kcal_intake_per_person_wri()
        * population()
        * kcal_to_mkcal()
        * days_in_year()
    )


@component.add(
    name="Global Total Calorie Demand WRI",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand_wri": 1},
)
def global_total_calorie_demand_wri():
    return sum(
        annual_caloric_demand_wri().rename({"FoodCategories": "FoodCategories!"}),
        dim=["FoodCategories!"],
    )


@component.add(
    name="Delayed area harvested",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_delayed_area_harvested": 1},
    other_deps={
        "_delayfixed_delayed_area_harvested": {
            "initial": {"initial_area_harvested": 1},
            "step": {"area_harvested": 1},
        }
    },
)
def delayed_area_harvested():
    return _delayfixed_delayed_area_harvested()


_delayfixed_delayed_area_harvested = DelayFixed(
    lambda: area_harvested(),
    lambda: 1,
    lambda: initial_area_harvested(),
    time_step,
    "_delayfixed_delayed_area_harvested",
)


@component.add(
    name="Average Kcal Intake per Person WRI",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_total_daily_calorie_intake": 1,
        "global_average_diet_composition_wri": 1,
    },
)
def average_kcal_intake_per_person_wri():
    return (
        average_total_daily_calorie_intake()
        * global_average_diet_composition_wri()
        / 100
    )


@component.add(
    name="Arable land allocation fraction",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_arable_land_allocation_fraction": 1},
    other_deps={
        "_smooth_arable_land_allocation_fraction": {
            "initial": {"demand_fraction_of_food_and_feed_crops": 1},
            "step": {"demand_fraction_of_food_and_feed_crops": 1},
        }
    },
)
def arable_land_allocation_fraction():
    return _smooth_arable_land_allocation_fraction()


_smooth_arable_land_allocation_fraction = Smooth(
    lambda: demand_fraction_of_food_and_feed_crops(),
    lambda: xr.DataArray(5, {"PlantFood": _subscript_dict["PlantFood"]}, ["PlantFood"]),
    lambda: demand_fraction_of_food_and_feed_crops(),
    lambda: 1,
    "_smooth_arable_land_allocation_fraction",
)


@component.add(
    name="Unit feed used for meat production",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def unit_feed_used_for_meat_production():
    return np.interp(
        time(),
        [
            1961.0,
            1965.0,
            1975.0,
            1979.0,
            1984.0,
            1988.0,
            1995.0,
            2000.0,
            2006.0,
            2010.0,
            2015.0,
        ],
        [12.7, 12.41, 11.49, 10.84, 9.76, 8.19, 6.68, 6.2, 5.61, 5.09, 5.0],
    )


@component.add(
    name="Global Average Diet Composition WRI",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def global_average_diet_composition_wri():
    """
    Wordl reference: m4 Flexitarian : y4
    """
    return xr.DataArray(
        [1.8, 5.7, 6.8, 1.2, 2.3, 48.0, 8.2, 26.0],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Grassland allocation demand",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_grassland_allocation_demand": 1},
    other_deps={
        "_smooth_grassland_allocation_demand": {
            "initial": {"total_grassland_needed": 1},
            "step": {"total_grassland_needed": 1},
        }
    },
)
def grassland_allocation_demand():
    return _smooth_grassland_allocation_demand()


_smooth_grassland_allocation_demand = Smooth(
    lambda: total_grassland_needed(),
    lambda: 5,
    lambda: total_grassland_needed(),
    lambda: 1,
    "_smooth_grassland_allocation_demand",
)


@component.add(
    name="Global Total Calorie Demand FLEX",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand_flex": 1},
)
def global_total_calorie_demand_flex():
    return sum(
        annual_caloric_demand_flex().rename({"FoodCategories": "FoodCategories!"}),
        dim=["FoodCategories!"],
    )


@component.add(
    name="Average Kcal Intake per Person FLEX",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_total_daily_calorie_intake": 1,
        "global_average_diet_composition_flex": 1,
    },
)
def average_kcal_intake_per_person_flex():
    return (
        average_total_daily_calorie_intake()
        * global_average_diet_composition_flex()
        / 100
    )


@component.add(
    name="Shift fraction of meat eaters to vegetarianism",
    units="1/Year",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_shift_fraction_from_meat_to_vegetarianism": 1,
        "fraction_intended_to_change_diet": 1,
        "response_efficacy_multiplier": 1,
        "self_efficacy_multiplier": 1,
    },
)
def shift_fraction_of_meat_eaters_to_vegetarianism():
    """
    *Personal willingness multiplier for diet shift[Gender,Cohorts,Education]*Social impact multiplier for diet shift[Gender,Cohorts,Education]
    """
    return (
        normal_shift_fraction_from_meat_to_vegetarianism()
        + fraction_intended_to_change_diet()
        * response_efficacy_multiplier()
        * self_efficacy_multiplier()
    ).transpose("Gender", "Cohorts", "Education")


@component.add(
    name="Global Average Diet Composition FLEX",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def global_average_diet_composition_flex():
    """
    Wordl reference: m4 Flexitarian : y4
    """
    return xr.DataArray(
        [0.45, 2.52, 7.98, 0.76, 7.06, 29.988, 12.062, 38.43],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Total C emissions from the agriculture",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_co2_emissions_from_agriculture": 1, "co2_to_c": 1},
)
def total_c_emissions_from_the_agriculture():
    return total_co2_emissions_from_agriculture() / co2_to_c()


@component.add(
    name="CO2 to C", units="TonCO2/TonC", comp_type="Constant", comp_subtype="Normal"
)
def co2_to_c():
    return 3.664


@component.add(
    name="CO2 emission rate of the agriculture sector",
    units="TonCO2/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "food_production_rate": 1,
        "unit_co2_emissions_from_food_production": 1,
    },
)
def co2_emission_rate_of_the_agriculture_sector():
    return food_production_rate() * unit_co2_emissions_from_food_production()


@component.add(
    name="Unit CO2 emissions from food production",
    units="TonC/Ton",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_co2_emissions_from_food_production():
    return xr.DataArray(
        [32.58, 1.32, 1.22, 1.58, 0.23, 0.47, 0.07, 0.3],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Total Agricultural Land Demand",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cropland_needed": 1, "total_grassland_needed": 1},
)
def total_agricultural_land_demand():
    return cropland_needed() + total_grassland_needed()


@component.add(
    name="Production rate of crops",
    units="Ton/Year",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "desired_crop_production": 1,
        "crop_yield_for_each_category": 1,
        "area_harvested": 1,
    },
)
def production_rate_of_crops():
    return np.minimum(
        desired_crop_production(), area_harvested() * crop_yield_for_each_category()
    )


@component.add(
    name="Commercial N application for agriculture",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_nitrogen_consumption_2010": 1,
        "effect_of_income_on_fertilizer_use": 1,
        "effect_of_technology_on_fertilizer_consumption": 1,
        "effect_of_land_availability_on_fertilizer_use": 1,
    },
)
def commercial_n_application_for_agriculture():
    """
    Application of N fertilizers, aligning with the "agricultural use" of "total nutrient nitrogen" in the FAO database.
    """
    return (
        reference_nitrogen_consumption_2010()
        * effect_of_income_on_fertilizer_use()
        * effect_of_technology_on_fertilizer_consumption()
        * effect_of_land_availability_on_fertilizer_use()
    )


@component.add(
    name="Average expected crop yield",
    units="Ton/(Year*ha)",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"reference_crop_yield_2016": 1, "effect_of_fertilizer_on_yield": 1},
)
def average_expected_crop_yield():
    return reference_crop_yield_2016().loc[_subscript_dict["PlantFood"]].rename(
        {"FoodCategories": "PlantFood"}
    ) * effect_of_fertilizer_on_yield().loc[_subscript_dict["PlantFood"]].rename(
        {"FoodCategories": "PlantFood"}
    )


@component.add(
    name="Trend of Land Demand",
    units="1/Year",
    comp_type="Stateful",
    comp_subtype="Trend",
    depends_on={"_trend_trend_of_land_demand": 1},
    other_deps={
        "_trend_trend_of_land_demand": {
            "initial": {
                "initial_trend": 1,
                "total_agricultural_land_demand": 1,
                "trend_averaging_time": 1,
            },
            "step": {"total_agricultural_land_demand": 1, "trend_averaging_time": 1},
        }
    },
)
def trend_of_land_demand():
    return _trend_trend_of_land_demand()


_trend_trend_of_land_demand = Trend(
    lambda: total_agricultural_land_demand(),
    lambda: trend_averaging_time(),
    lambda: initial_trend(),
    "_trend_trend_of_land_demand",
)


@component.add(
    name="Initial Trend", units="1/Year", comp_type="Constant", comp_subtype="Normal"
)
def initial_trend():
    return 0.01


@component.add(
    name="Grassland Milk Yield",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_meat_yield": 1, "meat_to_milk_multiplier": 1},
)
def grassland_milk_yield():
    return grassland_meat_yield() * meat_to_milk_multiplier()


@component.add(
    name="Daily caloric supply per capita",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "food_supply_in_kcal": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def daily_caloric_supply_per_capita():
    return food_supply_in_kcal() / (population() * days_in_year() * kcal_to_mkcal())


@component.add(
    name="Food supply in kcal",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"caloric_value_of_food": 1, "food_supply_in_tonnes": 1},
)
def food_supply_in_kcal():
    return caloric_value_of_food() * food_supply_in_tonnes()


@component.add(
    name="Effect of Temp on C Flux Atm ML",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sensitivity_of_c_flux_to_temp": 1,
        "temperature_change_from_preindustrial": 1,
    },
)
def effect_of_temp_on_c_flux_atm_ml():
    return 1 - sensitivity_of_c_flux_to_temp() * temperature_change_from_preindustrial()


@component.add(
    name="Equilibrium C per meter in Mixed Layer",
    units="TonC/Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"equil_c_in_mixed_layer": 1, "mixed_layer_depth": 1},
)
def equilibrium_c_per_meter_in_mixed_layer():
    return equil_c_in_mixed_layer() / mixed_layer_depth()


@component.add(
    name="Sensitivity of C flux to temp",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_c_flux_to_temp():
    return 0.003


@component.add(
    name="Init C in Deep Ocean per meter",
    units="TonC/Meter",
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_init_c_in_deep_ocean_per_meter": 1},
    other_deps={
        "_initial_init_c_in_deep_ocean_per_meter": {
            "initial": {"equilibrium_c_per_meter_in_mixed_layer": 1},
            "step": {},
        }
    },
)
def init_c_in_deep_ocean_per_meter():
    return _initial_init_c_in_deep_ocean_per_meter()


_initial_init_c_in_deep_ocean_per_meter = Initial(
    lambda: equilibrium_c_per_meter_in_mixed_layer(),
    "_initial_init_c_in_deep_ocean_per_meter",
)


@component.add(
    name="Cropland Needed",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "arable_land_needed": 1,
        "permanent_crops": 1,
        "arable_land_needed_for_energy_crops": 1,
    },
)
def cropland_needed():
    """
    Land area required for food crops production due to food demand.
    """
    return (
        sum(
            arable_land_needed().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"]
        )
        + permanent_crops()
        + arable_land_needed_for_energy_crops()
    )


@component.add(
    name="N ratio applied to reference",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_application_per_ha": 2, "reference_n_uptake_per_ha": 2},
)
def n_ratio_applied_to_reference():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        n_application_per_ha()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / reference_n_uptake_per_ha()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = float(n_application_per_ha().loc["PasMeat"]) / float(
        reference_n_uptake_per_ha().loc["PasMeat"]
    )
    return value


@component.add(
    name="P ratio applied to reference",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_application_per_ha": 2, "reference_p_uptake_rate_per_ha": 2},
)
def p_ratio_applied_to_reference():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        p_application_per_ha()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / reference_p_uptake_rate_per_ha()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = float(p_application_per_ha().loc["PasMeat"]) / float(
        reference_p_uptake_rate_per_ha().loc["PasMeat"]
    )
    return value


@component.add(
    name="Reference N uptake per ha",
    units="Ton/(Year*ha)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_crop_yield_2016": 1,
        "average_n_content": 2,
        "reference_meat_yield": 1,
    },
)
def reference_n_uptake_per_ha():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        reference_crop_yield_2016()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * average_n_content()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = (
        float(average_n_content().loc["PasMeat"]) * reference_meat_yield()
    )
    return value


@component.add(
    name="P Uptake for each crop type",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_p_content": 2, "food_production_rate": 2},
)
def p_uptake_for_each_crop_type():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        average_p_content()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * food_production_rate()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = float(average_p_content().loc["PasMeat"]) * float(
        food_production_rate().loc["PasMeat"]
    )
    return value


@component.add(
    name="Reference P uptake rate per ha",
    units="Ton/(Year*ha)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_crop_yield_2016": 1,
        "average_p_content": 2,
        "reference_meat_yield": 1,
    },
)
def reference_p_uptake_rate_per_ha():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        reference_crop_yield_2016()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * average_p_content()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = reference_meat_yield() * float(
        average_p_content().loc["PasMeat"]
    )
    return value


@component.add(
    name="P application per ha",
    units="Ton/(Year*ha)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_p_application_for_each_category": 2,
        "area_harvested": 1,
        "grassland_allocated_for_food_production": 1,
    },
)
def p_application_per_ha():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        commercial_p_application_for_each_category()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / area_harvested()
    ).values
    value.loc[["PasMeat"]] = (
        float(commercial_p_application_for_each_category().loc["PasMeat"])
        / grassland_allocated_for_food_production()
    )
    return value


@component.add(
    name="Total N uptake rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"n_uptake_for_crop_type": 2, "nitrogen": 1, "time_step": 1},
)
def total_n_uptake_rate():
    return float(
        np.minimum(
            sum(
                n_uptake_for_crop_type()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood!"}),
                dim=["PlantFood!"],
            )
            + float(n_uptake_for_crop_type().loc["PasMeat"]),
            nitrogen() / time_step(),
        )
    )


@component.add(
    name="Intended Conversion Forest to Agriculture",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "desired_agricultural_land_conversion": 1,
        "fraction_of_agricultural_land_conversion_from_forest": 1,
    },
)
def intended_conversion_forest_to_agriculture():
    return (
        desired_agricultural_land_conversion()
        * fraction_of_agricultural_land_conversion_from_forest()
    )


@component.add(
    name="Intended Conversion Other to Agriculture",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "desired_agricultural_land_conversion": 1,
        "fraction_of_agricultural_land_conversion_from_forest": 1,
    },
)
def intended_conversion_other_to_agriculture():
    return desired_agricultural_land_conversion() * (
        1 - fraction_of_agricultural_land_conversion_from_forest()
    )


@component.add(
    name="Total P uptake rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_uptake_for_each_crop_type": 2, "phosphorus": 1, "time_step": 1},
)
def total_p_uptake_rate():
    return float(
        np.minimum(
            sum(
                p_uptake_for_each_crop_type()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood!"}),
                dim=["PlantFood!"],
            )
            + float(p_uptake_for_each_crop_type().loc["PasMeat"]),
            phosphorus() / time_step(),
        )
    )


@component.add(
    name="Effect of N on Yield 2",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_fertilizer": 2,
        "x0_fertilizer": 2,
        "k_fertilizer": 2,
        "n_ratio_applied_to_reference": 2,
    },
)
def effect_of_n_on_yield_2():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        l_fertilizer()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / (
            1
            + np.exp(
                -k_fertilizer()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood"})
                * (
                    n_ratio_applied_to_reference()
                    .loc[_subscript_dict["PlantFood"]]
                    .rename({"FoodCategories": "PlantFood"})
                    - x0_fertilizer()
                    .loc[_subscript_dict["PlantFood"]]
                    .rename({"FoodCategories": "PlantFood"})
                )
            )
        )
    ).values
    value.loc[["PasMeat"]] = float(l_fertilizer().loc["PasMeat"]) / (
        1
        + float(
            np.exp(
                -float(k_fertilizer().loc["PasMeat"])
                * (
                    float(n_ratio_applied_to_reference().loc["PasMeat"])
                    - float(x0_fertilizer().loc["PasMeat"])
                )
            )
        )
    )
    return value


@component.add(
    name="Effect of P on Yield 2",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_fertilizer": 2,
        "x0_fertilizer": 2,
        "k_fertilizer": 2,
        "p_ratio_applied_to_reference": 2,
    },
)
def effect_of_p_on_yield_2():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        l_fertilizer()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / (
            1
            + np.exp(
                -k_fertilizer()
                .loc[_subscript_dict["PlantFood"]]
                .rename({"FoodCategories": "PlantFood"})
                * (
                    p_ratio_applied_to_reference()
                    .loc[_subscript_dict["PlantFood"]]
                    .rename({"FoodCategories": "PlantFood"})
                    - x0_fertilizer()
                    .loc[_subscript_dict["PlantFood"]]
                    .rename({"FoodCategories": "PlantFood"})
                )
            )
        )
    ).values
    value.loc[["PasMeat"]] = float(l_fertilizer().loc["PasMeat"]) / (
        1
        + float(
            np.exp(
                -float(k_fertilizer().loc["PasMeat"])
                * (
                    float(p_ratio_applied_to_reference().loc["PasMeat"])
                    - float(x0_fertilizer().loc["PasMeat"])
                )
            )
        )
    )
    return value


@component.add(
    name="Other crops supply in Mkcal",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def other_crops_supply_in_mkcal():
    return np.interp(
        time(),
        [
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
        ],
        [
            3.51924e08,
            3.72430e08,
            3.81990e08,
            4.01483e08,
            4.18100e08,
            4.35388e08,
            4.49529e08,
            4.61531e08,
            4.79091e08,
            5.03815e08,
            5.18190e08,
            5.27180e08,
            5.46183e08,
            5.58201e08,
            5.62792e08,
            5.88330e08,
            6.09745e08,
            6.39437e08,
            6.61950e08,
            6.83474e08,
            7.03933e08,
            7.29974e08,
            7.36189e08,
            7.65215e08,
            7.88066e08,
            8.13465e08,
            8.48841e08,
            8.75718e08,
            8.93310e08,
            9.14523e08,
            9.15743e08,
            9.28207e08,
            9.38241e08,
            9.66534e08,
            9.95063e08,
            1.02382e09,
            1.05926e09,
            1.07329e09,
            1.07620e09,
            1.11249e09,
            1.13804e09,
            1.16394e09,
            1.19023e09,
            1.21458e09,
            1.24409e09,
            1.27171e09,
            1.30225e09,
            1.32835e09,
            1.34729e09,
            1.36892e09,
            1.40103e09,
            1.42838e09,
            1.42318e09,
        ],
    )


@component.add(
    name="Effect of fertilizer on yield",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effect_of_n_on_yield_2": 2, "effect_of_p_on_yield_2": 2},
)
def effect_of_fertilizer_on_yield():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = np.minimum(
        effect_of_n_on_yield_2()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"}),
        effect_of_p_on_yield_2()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"}),
    ).values
    value.loc[["PasMeat"]] = float(
        np.minimum(
            float(effect_of_n_on_yield_2().loc["PasMeat"]),
            float(effect_of_p_on_yield_2().loc["PasMeat"]),
        )
    )
    return value


@component.add(
    name="Other crops tonnes",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_crops_supply_in_mkcal": 1, "caloric_value_of_food": 1},
)
def other_crops_tonnes():
    return other_crops_supply_in_mkcal() / float(
        caloric_value_of_food().loc["OtherCrops"]
    )


@component.add(
    name="Food shortage in kcal",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand_inc_waste": 1, "food_supply_in_kcal": 1},
)
def food_shortage_in_kcal():
    return annual_caloric_demand_inc_waste() - food_supply_in_kcal()


@component.add(
    name="N Uptake for crop type",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_n_content": 2, "food_production_rate": 2},
)
def n_uptake_for_crop_type():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        average_n_content()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * food_production_rate()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
    ).values
    value.loc[["PasMeat"]] = float(food_production_rate().loc["PasMeat"]) * float(
        average_n_content().loc["PasMeat"]
    )
    return value


@component.add(
    name="Arable Land Allocated for Crops",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"arable_land": 1, "total_demand_for_arable_land": 1},
)
def arable_land_allocated_for_crops():
    return float(np.minimum(arable_land(), total_demand_for_arable_land()))


@component.add(
    name="Total food shortage in kcal",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_shortage_in_kcal": 1},
)
def total_food_shortage_in_kcal():
    return sum(
        food_shortage_in_kcal().rename({"FoodCategories": "FoodCategories!"}),
        dim=["FoodCategories!"],
    )


@component.add(
    name="Food shortage in tonnes",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_demand_in_tonnes": 1, "food_supply_in_tonnes": 1},
)
def food_shortage_in_tonnes():
    return food_demand_in_tonnes() - food_supply_in_tonnes()


@component.add(
    name="Feed Availability",
    units="Ton/Year",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"production_rate_of_crops": 1, "feed_fraction_in_demand": 1},
)
def feed_availability():
    return production_rate_of_crops() * feed_fraction_in_demand()


@component.add(
    name="Feed fraction in demand",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"feed_demand_in_tonnes": 1, "desired_crop_production": 1},
)
def feed_fraction_in_demand():
    return feed_demand_in_tonnes() / desired_crop_production()


@component.add(
    name="Food supply in tonnes",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_production_rate": 2, "food_fraction_in_demand": 1},
)
def food_supply_in_tonnes():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = (
        food_production_rate()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * food_fraction_in_demand()
    ).values
    value.loc[_subscript_dict["AnimalFood"]] = (
        food_production_rate()
        .loc[_subscript_dict["AnimalFood"]]
        .rename({"FoodCategories": "AnimalFood"})
        .values
    )
    return value


@component.add(
    name="Total Supply of Animal Calories",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_supply_in_kcal": 1},
)
def total_supply_of_animal_calories():
    return sum(
        food_supply_in_kcal()
        .loc[_subscript_dict["AnimalFood"]]
        .rename({"FoodCategories": "AnimalFood!"}),
        dim=["AnimalFood!"],
    )


@component.add(
    name="Total Supply of Vegetal Calories",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_supply_in_kcal": 1},
)
def total_supply_of_vegetal_calories():
    return sum(
        food_supply_in_kcal()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood!"}),
        dim=["PlantFood!"],
    )


@component.add(
    name="Food fraction in demand",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_demand_in_tonnes": 1, "desired_crop_production": 1},
)
def food_fraction_in_demand():
    return (
        food_demand_in_tonnes()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        / desired_crop_production()
    )


@component.add(
    name="Meat to Milk Multiplier",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def meat_to_milk_multiplier():
    """
    Tonnes of milk / tonnes of bovine meat. For now, based globiom 2000 value
    """
    return 30


@component.add(
    name="Initial Grassland Milk Yield",
    units="Ton/(Year*ha)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_grassland_milk_yield():
    """
    0.2288
    """
    return 0.45


@component.add(
    name="Food production rate",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"production_rate_of_crops": 1, "production_rate_of_animal_food": 1},
)
def food_production_rate():
    value = xr.DataArray(
        np.nan,
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )
    value.loc[_subscript_dict["PlantFood"]] = production_rate_of_crops().values
    value.loc[_subscript_dict["AnimalFood"]] = production_rate_of_animal_food().values
    return value


@component.add(
    name="Total Grassland Needed",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_needed": 2},
)
def total_grassland_needed():
    return float(grassland_needed().loc["PasMeat"]) + float(
        grassland_needed().loc["Dairy"]
    )


@component.add(
    name="Land Allocated for Animal Calories",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_allocated_for_food_production": 1},
)
def land_allocated_for_animal_calories():
    """
    Calculated historical data and projection for land for animal food according to FAO. Source of historical data: http://faostat.fao.org
    """
    return grassland_allocated_for_food_production()


@component.add(
    name="Demand fraction of Grassland",
    units="Dmnl",
    subscripts=["AnimalFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"grassland_needed": 2, "total_grassland_needed": 2},
)
def demand_fraction_of_grassland():
    value = xr.DataArray(
        np.nan, {"AnimalFood": _subscript_dict["AnimalFood"]}, ["AnimalFood"]
    )
    value.loc[["PasMeat"]] = (
        float(grassland_needed().loc["PasMeat"]) / total_grassland_needed()
    )
    value.loc[["Dairy"]] = (
        float(grassland_needed().loc["Dairy"]) / total_grassland_needed()
    )
    return value


@component.add(
    name="Arable Land Needed",
    units="ha",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_crop_production": 1, "expected_crop_yield": 1},
)
def arable_land_needed():
    return desired_crop_production() / expected_crop_yield()


@component.add(
    name="Desired crop production",
    units="Ton/Year",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "food_demand_in_tonnes": 1,
        "feed_demand_in_tonnes": 1,
        "crop_demand_for_other_uses": 1,
    },
)
def desired_crop_production():
    return (
        food_demand_in_tonnes()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        + feed_demand_in_tonnes()
        + crop_demand_for_other_uses()
    )


@component.add(
    name="Feed per meat DATA",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def feed_per_meat_data():
    """
    The amount (in tonnes) of feed for each crop type required to produce 1 ton of crop-based meat. Estimated based on the FAO data for Feed and Meat production, the data for 1961-1985. See FoodBalanceSheets.xlsx
    """
    return np.interp(
        time(),
        [
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
        ],
        [
            12.7,
            12.78,
            12.5,
            12.79,
            12.41,
            12.59,
            12.34,
            13.04,
            13.19,
            12.89,
            12.19,
            12.01,
            12.36,
            11.37,
            11.49,
            11.78,
            11.66,
            11.63,
            10.84,
            10.0,
            9.84,
            9.98,
            9.48,
            9.76,
            9.42,
            9.34,
            9.01,
            8.19,
            8.23,
            8.09,
            7.66,
            7.56,
            7.35,
            7.07,
            6.68,
            6.91,
            6.6,
            6.25,
            6.15,
            6.2,
            6.24,
            5.99,
            5.84,
            6.1,
            5.85,
            5.61,
            5.49,
            5.55,
            5.22,
            5.09,
            5.35,
            5.1,
            5.39,
        ],
    )


@component.add(
    name="Crop demand for other uses",
    units="Ton/Year",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"food_demand_in_tonnes": 1, "other_uses_multiplier_for_food": 1},
)
def crop_demand_for_other_uses():
    return (
        food_demand_in_tonnes()
        .loc[_subscript_dict["PlantFood"]]
        .rename({"FoodCategories": "PlantFood"})
        * other_uses_multiplier_for_food()
    )


@component.add(
    name="Other uses multiplier for food",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_uses_multiplier_for_food():
    """
    This parameter indicates how much of produced crop is used for puposes other than food and feed (seed, loss, other uses) with respect to FOOD. It is estimated based on the FAO food balance sheets, the data for 1961-1985. See FoodBalanceSheets.xlsx/AvgPercentages
    """
    return xr.DataArray(
        [0.19, 0.24, 0.16, 0.08],
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    )


@component.add(
    name="Meat to Eggs Multiplier",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def meat_to_eggs_multiplier():
    """
    Calibrated. Within the range of historical values, close to the histprical average.
    """
    return 0.29


@component.add(
    name="INIT Crop Yield",
    units="Ton/(Year*ha)",
    subscripts=["PlantFood"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_crop_yield():
    return xr.DataArray(
        [0.34, 0.97, 4.89, 2.99],
        {"PlantFood": _subscript_dict["PlantFood"]},
        ["PlantFood"],
    )


@component.add(
    name="Initial Grassland Meat Yield",
    units="Mkcal/(Year*ha)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_grassland_meat_yield():
    """
    0.007
    """
    return 0.015


@component.add(
    name="Commercial P application for agriculture",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_p2o5_application_for_agriculture": 1,
        "p2o5_to_p_conversion_factor": 1,
    },
)
def commercial_p_application_for_agriculture():
    """
    The amount of elemental P in the applied P2O5 fertilizers
    """
    return commercial_p2o5_application_for_agriculture() * p2o5_to_p_conversion_factor()


@component.add(
    name="Annual Caloric Demand FAO",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_kcal_intake_per_person_fao": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def annual_caloric_demand_fao():
    return (
        average_kcal_intake_per_person_fao()
        * population()
        * kcal_to_mkcal()
        * days_in_year()
    )


@component.add(
    name="Global Total Calorie Demand FAO",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand_fao": 1},
)
def global_total_calorie_demand_fao():
    return sum(
        annual_caloric_demand_fao().rename({"FoodCategories": "FoodCategories!"}),
        dim=["FoodCategories!"],
    )


@component.add(
    name="Average Kcal Intake per Person FAO",
    units="kcal/(Person*Day)",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_total_daily_calorie_intake": 1,
        "global_average_diet_composition_fao": 1,
    },
)
def average_kcal_intake_per_person_fao():
    return (
        average_total_daily_calorie_intake()
        * global_average_diet_composition_fao()
        / 100
    )


@component.add(
    name="Global Average Diet Composition FAO",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def global_average_diet_composition_fao():
    """
    Wordl reference: m4 Flexitarian : y4
    """
    return xr.DataArray(
        [1.77, 7.54, 6.92, 1.25, 2.36, 46.11, 12.77, 20.4],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Food demand in tonnes",
    units="Ton/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand_inc_waste": 1, "caloric_value_of_food": 1},
)
def food_demand_in_tonnes():
    return annual_caloric_demand_inc_waste() / caloric_value_of_food()


@component.add(
    name="Total Fertilizer Runoff and Leaching",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nitrogen_leaching_and_runoff_rate": 1,
        "phosphorus_erosion_leaching_and_runoff_rate": 1,
    },
)
def total_fertilizer_runoff_and_leaching():
    return (
        nitrogen_leaching_and_runoff_rate()
        + phosphorus_erosion_leaching_and_runoff_rate()
    )


@component.add(
    name="Eff p ON YIELD PREV",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def eff_p_on_yield_prev():
    return np.interp(
        time(),
        [
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.474935,
            0.476662,
            0.463615,
            0.452733,
            0.449628,
            0.448761,
            0.448516,
            0.448441,
            0.448411,
            0.448394,
            0.44838,
            0.448367,
            0.448352,
            0.448336,
            0.448318,
            0.448299,
            0.44828,
            0.448261,
            0.448244,
            0.448229,
            0.448217,
            0.448207,
            0.448202,
            0.4482,
            0.448202,
            0.448208,
            0.448219,
            0.448234,
            0.448253,
            0.448277,
            0.448305,
            0.448348,
            0.448444,
            0.448581,
            0.448745,
            0.448924,
            0.449117,
            0.449323,
            0.449542,
            0.449773,
            0.450019,
            0.450278,
            0.450551,
            0.450839,
            0.451142,
            0.451461,
            0.451796,
            0.452147,
            0.452516,
            0.452904,
            0.453311,
            0.453737,
            0.454184,
            0.454652,
            0.455142,
            0.455655,
            0.456192,
            0.456753,
            0.457339,
            0.457948,
            0.458578,
            0.459232,
            0.459911,
            0.460616,
            0.461347,
            0.462105,
            0.46289,
            0.463702,
            0.464541,
            0.465407,
            0.466298,
            0.46721,
            0.46803,
            0.468745,
            0.469423,
            0.470104,
            0.470799,
            0.471512,
            0.472203,
            0.472882,
            0.473569,
            0.474267,
            0.47498,
            0.475706,
            0.476445,
            0.477197,
            0.477961,
            0.478739,
            0.479529,
            0.480331,
            0.481145,
            0.481972,
            0.482811,
            0.483662,
            0.484526,
            0.485402,
            0.48629,
            0.48719,
            0.488102,
            0.489012,
            0.489916,
            0.490824,
            0.49174,
            0.492666,
            0.493603,
            0.494549,
            0.495506,
            0.496472,
            0.497447,
            0.49843,
            0.499422,
            0.500421,
            0.501426,
            0.502437,
            0.503451,
            0.504469,
            0.505476,
            0.506462,
            0.507436,
            0.508405,
            0.509371,
            0.510333,
            0.511291,
            0.512244,
            0.513189,
            0.514126,
            0.515052,
            0.515966,
            0.516863,
            0.517732,
            0.518573,
            0.519394,
            0.520195,
            0.520979,
            0.521746,
            0.522495,
            0.523225,
            0.523936,
            0.524617,
            0.525248,
            0.525838,
            0.526397,
            0.526931,
            0.52744,
            0.527926,
            0.528391,
            0.528833,
            0.529251,
            0.529638,
            0.529995,
            0.530324,
            0.530626,
            0.530905,
            0.531154,
            0.531354,
            0.531519,
            0.531661,
            0.531787,
            0.531897,
            0.53199,
            0.532064,
            0.532121,
            0.532163,
            0.53219,
            0.532203,
            0.532201,
            0.532184,
            0.532153,
            0.532109,
            0.532051,
            0.531975,
            0.531878,
            0.531761,
            0.531626,
            0.531469,
            0.531286,
            0.531074,
            0.530833,
            0.530565,
            0.530267,
            0.529938,
            0.529578,
            0.529201,
            0.528815,
            0.528424,
            0.528025,
            0.527602,
            0.527148,
            0.526675,
            0.526192,
            0.525696,
            0.525183,
            0.52465,
            0.524102,
            0.523539,
            0.522952,
            0.522331,
            0.521661,
            0.520943,
            0.520181,
            0.519385,
        ],
    )


@component.add(
    name="Eff N on Yield Prev",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def eff_n_on_yield_prev():
    return np.interp(
        time(),
        [
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.442961,
            0.453031,
            0.452814,
            0.452751,
            0.453009,
            0.453098,
            0.453029,
            0.45289,
            0.45273,
            0.452566,
            0.452403,
            0.452239,
            0.452073,
            0.451904,
            0.451733,
            0.451561,
            0.451391,
            0.451227,
            0.451069,
            0.450919,
            0.450779,
            0.450648,
            0.450528,
            0.450419,
            0.450322,
            0.450236,
            0.450162,
            0.4501,
            0.45005,
            0.450011,
            0.449982,
            0.449974,
            0.450089,
            0.450301,
            0.450562,
            0.450854,
            0.451173,
            0.45152,
            0.451894,
            0.452299,
            0.452734,
            0.453202,
            0.453702,
            0.454237,
            0.454807,
            0.455414,
            0.456059,
            0.456745,
            0.457473,
            0.458245,
            0.459062,
            0.459927,
            0.460842,
            0.461806,
            0.462823,
            0.463895,
            0.465023,
            0.466208,
            0.467452,
            0.468756,
            0.47012,
            0.471544,
            0.473026,
            0.474566,
            0.476164,
            0.477821,
            0.479535,
            0.481305,
            0.483129,
            0.485004,
            0.486927,
            0.488895,
            0.490604,
            0.492006,
            0.493359,
            0.494742,
            0.496165,
            0.497627,
            0.499126,
            0.500665,
            0.502242,
            0.503855,
            0.5055,
            0.507174,
            0.508877,
            0.510607,
            0.512364,
            0.514147,
            0.515954,
            0.517786,
            0.519642,
            0.521521,
            0.523423,
            0.525347,
            0.527294,
            0.529262,
            0.531251,
            0.53326,
            0.535286,
            0.537267,
            0.539221,
            0.541183,
            0.543161,
            0.545155,
            0.547165,
            0.549188,
            0.551223,
            0.55327,
            0.555324,
            0.557387,
            0.559454,
            0.561525,
            0.563596,
            0.565663,
            0.567725,
            0.569777,
            0.571756,
            0.573654,
            0.575517,
            0.577359,
            0.579181,
            0.58098,
            0.582752,
            0.584494,
            0.586204,
            0.587877,
            0.589512,
            0.591106,
            0.592637,
            0.594071,
            0.595437,
            0.596752,
            0.59802,
            0.599243,
            0.60042,
            0.601554,
            0.602645,
            0.603696,
            0.60466,
            0.605489,
            0.606246,
            0.606959,
            0.607637,
            0.608281,
            0.608896,
            0.609487,
            0.610055,
            0.610599,
            0.611117,
            0.611609,
            0.612078,
            0.612531,
            0.61297,
            0.613353,
            0.613636,
            0.613879,
            0.614106,
            0.614321,
            0.614522,
            0.614705,
            0.614872,
            0.615019,
            0.615144,
            0.615241,
            0.615303,
            0.615326,
            0.615307,
            0.615243,
            0.615135,
            0.614982,
            0.614778,
            0.614526,
            0.614225,
            0.613877,
            0.613479,
            0.613027,
            0.612519,
            0.611956,
            0.611344,
            0.610679,
            0.609949,
            0.609153,
            0.608304,
            0.607415,
            0.606483,
            0.605507,
            0.604465,
            0.603343,
            0.602163,
            0.600944,
            0.599678,
            0.598355,
            0.596973,
            0.595541,
            0.594062,
            0.592522,
            0.590906,
            0.589189,
            0.587375,
            0.585478,
            0.583512,
        ],
    )


@component.add(
    name="Average N content",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_n_content():
    return xr.DataArray(
        [0.0289, 0.0148, 0.0051, 0.0201, 0.036, 0.0155, 0.0021, 0.0113],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Average P content",
    units="Dmnl",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_p_content():
    return xr.DataArray(
        [0.0016, 0.0009, 0.0009, 0.002, 0.0037, 0.0023, 0.0004, 0.0016],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="P budget",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_p_application_for_agriculture": 1,
        "phosphorus_application_with_manure": 1,
        "phosphorus_erosion_leaching_and_runoff_rate": 1,
        "total_p_uptake_rate": 1,
    },
)
def p_budget():
    return (
        commercial_p_application_for_agriculture()
        + phosphorus_application_with_manure()
        - phosphorus_erosion_leaching_and_runoff_rate()
        - total_p_uptake_rate()
    )


@component.add(
    name="Average Daily Calorie Demand per Capita",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "global_total_calorie_demand_shift": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def average_daily_calorie_demand_per_capita():
    return (
        global_total_calorie_demand_shift()
        / population()
        / kcal_to_mkcal()
        / days_in_year()
    )


@component.add(
    name="P use efficiency",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_p_uptake_rate": 1,
        "commercial_p_application_for_agriculture": 1,
        "phosphorus_application_with_manure": 1,
    },
)
def p_use_efficiency():
    return total_p_uptake_rate() / (
        commercial_p_application_for_agriculture()
        + phosphorus_application_with_manure()
    )


@component.add(
    name="Commercial Phosphorus Application per ha",
    units="Ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "commercial_p2o5_application_for_agriculture": 1,
        "agricultural_land": 1,
    },
)
def commercial_phosphorus_application_per_ha():
    return commercial_p2o5_application_for_agriculture() / agricultural_land()


@component.add(
    name="Annual Caloric Demand SHIFT",
    units="Mkcal/Year",
    subscripts=["FoodCategories"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_kcal_intake_shift": 1},
)
def annual_caloric_demand_shift():
    return sum(
        annual_kcal_intake_shift().rename({"Gender": "Gender!", "Cohorts": "Cohorts!"}),
        dim=["Gender!", "Cohorts!"],
    )


@component.add(
    name="Total Demand for Arable Land",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"arable_land_needed_for_energy_crops": 1, "arable_land_needed": 1},
)
def total_demand_for_arable_land():
    return arable_land_needed_for_energy_crops() + sum(
        arable_land_needed().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"]
    )


@component.add(
    name="Annual Kcal Intake SHIFT",
    units="Mkcal/Year",
    subscripts=["FoodCategories", "Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "days_in_year": 1,
        "kcal_to_mkcal": 1,
        "average_calorie_intake_in_meat_diet": 1,
        "meatbased_diet_followers": 1,
        "average_calorie_intake_in_vegetarian_diet": 1,
        "lactoovo_vegetarian_diet_followers": 1,
    },
)
def annual_kcal_intake_shift():
    return (
        days_in_year()
        * kcal_to_mkcal()
        * (
            average_calorie_intake_in_meat_diet()
            * sum(
                meatbased_diet_followers().rename({"Education": "Education!"}),
                dim=["Education!"],
            )
            + average_calorie_intake_in_vegetarian_diet()
            * sum(
                lactoovo_vegetarian_diet_followers().rename(
                    {"Education": "Education!"}
                ),
                dim=["Education!"],
            )
        )
    )


@component.add(
    name="Land Allocated for Food Crops",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"arable_land_allocated_for_crops": 1, "permanent_crops": 1},
)
def land_allocated_for_food_crops():
    """
    Land area dedicated to crops production decreased by the area dedicated to energy crops production.
    """
    return arable_land_allocated_for_crops() + permanent_crops()


@component.add(
    name="kcal to Mkcal",
    units="Mkcal/kcal",
    comp_type="Constant",
    comp_subtype="Normal",
)
def kcal_to_mkcal():
    return 1e-06


@component.add(
    name="Global Total Calorie Demand SHIFT",
    units="Mkcal/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"annual_caloric_demand_shift": 1},
)
def global_total_calorie_demand_shift():
    return sum(
        annual_caloric_demand_shift().rename({"FoodCategories": "FoodCategories!"}),
        dim=["FoodCategories!"],
    )


@component.add(
    name="Demand Fraction of Food and Feed Crops",
    units="Dmnl",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"arable_land_needed": 1, "total_demand_for_arable_land": 1},
)
def demand_fraction_of_food_and_feed_crops():
    return arable_land_needed() / total_demand_for_arable_land()


@component.add(
    name="Commercial P2O5 application for agriculture",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p2o5_demand_from_agriculture": 1, "p2o5_supply_for_agriculture": 1},
)
def commercial_p2o5_application_for_agriculture():
    return float(
        np.minimum(p2o5_demand_from_agriculture(), p2o5_supply_for_agriculture())
    )


@component.add(
    name="Phosphorus application with manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "recoverable_p_generated_in_pasture_based_manure": 1,
        "recoverable_p_generated_in_crop_based_manure": 1,
    },
)
def phosphorus_application_with_manure():
    return (
        recoverable_p_generated_in_pasture_based_manure()
        + recoverable_p_generated_in_crop_based_manure()
    )


@component.add(
    name="P loss to inputs",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "phosphorus_erosion_leaching_and_runoff_rate": 1,
        "commercial_p_application_for_agriculture": 1,
        "phosphorus_application_with_manure": 1,
    },
)
def p_loss_to_inputs():
    return phosphorus_erosion_leaching_and_runoff_rate() / (
        phosphorus_application_with_manure()
        + commercial_p_application_for_agriculture()
    )


@component.add(
    name="Total P205 demand",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p2o5_demand_from_agriculture": 1, "p2o5_agriculture_fraction": 1},
)
def total_p205_demand():
    return p2o5_demand_from_agriculture() / p2o5_agriculture_fraction()


@component.add(
    name="Phosphorus erosion leaching and runoff rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_leaching_fraction": 1, "phosphorus": 1},
)
def phosphorus_erosion_leaching_and_runoff_rate():
    """
    Agricultural topsoil erosion rate*Agricultural topsoil P concentration
    """
    return p_leaching_fraction() * phosphorus()


@component.add(
    name="Average P demand rate",
    units="Ton/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_average_p_demand_rate": 1},
    other_deps={
        "_smooth_average_p_demand_rate": {
            "initial": {},
            "step": {"desired_phosphate_rock_production_rate": 1},
        }
    },
)
def average_p_demand_rate():
    return _smooth_average_p_demand_rate()


_smooth_average_p_demand_rate = Smooth(
    lambda: desired_phosphate_rock_production_rate(),
    lambda: 5,
    lambda: 30350000.0,
    lambda: 1,
    "_smooth_average_p_demand_rate",
)


@component.add(
    name="Effect of scarcity on P production",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={
        "phosphate_rock_proven_reserves": 1,
        "desired_phosphate_rock_production_rate": 1,
    },
)
def effect_of_scarcity_on_p_production():
    return np.interp(
        phosphate_rock_proven_reserves() / desired_phosphate_rock_production_rate(),
        [0.0, 0.5, 1.0, 1.5, 2.0],
        [0.0, 0.5, 0.9, 0.95, 1.0],
    )


@component.add(
    name="P2O5 content in phosphate rock",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def p2o5_content_in_phosphate_rock():
    """
    This is the average ratio of P205 content in the total global phosphate rock produced between 2011 and 2015. Based on USGS data. See USGS_p_ROCKmyb1-2015-phosp.xlx
    """
    return 0.306


@component.add(
    name="P2O5 supply for agriculture",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p2o5_agriculture_fraction": 1, "p2o5_production_rate": 1},
)
def p2o5_supply_for_agriculture():
    return p2o5_agriculture_fraction() * p2o5_production_rate()


@component.add(
    name="Desired phosphate rock production rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_p205_production_rate": 1, "p2o5_content_in_phosphate_rock": 1},
)
def desired_phosphate_rock_production_rate():
    return desired_p205_production_rate() / p2o5_content_in_phosphate_rock()


@component.add(
    name="P rock production rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "desired_phosphate_rock_production_rate": 1,
        "effect_of_scarcity_on_p_production": 1,
    },
)
def p_rock_production_rate():
    return (
        desired_phosphate_rock_production_rate() * effect_of_scarcity_on_p_production()
    )


@component.add(
    name="P2O5 production rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_rock_production_rate": 1, "p2o5_content_in_phosphate_rock": 1},
)
def p2o5_production_rate():
    """
    P205 content
    """
    return p_rock_production_rate() * p2o5_content_in_phosphate_rock()


@component.add(
    name="MSA change percentage",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "msa2100": 1, "msa_2016": 2},
)
def msa_change_percentage():
    """
    This is the percentage of change in MSA between 2016 and 2100. Therefore, it is zero all other times except 2100.
    """
    return if_then_else(
        time() == 2100, lambda: 100 * (msa2100() - msa_2016()) / msa_2016(), lambda: 0
    )


@component.add(
    name="MSA2100",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mean_species_abundance": 1, "time": 1},
)
def msa2100():
    return 0 + step(__data["time"], mean_species_abundance(), 2100)


@component.add(
    name="P2O5 to P conversion factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def p2o5_to_p_conversion_factor():
    """
    Found on Researchgate. Check with Lei! (https://www.researchgate.net/post/How_to_calculate_phosphorous_from_P2O5_w hich_has_been_recommended_at_the_standard_dose_of_45_kg_ha)
    """
    return 0.4364


@component.add(
    name="MSA 2016",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="SampleIfTrue",
    depends_on={"_sampleiftrue_msa_2016": 1},
    other_deps={
        "_sampleiftrue_msa_2016": {
            "initial": {},
            "step": {"time": 1, "mean_species_abundance": 1},
        }
    },
)
def msa_2016():
    return _sampleiftrue_msa_2016()


_sampleiftrue_msa_2016 = SampleIfTrue(
    lambda: time() == 2016,
    lambda: mean_species_abundance(),
    lambda: 0,
    "_sampleiftrue_msa_2016",
)


@component.add(
    name="a price", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def a_price():
    """
    Calibrated
    """
    return 2


@component.add(
    name="a price sensitivity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def a_price_sensitivity():
    return 1.5


@component.add(
    name="a reserve", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def a_reserve():
    return 3


@component.add(
    name="a reserve sensitivity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def a_reserve_sensitivity():
    return 10


@component.add(
    name="Discovery amount", units="Ton", comp_type="Constant", comp_subtype="Normal"
)
def discovery_amount():
    """
    4.5e+010
    """
    return 45000000000.0


@component.add(
    name="b price", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def b_price():
    """
    Calibrated, 0.09
    """
    return 0.35


@component.add(
    name="b price sensitivity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def b_price_sensitivity():
    return 0.5


@component.add(
    name="b reserve", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def b_reserve():
    return 1.5


@component.add(
    name="b reserve sensitivity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def b_reserve_sensitivity():
    return 2


@component.add(
    name="Discovery amount sensitivity",
    units="Ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def discovery_amount_sensitivity():
    return 20000000000.0


@component.add(
    name="INIT P proven reserves",
    units="Ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_p_proven_reserves():
    return 16000000000.0


@component.add(
    name="Discovery year", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def discovery_year():
    return 2010


@component.add(
    name="P discovery rate",
    units="Ton/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_p_discovery_rate": 1},
    other_deps={
        "_smooth_p_discovery_rate": {
            "initial": {"discovery_amount": 1, "time": 1, "discovery_year": 1},
            "step": {"discovery_amount": 1, "time": 1, "discovery_year": 1},
        }
    },
)
def p_discovery_rate():
    return _smooth_p_discovery_rate()


_smooth_p_discovery_rate = Smooth(
    lambda: discovery_amount() * pulse(__data["time"], discovery_year(), width=1),
    lambda: 2,
    lambda: discovery_amount() * pulse(__data["time"], discovery_year(), width=1),
    lambda: 1,
    "_smooth_p_discovery_rate",
)


@component.add(
    name="Reserve demand ratio",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"phosphate_rock_proven_reserves": 1, "average_p_demand_rate": 1},
)
def reserve_demand_ratio():
    return phosphate_rock_proven_reserves() / average_p_demand_rate()


@component.add(
    name="Unit P production via manure crop based",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_p_production_via_manure_crop_based():
    """
    See FAO...ProducingAnimals.xls - Estimated based on FAO data on food production and number of livestock; and Shildrick et al 2003 for unit P manure production values. It is ton/ton, so dimensionless.
    """
    return 0.0553


@component.add(
    name="Unit P production via manure pasture based",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_p_production_via_manure_pasture_based():
    """
    See FAO...ProducingAnimals.xls - Estimated based on FAO data on animal calorie supply and number of livestock; and Shildrick et al 2003 for unit P manure production values. [Ton/ton]
    """
    return 0.0067


@component.add(
    name="P production rate FAO",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_rock_production_rate": 1},
)
def p_production_rate_fao():
    return p_rock_production_rate()


@component.add(
    name="Recoverable P generated in crop based manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_produced_in_the_manure_of_cropbased_animals": 1,
        "recoverable_manure_fraction_crop_based": 1,
    },
)
def recoverable_p_generated_in_crop_based_manure():
    return (
        p_produced_in_the_manure_of_cropbased_animals()
        * recoverable_manure_fraction_crop_based()
    )


@component.add(
    name="Recoverable P generated in pasture based manure",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "p_produced_in_the_manure_of_pasturebased_animals": 1,
        "recoverable_manure_fraction_pasture_based": 1,
    },
)
def recoverable_p_generated_in_pasture_based_manure():
    return (
        p_produced_in_the_manure_of_pasturebased_animals()
        * recoverable_manure_fraction_pasture_based()
    )


@component.add(
    name="P2O5 agriculture fraction",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def p2o5_agriculture_fraction():
    """
    Based on the FAO consumption andproduction data, on average (2002-2015) 10% of production is for other uses, 90% for agriculture. See P_Prod_Cons_FAOSTAT_data_5-3-2018.csv
    """
    return 0.9


@component.add(
    name="Desired P205 production rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"effect_of_price_on_p_production": 1, "total_p205_demand": 1},
)
def desired_p205_production_rate():
    return effect_of_price_on_p_production() * total_p205_demand()


@component.add(
    name="Relative P price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"p_price": 1, "reference_p_price": 1},
)
def relative_p_price():
    return p_price() / reference_p_price()


@component.add(
    name="Phosphate Rock Proven Reserves",
    units="Ton",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_phosphate_rock_proven_reserves": 1},
    other_deps={
        "_integ_phosphate_rock_proven_reserves": {
            "initial": {"init_p_proven_reserves": 1},
            "step": {"p_discovery_rate": 1, "p_rock_production_rate": 1},
        }
    },
)
def phosphate_rock_proven_reserves():
    return _integ_phosphate_rock_proven_reserves()


_integ_phosphate_rock_proven_reserves = Integ(
    lambda: p_discovery_rate() - p_rock_production_rate(),
    lambda: init_p_proven_reserves(),
    "_integ_phosphate_rock_proven_reserves",
)


@component.add(
    name="Reference P price", units="$/Ton", comp_type="Constant", comp_subtype="Normal"
)
def reference_p_price():
    """
    Calibrated
    """
    return 87


@component.add(
    name="Effect of reserves on P price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "a_reserve": 1,
        "reserve_demand_ratio": 1,
        "initial_p_reserve_production_ratio": 1,
        "b_reserve": 1,
    },
)
def effect_of_reserves_on_p_price():
    return a_reserve() * float(
        np.exp(
            -b_reserve()
            * (reserve_demand_ratio() / initial_p_reserve_production_ratio())
        )
    )


@component.add(
    name="Initial P reserve production ratio",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_p_reserve_production_ratio():
    """
    265, 527
    """
    return 527


@component.add(
    name="P price",
    units="$/Ton",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"p_cost": 1, "p_price_margin": 1, "_smooth_p_price": 1},
    other_deps={
        "_smooth_p_price": {
            "initial": {"effect_of_reserves_on_p_price": 1},
            "step": {"effect_of_reserves_on_p_price": 1},
        }
    },
)
def p_price():
    return p_cost() * p_price_margin() * _smooth_p_price()


_smooth_p_price = Smooth(
    lambda: effect_of_reserves_on_p_price(),
    lambda: 3,
    lambda: effect_of_reserves_on_p_price(),
    lambda: 1,
    "_smooth_p_price",
)


@component.add(
    name="Effect of price on P production",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"a_price": 1, "b_price": 1, "relative_p_price": 1},
)
def effect_of_price_on_p_production():
    return a_price() * float(np.exp(-b_price() * relative_p_price()))


@component.add(
    name="P price margin", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def p_price_margin():
    return 1.1


@component.add(
    name="P cost", units="$/Ton", comp_type="Constant", comp_subtype="Normal"
)
def p_cost():
    return 60


@component.add(
    name="P Supply Scenario Switch",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def p_supply_scenario_switch():
    """
    0: Intended Amount 1: Intended amount is limited by the reserve availability 2: Supply shocks, therefore a timeseries exogenous application
    """
    return 1


@component.add(
    name="Phosphorus",
    units="Ton",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_phosphorus": 1},
    other_deps={
        "_integ_phosphorus": {
            "initial": {"initial_phosphorus": 1},
            "step": {
                "phosphorus_erosion_leaching_and_runoff_rate": 1,
                "total_p_uptake_rate": 1,
                "commercial_p_application_for_agriculture": 1,
                "phosphorus_application_with_manure": 1,
            },
        }
    },
)
def phosphorus():
    """
    This is the total global amount of elemental phosphorus accumulating in the soil.
    """
    return _integ_phosphorus()


_integ_phosphorus = Integ(
    lambda: -phosphorus_erosion_leaching_and_runoff_rate()
    - total_p_uptake_rate()
    + commercial_p_application_for_agriculture()
    + phosphorus_application_with_manure(),
    lambda: initial_phosphorus(),
    "_integ_phosphorus",
)


@component.add(
    name="Normal fraction intended to change diet stepped",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"normal_fraction_intended_to_change_diet": 1, "time": 1},
)
def normal_fraction_intended_to_change_diet_stepped():
    return 0 + step(__data["time"], normal_fraction_intended_to_change_diet(), 2010)


@component.add(
    name="Normal fraction intended to change diet",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"normal_fraction_intended_to_change_diet_variation": 1, "time": 1},
)
def normal_fraction_intended_to_change_diet():
    """
    BaseRun: 0.04 HigherIntention: 0.08
    """
    return 0.04 + step(
        __data["time"], normal_fraction_intended_to_change_diet_variation() - 0.04, 2020
    )


@component.add(
    name="Ratio of Secondary Education Graduates",
    units="Dmnl",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "secondary_education_graduates_by_gender": 1,
        "population_by_gender": 1,
    },
)
def ratio_of_secondary_education_graduates():
    return secondary_education_graduates_by_gender() / population_by_gender()


@component.add(
    name="Young population",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def young_population():
    return sum(
        population_cohorts()
        .loc[:, _subscript_dict["Young"]]
        .rename({"Gender": "Gender!", "Cohorts": "Young!"}),
        dim=["Gender!", "Young!"],
    )


@component.add(
    name="Fraction intended to change diet",
    units="Dmnl",
    subscripts=["Cohorts", "Gender", "Education"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_fraction_intended_to_change_diet": 1},
    other_deps={
        "_smooth_fraction_intended_to_change_diet": {
            "initial": {"indicative_fraction_intended_to_change_diet": 1},
            "step": {
                "indicative_fraction_intended_to_change_diet": 1,
                "intention_delay": 1,
            },
        }
    },
)
def fraction_intended_to_change_diet():
    return _smooth_fraction_intended_to_change_diet()


_smooth_fraction_intended_to_change_diet = Smooth(
    lambda: indicative_fraction_intended_to_change_diet(),
    lambda: xr.DataArray(
        intention_delay(),
        {
            "Cohorts": _subscript_dict["Cohorts"],
            "Gender": _subscript_dict["Gender"],
            "Education": _subscript_dict["Education"],
        },
        ["Cohorts", "Gender", "Education"],
    ),
    lambda: indicative_fraction_intended_to_change_diet(),
    lambda: 1,
    "_smooth_fraction_intended_to_change_diet",
)


@component.add(
    name="Ratio Young",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"young_population": 1, "population": 1},
)
def ratio_young():
    return young_population() / population()


@component.add(
    name="Intention Delay", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def intention_delay():
    return 3


@component.add(
    name="Percentage of vegetarians",
    units="Dmnl",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lactoovo_vegetarian_diet_followers": 1, "population_wrt_education": 1},
)
def percentage_of_vegetarians():
    return zidz(lactoovo_vegetarian_diet_followers(), population_wrt_education())


@component.add(
    name="Subjective norm multiplier for diet change",
    units="Dmnl",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_social_norm": 1,
        "k_social_norm": 1,
        "percentage_of_vegetarians": 1,
        "x0_social_norm": 1,
    },
)
def subjective_norm_multiplier_for_diet_change():
    return (
        l_social_norm()
        / (
            1
            + np.exp(
                (-k_social_norm())
                * (percentage_of_vegetarians() - x0_social_norm()).transpose(
                    "Cohorts", "Gender", "Education"
                )
            )
        )
    ).transpose("Gender", "Cohorts", "Education")


@component.add(
    name="Attitude multiplier for diet change",
    units="Dmnl",
    subscripts=["Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_risk_attitude": 1,
        "x0_risk_attitude": 1,
        "k_risk_attitude": 1,
        "perceived_risk": 1,
    },
)
def attitude_multiplier_for_diet_change():
    """
    ( L events risk / (1+( EXP(-k events risk*(Climate Events in Memory-x0 events risk) ) )) -(L events risk / 2))+0.5
    """
    return l_risk_attitude() / (
        1 + np.exp(-k_risk_attitude() * (perceived_risk() - x0_risk_attitude()))
    )


@component.add(
    name='"Total shift from meat-based to vegetarian diet"',
    units="People/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"shift_from_meatbased_to_vegetarian": 1},
)
def total_shift_from_meatbased_to_vegetarian_diet():
    return sum(
        shift_from_meatbased_to_vegetarian().rename(
            {"Gender": "Gender!", "Cohorts": "Cohorts!", "Education": "Education!"}
        ),
        dim=["Gender!", "Cohorts!", "Education!"],
    )


@component.add(
    name="Perceived Risk",
    units="Event",
    subscripts=["Education"],
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_perceived_risk": 1},
    other_deps={
        "_smooth_perceived_risk": {
            "initial": {"climate_events_in_memory": 1},
            "step": {"climate_events_in_memory": 1, "climate_risk_perception_delay": 1},
        }
    },
)
def perceived_risk():
    """
    Beckage et al. uses linear, cubic and logistic function to relate events to perceived risk. They show that the greates variety is obtained with the logistic function form, therefore I choose to use only the logistic function. They have a final term L/2+0.5 in the equation. I keep using it as they did.
    """
    return _smooth_perceived_risk()


_smooth_perceived_risk = Smooth(
    lambda: xr.DataArray(
        climate_events_in_memory(),
        {"Education": _subscript_dict["Education"]},
        ["Education"],
    ),
    lambda: climate_risk_perception_delay(),
    lambda: xr.DataArray(
        climate_events_in_memory(),
        {"Education": _subscript_dict["Education"]},
        ["Education"],
    ),
    lambda: 1,
    "_smooth_perceived_risk",
)


@component.add(
    name="Minimum Number of Extreme Events",
    units="Events/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def minimum_number_of_extreme_events():
    return 0


@component.add(
    name="Perception of Events",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"event_series": 2, "event_perception_threshold": 1},
)
def perception_of_events():
    return if_then_else(
        event_series() > event_perception_threshold(), lambda: event_series(), lambda: 0
    )


@component.add(
    name="Maximum Number of Extreme Events",
    units="Events/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def maximum_number_of_extreme_events():
    return 1000


@component.add(
    name="Mean Temperature for Events",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mean_temperature_for_events():
    """
    0.964
    """
    return 3


@component.add(
    name="Reference Extreme Event Mean",
    units="Events/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_extreme_event_mean():
    return 20


@component.add(name="PI", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def pi():
    return 3.14159


@component.add(
    name="Poisson Arrivals",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "minimum_number_of_extreme_events": 1,
        "maximum_number_of_extreme_events": 1,
        "extreme_event_mean": 1,
        "poisson_distribution_shift": 1,
        "poisson_distribution_stretch": 1,
        "s_stream_id": 1,
    },
)
def poisson_arrivals():
    return not_implemented_function(
        "random_poisson",
        minimum_number_of_extreme_events(),
        maximum_number_of_extreme_events(),
        extreme_event_mean(),
        poisson_distribution_shift(),
        poisson_distribution_stretch(),
        s_stream_id(),
    )


@component.add(
    name="Poisson Distribution Shift",
    units="Events/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def poisson_distribution_shift():
    return 0


@component.add(
    name="Poisson Distribution Stretch",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def poisson_distribution_stretch():
    return 1


@component.add(
    name="Forgetting of Events",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"climate_events_in_memory": 1, "time_to_forget_climate_events": 1},
)
def forgetting_of_events():
    return climate_events_in_memory() / time_to_forget_climate_events()


@component.add(
    name="T",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"upper_tail_threshold": 1},
)
def t():
    return (-2 * float(np.log(1 - upper_tail_threshold()))) ** 0.5


@component.add(
    name="Temperature Scale Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def temperature_scale_factor():
    return 1


@component.add(
    name="Event Choice Switch",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def event_choice_switch():
    return 1


@component.add(
    name="Minimum Extreme Event Mean",
    units="Events/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def minimum_extreme_event_mean():
    """
    To prevent negative mean value for mean number of extreme events per year
    """
    return 0.1


@component.add(
    name="S Stream ID", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def s_stream_id():
    return 5


@component.add(
    name="Extreme Event Mean",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extreme_event_ratio": 1,
        "reference_extreme_event_mean": 1,
        "temperature_scale_factor": 1,
        "minimum_extreme_event_mean": 1,
    },
)
def extreme_event_mean():
    return float(
        np.maximum(
            extreme_event_ratio()
            * reference_extreme_event_mean()
            * temperature_scale_factor(),
            minimum_extreme_event_mean(),
        )
    )


@component.add(
    name="Extreme Event Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"stdnormal_approximation": 1, "upper_tail_threshold": 1},
)
def extreme_event_ratio():
    """
    Relative number of extreme events to preindustrial extreme events
    """
    return (1 - stdnormal_approximation()) / (1 - upper_tail_threshold())


@component.add(
    name="Number of Future Events",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "filter_date": 1,
        "reference_extreme_event_mean": 1,
        "poisson_arrivals": 1,
    },
)
def number_of_future_events():
    return if_then_else(
        time() <= filter_date(),
        lambda: reference_extreme_event_mean(),
        lambda: poisson_arrivals(),
    )


@component.add(
    name="StdNormal Approximation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"pi": 1, "new_z": 5},
)
def stdnormal_approximation():
    return 1 - (1 / (2 * pi()) ** 0.5) * (
        float(np.exp(-1 * (new_z() * new_z()) / 2))
        / (0.226 + 0.64 * new_z() + 0.33 * (new_z() * new_z() + 3) ** 0.5)
    )


@component.add(
    name="Window Event Avg Difference",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"number_of_future_events": 1, "average_poisson_event_generation": 1},
)
def window_event_avg_difference():
    return number_of_future_events() - average_poisson_event_generation()


@component.add(
    name="Filter Date", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def filter_date():
    return 2017


@component.add(
    name="Variance Temperature for Events",
    units="DegreesC*DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def variance_temperature_for_events():
    """
    16.763 GEOPHYSICAL RESEARCH LETTERS, VOL. 39, L14707, doi:10.1029/2012GL052459, 2012 The shifting probability distribution of global daytime and night-time temperatures Markus G. Donat1 and Lisa V. Alexander1,2 Figure 2 A
    """
    return 48


@component.add(
    name="Threshold Z for Extreme Temperatures",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "inverse_cdf": 1,
        "stdev_temperature": 1,
        "mean_temperature_for_events": 1,
    },
)
def threshold_z_for_extreme_temperatures():
    """
    90% right position @ mean 0.964 var 16.76
    """
    return inverse_cdf() * stdev_temperature() + mean_temperature_for_events()


@component.add(
    name="Upper Tail Threshold",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def upper_tail_threshold():
    return 0.99


@component.add(
    name="New Z",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "threshold_z_for_extreme_temperatures": 1,
        "temperature_change_from_preindustrial": 1,
        "stdev_temperature": 1,
    },
)
def new_z():
    return (
        threshold_z_for_extreme_temperatures() - temperature_change_from_preindustrial()
    ) / stdev_temperature()


@component.add(
    name="Average Poisson Event Generation",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"past_quantity_held": 1, "window_avg_time": 1},
)
def average_poisson_event_generation():
    return past_quantity_held() / window_avg_time()


@component.add(
    name="inverse CDF",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"t": 10},
)
def inverse_cdf():
    """
    Formula 26.2.23 from Abramowitz and Stegun comparison from matlab: >> x=norminv([0,0.9],0,1) x = -Inf 1.2816 >> x=norminv([0,0.95],0,1) x = -Inf 1.6449
    """
    return t() - (2.51552 + 0.802853 * t() + 0.010328 * t() * t()) / (
        1 + 1.43279 * t() + 0.189269 * t() * t() + 0.001308 * t() * t() * t()
    )


@component.add(
    name="Event Series",
    units="Events/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "event_choice_switch": 1,
        "number_of_future_events": 1,
        "window_event_avg_difference": 1,
    },
)
def event_series():
    return if_then_else(
        event_choice_switch() == 0,
        lambda: number_of_future_events(),
        lambda: window_event_avg_difference(),
    )


@component.add(
    name="k risk attitude",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_k_risk_attitude": 1, "time": 1},
)
def k_risk_attitude():
    """
    .5
    """
    return 0.9 + step(__data["time"], sa_k_risk_attitude() - 0.9, 2020)


@component.add(
    name="StDev Temperature",
    units="Days/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variance_temperature_for_events": 1},
)
def stdev_temperature():
    return float(np.sqrt(variance_temperature_for_events()))


@component.add(
    name="past quantity held",
    units="Events/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_past_quantity_held": 1},
    other_deps={
        "_integ_past_quantity_held": {
            "initial": {"number_of_future_events": 1, "window_avg_time": 1},
            "step": {
                "number_of_future_events": 1,
                "delayed_poisson_event_generation": 1,
            },
        }
    },
)
def past_quantity_held():
    return _integ_past_quantity_held()


_integ_past_quantity_held = Integ(
    lambda: number_of_future_events() - delayed_poisson_event_generation(),
    lambda: number_of_future_events() * window_avg_time(),
    "_integ_past_quantity_held",
)


@component.add(
    name="Window Avg Time", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def window_avg_time():
    return 1


@component.add(
    name="Climate Events in Memory",
    units="Event",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_climate_events_in_memory": 1},
    other_deps={
        "_integ_climate_events_in_memory": {
            "initial": {"init_climate_events_in_memory": 1},
            "step": {"perception_of_events": 1, "forgetting_of_events": 1},
        }
    },
)
def climate_events_in_memory():
    return _integ_climate_events_in_memory()


_integ_climate_events_in_memory = Integ(
    lambda: perception_of_events() - forgetting_of_events(),
    lambda: init_climate_events_in_memory(),
    "_integ_climate_events_in_memory",
)


@component.add(
    name="L risk attitude",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_l_risk_attitude": 1, "time": 1},
)
def l_risk_attitude():
    return 2 + step(__data["time"], sa_l_risk_attitude() - 2, 2020)


@component.add(
    name="x0 risk attitude",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"sa_x0_risk_attitude": 1, "time": 1},
)
def x0_risk_attitude():
    return 5 + step(__data["time"], sa_x0_risk_attitude() - 5, 2020)


@component.add(
    name="Delayed Poisson Event Generation",
    units="Events/Year",
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_delayed_poisson_event_generation": 1},
    other_deps={
        "_delayfixed_delayed_poisson_event_generation": {
            "initial": {"number_of_future_events": 1, "window_avg_time": 1},
            "step": {"number_of_future_events": 1},
        }
    },
)
def delayed_poisson_event_generation():
    return _delayfixed_delayed_poisson_event_generation()


_delayfixed_delayed_poisson_event_generation = DelayFixed(
    lambda: number_of_future_events(),
    lambda: window_avg_time(),
    lambda: number_of_future_events(),
    time_step,
    "_delayfixed_delayed_poisson_event_generation",
)


@component.add(
    name="Effect of Technology on Fertilizer Consumption",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 2, "l_tech_fert": 1, "x0_tech_fert": 1, "k_tech_fert": 1},
)
def effect_of_technology_on_fertilizer_consumption():
    """
    MAKE IT 1+ (L / ....)
    """
    return if_then_else(
        time() < 2020,
        lambda: 1,
        lambda: l_tech_fert()
        / (1 + float(np.exp(-k_tech_fert() * ((time() - 2020) - x0_tech_fert())))),
    )


@component.add(
    name="Total N Emissions",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"denitrification_rate": 1, "nitrogen_leaching_and_runoff_rate": 1},
)
def total_n_emissions():
    return denitrification_rate() + nitrogen_leaching_and_runoff_rate()


@component.add(
    name="x0 tech fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def x0_tech_fert():
    return 30


@component.add(
    name="L tech fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def l_tech_fert():
    return 2


@component.add(
    name="k tech fert", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def k_tech_fert():
    return 0


@component.add(
    name="N use efficiency",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_n_uptake_rate": 1},
)
def n_use_efficiency():
    return 0 * total_n_uptake_rate()


@component.add(
    name="Effect of GDP on Urban Land Requirement",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "l_urban_land": 1,
        "k_urban_land": 1,
        "x0_urban_land": 1,
        "relative_gwp_per_capita": 1,
    },
)
def effect_of_gdp_on_urban_land_requirement():
    """
    k urban land +
    """
    return l_urban_land() / (
        1
        + float(np.exp(-k_urban_land() * (relative_gwp_per_capita() - x0_urban_land())))
    )


@component.add(
    name="Impact of Food on Life Expectancy",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"l_food_pop": 1, "k_food_pop": 1, "food_ratio": 1, "x0_food_pop": 1},
)
def impact_of_food_on_life_expectancy():
    """
    Impact of food availability on life expectancy.
    """
    return l_food_pop() / (
        1 + float(np.exp(-k_food_pop() * (food_ratio() - x0_food_pop())))
    )


@component.add(
    name="Population Data",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def population_data():
    return np.interp(
        time(),
        [
            1900.0,
            1910.0,
            1920.0,
            1930.0,
            1940.0,
            1950.0,
            1960.0,
            1970.0,
            1980.0,
            1990.0,
            2000.0,
            2010.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
        ],
        [
            1.60000e09,
            1.71092e09,
            1.94955e09,
            2.10000e09,
            2.30000e09,
            2.55000e09,
            3.00000e09,
            3.70000e09,
            4.50000e09,
            5.30000e09,
            6.24176e09,
            7.12458e09,
            7.56345e09,
            7.64832e09,
            7.73203e09,
            7.81452e09,
            7.89638e09,
            7.97785e09,
            8.05888e09,
            8.13938e09,
            8.21929e09,
            8.29854e09,
            8.37707e09,
            8.45482e09,
            8.53172e09,
            8.60768e09,
            8.68265e09,
            8.75657e09,
            8.82939e09,
            8.90108e09,
            8.97158e09,
            9.04086e09,
            9.10887e09,
            9.17557e09,
            9.24087e09,
            9.30473e09,
            9.36709e09,
            9.42791e09,
            9.48716e09,
            9.54481e09,
            9.60083e09,
            9.65519e09,
            9.70786e09,
            9.75887e09,
            9.80831e09,
            9.85617e09,
            9.90239e09,
            9.94695e09,
            9.98980e09,
            1.00309e10,
            1.00702e10,
            1.01076e10,
            1.01430e10,
            1.01764e10,
            1.02079e10,
            1.02373e10,
            1.02646e10,
            1.02900e10,
            1.03133e10,
            1.03346e10,
            1.03539e10,
            1.03712e10,
            1.03866e10,
            1.04000e10,
            1.04116e10,
            1.04213e10,
            1.04291e10,
            1.04351e10,
            1.04393e10,
            1.04415e10,
            1.04414e10,
            1.04392e10,
            1.04349e10,
            1.04285e10,
            1.04201e10,
            1.04097e10,
            1.03974e10,
            1.03833e10,
            1.03673e10,
            1.03497e10,
            1.03303e10,
            1.03093e10,
            1.02868e10,
            1.02627e10,
            1.02371e10,
            1.02102e10,
            1.01818e10,
            1.01522e10,
            1.01213e10,
            1.00891e10,
            1.00558e10,
            1.00213e10,
            9.98575e09,
            9.94913e09,
            9.91151e09,
            9.87291e09,
            9.83339e09,
        ],
    )


@component.add(
    name="Agricultural Land Development Rate",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "intended_conversion_other_to_agriculture": 1,
        "other_protected_land": 1,
        "other_land": 1,
        "agricultural_land_development_time": 1,
    },
)
def agricultural_land_development_rate():
    return (
        float(
            np.minimum(
                intended_conversion_other_to_agriculture(),
                other_land() - other_protected_land(),
            )
        )
        / agricultural_land_development_time()
    )


@component.add(
    name="Demand Supply ratio of Agricultural Land",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_agricultural_land_demand": 1, "agricultural_land": 1},
)
def demand_supply_ratio_of_agricultural_land():
    return total_agricultural_land_demand() / agricultural_land()


@component.add(
    name="Nitrogen Leaching and Runoff Rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"nitrogen": 1, "n_leaching_and_runoff_fraction": 1},
)
def nitrogen_leaching_and_runoff_rate():
    return nitrogen() * n_leaching_and_runoff_fraction()


@component.add(
    name="Commercial Nitrogen Application per ha",
    units="Ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"commercial_n_application_for_agriculture": 1, "agricultural_land": 1},
)
def commercial_nitrogen_application_per_ha():
    return commercial_n_application_for_agriculture() / agricultural_land()


@component.add(
    name="Normal Urban and Industrial Land per Capita",
    units="ha/Person",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_urban_and_industrial_land_per_capita():
    """
    Normal required Urban and Industrial Land per capita assuming equal land distribution between the total population.
    """
    return 0.02


@component.add(
    name="Forest Land Discrepancy",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land_needed_to_be_harvested": 1,
        "harvest_available_forest_land": 1,
    },
)
def forest_land_discrepancy():
    return float(
        np.maximum(
            0, forest_land_needed_to_be_harvested() - harvest_available_forest_land()
        )
    )


@component.add(
    name="Urban and Industrial Land Discrepancy",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "urban_and_industrial_land_required": 1,
        "urban_and_industrial_land": 1,
    },
)
def urban_and_industrial_land_discrepancy():
    return float(
        np.maximum(
            urban_and_industrial_land_required() - urban_and_industrial_land(), 0
        )
    )


@component.add(
    name="Urban and Industrial Land Required",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population": 1, "urban_and_industrial_land_per_capita": 1},
)
def urban_and_industrial_land_required():
    return population() * urban_and_industrial_land_per_capita()


@component.add(
    name="Forestation from Other Land",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "other_land": 1,
        "other_protected_land": 1,
        "other_to_forest_land_allocation_time": 2,
        "fraction_of_forest_land_conversion_from_agriculture": 1,
        "forest_land_discrepancy": 1,
    },
)
def forestation_from_other_land():
    return float(
        np.minimum(
            (other_land() - other_protected_land())
            / other_to_forest_land_allocation_time(),
            forest_land_discrepancy()
            * (1 - fraction_of_forest_land_conversion_from_agriculture())
            / other_to_forest_land_allocation_time(),
        )
    )


@component.add(
    name="Reference phosphate consumption 2010",
    units="Ton/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_phosphate_consumption_2010():
    """
    Historical 2010 value
    """
    return 42900000.0


@component.add(
    name="Reference crop yield 2016",
    units="Ton/(Year*ha)",
    subscripts=["FoodCategories"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_crop_yield_2016():
    """
    2016 values for each food category, based on FAO data
    """
    return xr.DataArray(
        [1.28, 0.65, 6.42, 0.8, 0.99, 3.97, 15.13, 9.03],
        {"FoodCategories": _subscript_dict["FoodCategories"]},
        ["FoodCategories"],
    )


@component.add(
    name="Initial Phosphorus", units="Ton", comp_type="Constant", comp_subtype="Normal"
)
def initial_phosphorus():
    return 500000


@component.add(
    name="deposition",
    units="Ton/(Year*ha)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def deposition():
    """
    Depositing atmosheric N in the soil, e.g. by legumes. Excluded for now.
    """
    return 0


@component.add(
    name="mineralization",
    units="Ton/(Year*ha)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mineralization():
    """
    with the degradation of organic matter in soil. Excluded from this model for now.
    """
    return 0


@component.add(
    name="Denitrification Rate",
    units="Ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"nitrogen": 1, "denitrification_fraction": 1},
)
def denitrification_rate():
    return nitrogen() * denitrification_fraction()


@component.add(
    name="Denitrification fraction",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def denitrification_fraction():
    """
    Denitrification rate is the rate of nitrate that is released back to the atmosphere. Ammonium also vaporizes. In this case, this flow covers both! The value is calibrated according to the "Denitrification Rate" data and estimates in Reay et al. 2012 and Mosier 2000. BASE:0.087
    """
    return 0.087


@component.add(
    name="Initial Mobile Nitrogen",
    units="Ton",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_mobile_nitrogen():
    return 0


@component.add(
    name="Reference nitrogen consumption 2010",
    units="Ton/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_nitrogen_consumption_2010():
    """
    Calibrated parameter value
    """
    return 100000000.0


@component.add(
    name="Fertilizer Efficiency",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fertilizer_efficiency():
    """
    Ton Crop / Ton fertilizer: 21.8 if related to consumption
    """
    return 100


@component.add(
    name="Market Share Renewables",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "market_share_biomass": 1,
        "market_share_solar": 1,
        "market_share_wind": 1,
    },
)
def market_share_renewables():
    return market_share_biomass() + market_share_solar() + market_share_wind()


@component.add(
    name="Total Renewable Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_production": 1,
        "solar_energy_production": 1,
        "wind_energy_production": 1,
    },
)
def total_renewable_energy_production():
    return (
        biomass_energy_production()
        + solar_energy_production()
        + wind_energy_production()
    )


@component.add(
    name="Average Total Daily Calorie Intake",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_daily_caloric_intake": 1,
        "effect_of_gwp_on_daily_caloric_intake": 1,
    },
)
def average_total_daily_calorie_intake():
    return reference_daily_caloric_intake() * effect_of_gwp_on_daily_caloric_intake()


@component.add(
    name="Shift Fraction Vegetarians to Meat",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_shift_fraction_from_vegetarianism_to_meat": 1,
        "effect_of_gwp_on_meat_consumption": 1,
    },
)
def shift_fraction_vegetarians_to_meat():
    return (
        normal_shift_fraction_from_vegetarianism_to_meat()
        * effect_of_gwp_on_meat_consumption()
    )


@component.add(
    name="Effect of GWP on Calorie Intake Lookup",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_effect_of_gwp_on_calorie_intake_lookup"
    },
)
def effect_of_gwp_on_calorie_intake_lookup(x, final_subs=None):
    return _hardcodedlookup_effect_of_gwp_on_calorie_intake_lookup(x, final_subs)


_hardcodedlookup_effect_of_gwp_on_calorie_intake_lookup = HardcodedLookups(
    [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0],
    [0.4, 0.52, 1.0, 1.15, 1.26, 1.33, 1.38, 1.4, 1.42],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_effect_of_gwp_on_calorie_intake_lookup",
)


@component.add(
    name="Arable Land Allocated for Energy Crops",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_fraction_of_energy_crops": 1, "arable_land": 1},
)
def arable_land_allocated_for_energy_crops():
    return demand_fraction_of_energy_crops() * arable_land()


@component.add(
    name="Land Allocated for Energy Crops",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"arable_land_allocated_for_energy_crops": 1},
)
def land_allocated_for_energy_crops():
    """
    Land area dedicated to energy crops production.
    """
    return arable_land_allocated_for_energy_crops()


@component.add(
    name="Demand Fraction of Energy Crops",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "arable_land_needed_for_energy_crops": 1,
        "total_demand_for_arable_land": 1,
    },
)
def demand_fraction_of_energy_crops():
    return arable_land_needed_for_energy_crops() / total_demand_for_arable_land()


@component.add(
    name="Land Conversion Delay Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def land_conversion_delay_time():
    """
    Parameter indicating time delay required to change land from vegetal to animal food production land.
    """
    return 5


@component.add(
    name="Percentage of vegetarian diet followers",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_vegetarians": 1, "population": 1},
)
def percentage_of_vegetarian_diet_followers():
    return total_vegetarians() / population()


@component.add(
    name='"Percentage of meat-based diet followers"',
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_meat_eaters": 1, "population": 1},
)
def percentage_of_meatbased_diet_followers():
    return total_meat_eaters() / population()


@component.add(
    name="Arable Land Needed for Energy Crops",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_crops_biomass_demand": 1, "agriculture_land_energy_yield": 1},
)
def arable_land_needed_for_energy_crops():
    """
    Land area dedicated to energy crops production.
    """
    return total_crops_biomass_demand() / agriculture_land_energy_yield()


@component.add(
    name="Normal perceived climate change",
    units="DegreesC",
    subscripts=["Education"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_perceived_climate_change():
    """
    2010 values, used ofr normalization
    """
    return xr.DataArray(
        [0.6212, 0.7562, 0.8162, 0.8852],
        {"Education": _subscript_dict["Education"]},
        ["Education"],
    )


@component.add(
    name="Population increase rate",
    units="People/Year",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "population_wrt_education": 1,
        "previous_population": 1,
        "percentage_of_vegetarians": 1,
    },
)
def population_increase_rate():
    return (
        population_wrt_education() - previous_population()
    ) * percentage_of_vegetarians()


@component.add(
    name="Lactoovo Vegetarian Diet Followers",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_lactoovo_vegetarian_diet_followers": 1},
    other_deps={
        "_integ_lactoovo_vegetarian_diet_followers": {
            "initial": {"initial_vegetarian_diet_followers": 1},
            "step": {
                "shift_from_meatbased_to_vegetarian": 1,
                "shift_from_vegetarian_to_meatbased": 1,
                "population_increase_rate": 1,
            },
        }
    },
)
def lactoovo_vegetarian_diet_followers():
    return _integ_lactoovo_vegetarian_diet_followers()


_integ_lactoovo_vegetarian_diet_followers = Integ(
    lambda: shift_from_meatbased_to_vegetarian()
    - shift_from_vegetarian_to_meatbased()
    + population_increase_rate(),
    lambda: initial_vegetarian_diet_followers(),
    "_integ_lactoovo_vegetarian_diet_followers",
)


@component.add(
    name="Previous population",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_previous_population": 1},
    other_deps={
        "_delayfixed_previous_population": {
            "initial": {"initial_pop_ed": 1},
            "step": {"population_wrt_education": 1},
        }
    },
)
def previous_population():
    return _delayfixed_previous_population()


_delayfixed_previous_population = DelayFixed(
    lambda: population_wrt_education(),
    lambda: 1,
    lambda: initial_pop_ed(),
    time_step,
    "_delayfixed_previous_population",
)


@component.add(
    name="Initial Pop Ed",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_initial_pop_ed": 1},
    other_deps={
        "_initial_initial_pop_ed": {
            "initial": {"population_wrt_education": 1},
            "step": {},
        }
    },
)
def initial_pop_ed():
    return _initial_initial_pop_ed()


_initial_initial_pop_ed = Initial(
    lambda: population_wrt_education(), "_initial_initial_pop_ed"
)


@component.add(
    name="Total eater value cohort",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lactoovo_vegetarian_diet_followers": 1, "meatbased_diet_followers": 1},
)
def total_eater_value_cohort():
    return lactoovo_vegetarian_diet_followers() + meatbased_diet_followers()


@component.add(
    name="Total Meat Eaters by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"meatbased_diet_followers": 1},
)
def total_meat_eaters_by_gender():
    return sum(
        meatbased_diet_followers().rename(
            {"Cohorts": "Cohorts!", "Education": "Education!"}
        ),
        dim=["Cohorts!", "Education!"],
    )


@component.add(
    name='"Meat-based Diet Followers"',
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "population_wrt_education": 1,
        "lactoovo_vegetarian_diet_followers": 1,
        "shift_from_meatbased_to_vegetarian": 1,
        "shift_from_vegetarian_to_meatbased": 1,
    },
)
def meatbased_diet_followers():
    return (
        np.maximum(0, population_wrt_education() - lactoovo_vegetarian_diet_followers())
        + 0 * shift_from_meatbased_to_vegetarian()
        + 0 * shift_from_vegetarian_to_meatbased()
    )


@component.add(
    name='"Shift from vegetarian to meat-based"',
    units="People/Year",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "shift_fraction_vegetarians_to_meat": 1,
        "lactoovo_vegetarian_diet_followers": 1,
    },
)
def shift_from_vegetarian_to_meatbased():
    return shift_fraction_vegetarians_to_meat() * lactoovo_vegetarian_diet_followers()


@component.add(
    name="Total Vegetarians by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lactoovo_vegetarian_diet_followers": 1},
)
def total_vegetarians_by_gender():
    return sum(
        lactoovo_vegetarian_diet_followers().rename(
            {"Cohorts": "Cohorts!", "Education": "Education!"}
        ),
        dim=["Cohorts!", "Education!"],
    )


@component.add(
    name='"Shift from meat-based to vegetarian"',
    units="People/Year",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_vegetarians": 1,
        "shift_fraction_of_meat_eaters_to_vegetarianism": 1,
    },
)
def shift_from_meatbased_to_vegetarian():
    return potential_vegetarians() * shift_fraction_of_meat_eaters_to_vegetarianism()


@component.add(
    name="Population wrt Education",
    units="People",
    subscripts=["Gender", "Cohorts", "Education"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "population_with_no_or_incomplete_education": 1,
        "primary_education_graduates": 1,
        "secondary_education_graduates": 1,
        "tertiary_education_graduates": 1,
    },
)
def population_wrt_education():
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "Cohorts": _subscript_dict["Cohorts"],
            "Education": _subscript_dict["Education"],
        },
        ["Gender", "Cohorts", "Education"],
    )
    value.loc[:, :, ["noEd"]] = (
        population_with_no_or_incomplete_education()
        .expand_dims({"Education": ["noEd"]}, 2)
        .values
    )
    value.loc[:, :, ["primary"]] = (
        primary_education_graduates().expand_dims({"Education": ["primary"]}, 2).values
    )
    value.loc[:, :, ["secondary"]] = (
        secondary_education_graduates()
        .expand_dims({"Education": ["secondary"]}, 2)
        .values
    )
    value.loc[:, :, ["tertiary"]] = (
        tertiary_education_graduates()
        .expand_dims({"Education": ["tertiary"]}, 2)
        .values
    )
    return value


@component.add(
    name="Smoothed GWP per Capita",
    units="$/(Person*Year)",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_smoothed_gwp_per_capita": 1},
    other_deps={
        "_smooth_smoothed_gwp_per_capita": {
            "initial": {"gwp_per_capita": 1},
            "step": {"gwp_per_capita": 1, "year_period": 1},
        }
    },
)
def smoothed_gwp_per_capita():
    return _smooth_smoothed_gwp_per_capita()


_smooth_smoothed_gwp_per_capita = Smooth(
    lambda: gwp_per_capita(),
    lambda: year_period(),
    lambda: gwp_per_capita(),
    lambda: 1,
    "_smooth_smoothed_gwp_per_capita",
)


@component.add(
    name="Effect of GWP on Meat Consumption",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"relative_gwp_per_capita": 1},
)
def effect_of_gwp_on_meat_consumption():
    """
    See FAOSTAT_...meatpercapita.xlsx forhow I derived the lookup.
    """
    return np.interp(
        relative_gwp_per_capita(),
        [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 2.75, 3.0],
        [0.4, 0.47, 0.57, 0.76, 1.0, 1.24, 1.43, 1.53, 1.67, 1.82, 1.87, 1.9, 1.92],
    )


@component.add(
    name="Sum of diet followers",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_vegetarians": 1, "total_meat_eaters": 1},
)
def sum_of_diet_followers():
    return total_vegetarians() + total_meat_eaters()


@component.add(
    name="Reference GWP per Capita",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita():
    """
    GWP per capita in 1961. (Felix model, matches the historical data 1980-2010 well.) 3342.7 Calibrated: 4000
    """
    return 4000


@component.add(
    name="Relative GWP per Capita",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"smoothed_gwp_per_capita": 1, "reference_gwp_per_capita": 1},
)
def relative_gwp_per_capita():
    return smoothed_gwp_per_capita() / reference_gwp_per_capita()


@component.add(
    name="Transmission rate",
    units="Dmnl",
    subscripts=["Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def transmission_rate():
    """
    BAU: 1, 1, 2, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1 For StrongerImpact: 1, 1, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 1, 1, 1, 1, 1, 1
    """
    return xr.DataArray(
        [
            1.0,
            1.0,
            2.0,
            5.0,
            5.0,
            4.0,
            4.0,
            4.0,
            3.0,
            3.0,
            3.0,
            3.0,
            2.0,
            2.0,
            2.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
        ],
        {"Cohorts": _subscript_dict["Cohorts"]},
        ["Cohorts"],
    )


@component.add(
    name="Total Vegetarians",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_vegetarians_by_gender": 1},
)
def total_vegetarians():
    return sum(
        total_vegetarians_by_gender().rename({"Gender": "Gender!"}), dim=["Gender!"]
    )


@component.add(
    name="Total Meat Eaters",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_meat_eaters_by_gender": 1},
)
def total_meat_eaters():
    return sum(
        total_meat_eaters_by_gender().rename({"Gender": "Gender!"}), dim=["Gender!"]
    )


@component.add(
    name="Year Period", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def year_period():
    return 1


@component.add(
    name="Mean Years of Schooling OLD",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_duration_in_primary": 1,
        "total_duration_in_secondary": 1,
        "total_duration_in_tertiary": 1,
        "population_cohorts": 1,
    },
)
def mean_years_of_schooling_old():
    return (
        total_duration_in_primary()
        + total_duration_in_secondary()
        + total_duration_in_tertiary()
    ) / sum(
        population_cohorts()
        .loc[:, _subscript_dict["MYS"]]
        .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
        dim=["Gender!", "MYS!"],
    )


@component.add(
    name="Average Primary Education Duration",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_primary_education_duration():
    """
    https://data.worldbank.org/indicator/SE.PRM.DURS
    """
    return 6


@component.add(
    name="Average Primary Education Ratio",
    units="Dmnl",
    subscripts=["Gender", "PrimaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"primary_education_graduates": 1, "population_cohorts": 1},
)
def average_primary_education_ratio():
    return primary_education_graduates().loc[
        :, _subscript_dict["PrimaryEdCohorts"]
    ].rename({"Cohorts": "PrimaryEdCohorts"}) / population_cohorts().loc[
        :, _subscript_dict["PrimaryEdCohorts"]
    ].rename(
        {"Cohorts": "PrimaryEdCohorts"}
    )


@component.add(
    name="Average Secondary Education Level",
    units="Dmnl",
    subscripts=["Gender", "SecondaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"secondary_education_graduates": 1, "population_cohorts": 1},
)
def average_secondary_education_level():
    return secondary_education_graduates().loc[
        :, _subscript_dict["SecondaryEdCohorts"]
    ].rename({"Cohorts": "SecondaryEdCohorts"}) / population_cohorts().loc[
        :, _subscript_dict["SecondaryEdCohorts"]
    ].rename(
        {"Cohorts": "SecondaryEdCohorts"}
    )


@component.add(
    name="Average Tertiary Education Duration",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_tertiary_education_duration():
    return 4


@component.add(
    name="Average Tertiary Education Level",
    units="Dmnl",
    subscripts=["Gender", "TertiaryEdCohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates": 1, "population_cohorts": 1},
)
def average_tertiary_education_level():
    return tertiary_education_graduates().loc[
        :, _subscript_dict["TertiaryEdCohorts"]
    ].rename({"Cohorts": "TertiaryEdCohorts"}) / population_cohorts().loc[
        :, _subscript_dict["TertiaryEdCohorts"]
    ].rename(
        {"Cohorts": "TertiaryEdCohorts"}
    )


@component.add(
    name="Initial Tertiary Education Graduates",
    units="People",
    subscripts=["Gender", "TertiaryEdCohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_tertiary_education_graduates():
    """
    Felix Model Initial Values
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "TertiaryEdCohorts": _subscript_dict["TertiaryEdCohorts"],
        },
        ["Gender", "TertiaryEdCohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                3.97968e06,
                3.39040e06,
                2.88838e06,
                2.39908e06,
                1.93620e06,
                1.51282e06,
                1.13989e06,
                8.24941e05,
                5.43881e05,
                2.87866e05,
                1.30966e05,
                5.04676e04,
                1.78297e04,
                4.82465e03,
                1.30585e03,
                2.97344e02,
                6.02910e01,
            ]
        ],
        {"Gender": ["male"], "TertiaryEdCohorts": _subscript_dict["TertiaryEdCohorts"]},
        ["Gender", "TertiaryEdCohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                3.42812e06,
                2.92051e06,
                2.48807e06,
                2.06658e06,
                1.66786e06,
                1.30315e06,
                9.81912e05,
                7.10608e05,
                4.68502e05,
                2.47970e05,
                1.12815e05,
                4.34739e04,
                1.53578e04,
                4.15596e03,
                1.12497e03,
                2.56237e02,
                5.20695e01,
            ]
        ],
        {
            "Gender": ["female"],
            "TertiaryEdCohorts": _subscript_dict["TertiaryEdCohorts"],
        },
        ["Gender", "TertiaryEdCohorts"],
    ).values
    return value


@component.add(
    name="Primary Education Graduates by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"primary_education_graduates": 1},
)
def primary_education_graduates_by_gender():
    return sum(
        primary_education_graduates()
        .loc[:, _subscript_dict["PrimaryEdCohorts"]]
        .rename({"Cohorts": "PrimaryEdCohorts!"}),
        dim=["PrimaryEdCohorts!"],
    )


@component.add(
    name="Maturation Rate",
    units="People/Year",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1, "interval_duration": 1},
)
def maturation_rate():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, _subscript_dict["AllButOldest"]] = (
        population_cohorts()
        .loc[:, _subscript_dict["AllButOldest"]]
        .rename({"Cohorts": "AllButOldest"})
        / interval_duration()
    ).values
    value.loc[:, ['"100+"']] = 0
    return value


@component.add(
    name="Primary Education",
    units="Person",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"primary_education_graduates": 1},
)
def primary_education():
    return (
        primary_education_graduates()
        .loc[:, _subscript_dict["WorkingAge"]]
        .rename({"Cohorts": "WorkingAge"})
    )


@component.add(
    name="Tertiary Education",
    units="Person",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates": 1},
)
def tertiary_education():
    return (
        tertiary_education_graduates()
        .loc[:, _subscript_dict["WorkingAge"]]
        .rename({"Cohorts": "WorkingAge"})
    )


@component.add(
    name="NonEducated",
    units="Person",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_with_no_or_incomplete_education": 1},
)
def noneducated():
    return (
        population_with_no_or_incomplete_education()
        .loc[:, _subscript_dict["WorkingAge"]]
        .rename({"Cohorts": "WorkingAge"})
    )


@component.add(
    name="Total Birth Rate",
    units="People/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"birth_rate": 1},
)
def total_birth_rate():
    return sum(birth_rate().rename({"Gender": "Gender!"}), dim=["Gender!"])


@component.add(
    name="Population",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_by_gender": 1},
)
def population():
    return sum(population_by_gender().rename({"Gender": "Gender!"}), dim=["Gender!"])


@component.add(
    name="Population by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_cohorts": 1},
)
def population_by_gender():
    return sum(population_cohorts().rename({"Cohorts": "Cohorts!"}), dim=["Cohorts!"])


@component.add(
    name="Population with No or Incomplete Education",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "population_cohorts": 5,
        "primary_education_graduates": 3,
        "secondary_education_graduates": 2,
        "tertiary_education_graduates": 1,
    },
)
def population_with_no_or_incomplete_education():
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[:, _subscript_dict["TertiaryEdCohorts"]] = np.maximum(
        0,
        population_cohorts()
        .loc[:, _subscript_dict["TertiaryEdCohorts"]]
        .rename({"Cohorts": "TertiaryEdCohorts"})
        - primary_education_graduates()
        .loc[:, _subscript_dict["TertiaryEdCohorts"]]
        .rename({"Cohorts": "TertiaryEdCohorts"})
        - secondary_education_graduates()
        .loc[:, _subscript_dict["TertiaryEdCohorts"]]
        .rename({"Cohorts": "TertiaryEdCohorts"})
        - tertiary_education_graduates()
        .loc[:, _subscript_dict["TertiaryEdCohorts"]]
        .rename({"Cohorts": "TertiaryEdCohorts"}),
    ).values
    value.loc[:, ['"15-19"']] = (
        np.maximum(
            0,
            population_cohorts().loc[:, '"15-19"'].reset_coords(drop=True)
            - primary_education_graduates().loc[:, '"15-19"'].reset_coords(drop=True)
            - secondary_education_graduates().loc[:, '"15-19"'].reset_coords(drop=True),
        )
        .expand_dims({"SchoolEnrollment": ['"15-19"']}, 1)
        .values
    )
    value.loc[:, ['"10-14"']] = (
        np.maximum(
            0,
            population_cohorts().loc[:, '"10-14"'].reset_coords(drop=True)
            - primary_education_graduates().loc[:, '"10-14"'].reset_coords(drop=True),
        )
        .expand_dims({"SchoolEnrollment": ['"10-14"']}, 1)
        .values
    )
    value.loc[:, ['"0-4"']] = (
        np.maximum(0, population_cohorts().loc[:, '"0-4"'].reset_coords(drop=True))
        .expand_dims({'"0 to 19"': ['"0-4"']}, 1)
        .values
    )
    value.loc[:, ['"5-9"']] = (
        population_cohorts()
        .loc[:, '"5-9"']
        .reset_coords(drop=True)
        .expand_dims({"SchoolEnrollment": ['"5-9"']}, 1)
        .values
    )
    return value


@component.add(
    name="Total Tertiary Education Graduates",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates_by_gender": 1},
)
def total_tertiary_education_graduates():
    return sum(
        tertiary_education_graduates_by_gender().rename({"Gender": "Gender!"}),
        dim=["Gender!"],
    )


@component.add(
    name="Reproductive Lifetime",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reproductive_lifetime():
    return 35


@component.add(
    name="Secondary Education",
    units="Person",
    subscripts=["Gender", "WorkingAge"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"secondary_education_graduates": 1},
)
def secondary_education():
    return (
        secondary_education_graduates()
        .loc[:, _subscript_dict["WorkingAge"]]
        .rename({"Cohorts": "WorkingAge"})
    )


@component.add(
    name="Secondary Education Graduates by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"secondary_education_graduates": 1},
)
def secondary_education_graduates_by_gender():
    return sum(
        secondary_education_graduates()
        .loc[:, _subscript_dict["SecondaryEdCohorts"]]
        .rename({"Cohorts": "SecondaryEdCohorts!"}),
        dim=["SecondaryEdCohorts!"],
    )


@component.add(
    name="Total Duration in Tertiary",
    units="Person*Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "tertiary_education_graduates": 1,
        "average_secondary_education_duration": 1,
        "average_tertiary_education_duration": 1,
        "average_primary_education_duration": 1,
    },
)
def total_duration_in_tertiary():
    return sum(
        tertiary_education_graduates()
        .loc[:, _subscript_dict["MYS"]]
        .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
        dim=["Gender!", "MYS!"],
    ) * (
        average_primary_education_duration()
        + average_secondary_education_duration()
        + average_tertiary_education_duration()
    )


@component.add(
    name="Initial Primary Education Graduates",
    units="People",
    subscripts=["Gender", "PrimaryEdCohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_primary_education_graduates():
    """
    Felix Model Initial Values
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "PrimaryEdCohorts": _subscript_dict["PrimaryEdCohorts"],
        },
        ["Gender", "PrimaryEdCohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                3.02875e07,
                2.69008e07,
                2.34331e07,
                1.99633e07,
                1.70073e07,
                1.41262e07,
                1.14007e07,
                8.90774e06,
                6.71190e06,
                4.85740e06,
                3.20247e06,
                1.69500e06,
                7.71153e05,
                2.97165e05,
                1.04982e05,
                2.84121e04,
                7.68984e03,
                1.74844e03,
                3.56265e02,
            ]
        ],
        {"Gender": ["male"], "PrimaryEdCohorts": _subscript_dict["PrimaryEdCohorts"]},
        ["Gender", "PrimaryEdCohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                2.08719e07,
                1.85380e07,
                1.61483e07,
                1.37572e07,
                1.17201e07,
                9.73473e06,
                7.85653e06,
                6.13855e06,
                4.62534e06,
                3.34736e06,
                2.20690e06,
                1.16807e06,
                5.31421e05,
                2.04784e05,
                7.23464e04,
                1.95795e04,
                5.29875e03,
                1.20582e03,
                2.45275e02,
            ]
        ],
        {"Gender": ["female"], "PrimaryEdCohorts": _subscript_dict["PrimaryEdCohorts"]},
        ["Gender", "PrimaryEdCohorts"],
    ).values
    return value


@component.add(
    name="Interval duration", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def interval_duration():
    return 5


@component.add(
    name="Total Duration in Primary",
    units="Person*Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "primary_education_graduates": 1,
        "average_primary_education_duration": 1,
    },
)
def total_duration_in_primary():
    """
    sum(Primary Education Graduates[Gender!, "25-29"])*Years of Edu in Primary
    """
    return (
        sum(
            primary_education_graduates()
            .loc[:, _subscript_dict["MYS"]]
            .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
            dim=["Gender!", "MYS!"],
        )
        * average_primary_education_duration()
    )


@component.add(
    name="Total Duration in Secondary",
    units="Person*Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "secondary_education_graduates": 1,
        "average_secondary_education_duration": 1,
        "average_primary_education_duration": 1,
    },
)
def total_duration_in_secondary():
    return sum(
        secondary_education_graduates()
        .loc[:, _subscript_dict["MYS"]]
        .rename({"Gender": "Gender!", "Cohorts": "MYS!"}),
        dim=["Gender!", "MYS!"],
    ) * (average_primary_education_duration() + average_secondary_education_duration())


@component.add(
    name="Total Population with No or Incomplete Education",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_population_with_no_or_incomplete_education_by_gender": 1},
)
def total_population_with_no_or_incomplete_education():
    return sum(
        total_population_with_no_or_incomplete_education_by_gender().rename(
            {"Gender": "Gender!"}
        ),
        dim=["Gender!"],
    )


@component.add(
    name="Total Population with No or Incomplete Education by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"population_with_no_or_incomplete_education": 1},
)
def total_population_with_no_or_incomplete_education_by_gender():
    return sum(
        population_with_no_or_incomplete_education().rename({"Cohorts": "Cohorts!"}),
        dim=["Cohorts!"],
    )


@component.add(
    name="Total Secondary Education Graduates",
    units="People",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"secondary_education_graduates_by_gender": 1},
)
def total_secondary_education_graduates():
    return sum(
        secondary_education_graduates_by_gender().rename({"Gender": "Gender!"}),
        dim=["Gender!"],
    )


@component.add(
    name="Initial Population",
    units="People",
    subscripts=["Gender", "Cohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_population():
    """
    Population values in year 1900. Taken fro mthe previous version of the Felix.
    """
    value = xr.DataArray(
        np.nan,
        {"Gender": _subscript_dict["Gender"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                1.18790e08,
                1.03477e08,
                9.19065e07,
                8.16297e07,
                7.11071e07,
                6.05781e07,
                5.16081e07,
                4.28656e07,
                3.45952e07,
                2.70303e07,
                2.03671e07,
                1.47396e07,
                9.71780e06,
                5.14344e06,
                2.34004e06,
                9.01739e05,
                3.18566e05,
                8.62150e04,
                2.33330e04,
                5.30700e03,
                1.07900e03,
            ]
        ],
        {"Gender": ["male"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                1.17500e08,
                1.02353e08,
                9.09085e07,
                8.07433e07,
                7.03349e07,
                5.99202e07,
                5.10477e07,
                4.24001e07,
                3.42195e07,
                2.67368e07,
                2.01459e07,
                1.45796e07,
                9.61227e06,
                5.08759e06,
                2.31463e06,
                8.91947e05,
                3.15106e05,
                8.52790e04,
                2.30800e04,
                5.24900e03,
                1.06800e03,
            ]
        ],
        {"Gender": ["female"], "Cohorts": _subscript_dict["Cohorts"]},
        ["Gender", "Cohorts"],
    ).values
    return value


@component.add(
    name="Initial Secondary Education Graduates",
    units="People",
    subscripts=["Gender", "SecondaryEdCohorts"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_secondary_education_graduates():
    """
    Estimated wrt 37% of world population having min primary aducation in 1900
    """
    value = xr.DataArray(
        np.nan,
        {
            "Gender": _subscript_dict["Gender"],
            "SecondaryEdCohorts": _subscript_dict["SecondaryEdCohorts"],
        },
        ["Gender", "SecondaryEdCohorts"],
    )
    value.loc[["male"], :] = xr.DataArray(
        [
            [
                2.28430e07,
                1.98984e07,
                1.69520e07,
                1.44419e07,
                1.19954e07,
                9.68102e06,
                7.56408e06,
                5.69947e06,
                4.12470e06,
                2.71940e06,
                1.43933e06,
                6.54831e05,
                2.52341e05,
                8.91470e04,
                2.41260e04,
                6.52924e03,
                1.48535e03,
                3.01455e02,
            ]
        ],
        {
            "Gender": ["male"],
            "SecondaryEdCohorts": _subscript_dict["SecondaryEdCohorts"],
        },
        ["Gender", "SecondaryEdCohorts"],
    ).values
    value.loc[["female"], :] = xr.DataArray(
        [
            [
                1.96771e07,
                1.71406e07,
                1.46026e07,
                1.24403e07,
                1.03329e07,
                8.33930e06,
                6.51575e06,
                4.90956e06,
                3.55304e06,
                2.34251e06,
                1.23985e06,
                5.64077e05,
                2.17368e05,
                7.67915e04,
                2.07826e04,
                5.62487e03,
                1.27981e03,
                2.60347e02,
            ]
        ],
        {
            "Gender": ["female"],
            "SecondaryEdCohorts": _subscript_dict["SecondaryEdCohorts"],
        },
        ["Gender", "SecondaryEdCohorts"],
    ).values
    return value


@component.add(
    name="Total Death Rate",
    units="People/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"death_rate": 1},
)
def total_death_rate():
    return sum(
        death_rate().rename({"Gender": "Gender!", "Cohorts": "Cohorts!"}),
        dim=["Gender!", "Cohorts!"],
    )


@component.add(
    name="Tertiary Education Graduates by Gender",
    units="People",
    subscripts=["Gender"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"tertiary_education_graduates": 1},
)
def tertiary_education_graduates_by_gender():
    return sum(
        tertiary_education_graduates()
        .loc[:, _subscript_dict["TertiaryEdCohorts"]]
        .rename({"Cohorts": "TertiaryEdCohorts!"}),
        dim=["TertiaryEdCohorts!"],
    )


@component.add(
    name="Change Rate Finish16",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start16": 1, "ramp_period16": 1},
)
def change_rate_finish16():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start16() + ramp_period16()


@component.add(
    name="Initial Change Rate16",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate16():
    """
    Initial Educational Attainment Change Rate
    """
    return 3


@component.add(
    name="Change Rate Start16",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start16": 1},
)
def change_rate_start16():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start16()


@component.add(
    name="Change Rate Slope16",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate16": 1,
        "initial_change_rate16": 1,
        "ramp_period16": 1,
    },
)
def change_rate_slope16():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        float(np.abs(final_change_rate16() - initial_change_rate16())) / ramp_period16()
    )


@component.add(name="Ramp Start16", comp_type="Constant", comp_subtype="Normal")
def ramp_start16():
    return 2020


@component.add(
    name="Ramp Period4", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period4():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Ramp Period5", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period5():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Initial Change Rate1",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate1():
    """
    Initial Educational Attainment Change Rate
    """
    return 4.17e-07


@component.add(
    name="Initial Change Rate10",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate10():
    """
    Initial Educational Attainment Change Rate
    """
    return 3000000000000.0


@component.add(
    name="Initial Change Rate11",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate11():
    """
    Initial Educational Attainment Change Rate
    """
    return 140


@component.add(
    name="Initial Change Rate12",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate12():
    """
    Initial Educational Attainment Change Rate
    """
    return 0.1


@component.add(
    name="Initial Change Rate13",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate13():
    """
    Initial Educational Attainment Change Rate
    """
    return 50000000.0


@component.add(
    name="Initial Change Rate14",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate14():
    """
    Initial Educational Attainment Change Rate
    """
    return 40


@component.add(
    name="Initial Change Rate15",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate15():
    """
    Initial Educational Attainment Change Rate
    """
    return 12


@component.add(
    name="Initial Change Rate2",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate2():
    """
    Initial Educational Attainment Change Rate
    """
    return 1


@component.add(
    name="Initial Change Rate3",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate3():
    """
    Initial Educational Attainment Change Rate
    """
    return 0.009


@component.add(
    name="Change Rate Finish1",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start1": 1, "ramp_period1": 1},
)
def change_rate_finish1():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start1() + ramp_period1()


@component.add(
    name="Change Rate Finish10",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start10": 1, "ramp_period10": 1},
)
def change_rate_finish10():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start10() + ramp_period10()


@component.add(
    name="Change Rate Finish11",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start11": 1, "ramp_period11": 1},
)
def change_rate_finish11():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start11() + ramp_period11()


@component.add(
    name="Change Rate Finish12",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start12": 1, "ramp_period12": 1},
)
def change_rate_finish12():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start12() + ramp_period12()


@component.add(
    name="Change Rate Finish13",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start13": 1, "ramp_period13": 1},
)
def change_rate_finish13():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start13() + ramp_period13()


@component.add(
    name="Change Rate Finish14",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start14": 1, "ramp_period14": 1},
)
def change_rate_finish14():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start14() + ramp_period14()


@component.add(
    name="Change Rate Finish15",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start15": 1, "ramp_period15": 1},
)
def change_rate_finish15():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start15() + ramp_period15()


@component.add(
    name="Change Rate Finish2",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start2": 1, "ramp_period2": 1},
)
def change_rate_finish2():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start2() + ramp_period2()


@component.add(
    name="Change Rate Finish3",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start3": 1, "ramp_period3": 1},
)
def change_rate_finish3():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start3() + ramp_period3()


@component.add(
    name="Change Rate Finish4",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start4": 1, "ramp_period4": 1},
)
def change_rate_finish4():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start4() + ramp_period4()


@component.add(
    name="Change Rate Finish5",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start5": 1, "ramp_period5": 1},
)
def change_rate_finish5():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start5() + ramp_period5()


@component.add(
    name="Change Rate Finish6",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start6": 1, "ramp_period6": 1},
)
def change_rate_finish6():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start6() + ramp_period6()


@component.add(
    name="Change Rate Finish7",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start7": 1, "ramp_period7": 1},
)
def change_rate_finish7():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start7() + ramp_period7()


@component.add(
    name="Change Rate Finish8",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start8": 1, "ramp_period8": 1},
)
def change_rate_finish8():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start8() + ramp_period8()


@component.add(
    name="Change Rate Finish9",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start9": 1, "ramp_period9": 1},
)
def change_rate_finish9():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start9() + ramp_period9()


@component.add(
    name="Change Rate Slope1",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate1": 1, "initial_change_rate1": 1, "ramp_period1": 1},
)
def change_rate_slope1():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate1() - initial_change_rate1())) / ramp_period1()


@component.add(
    name="Change Rate Slope10",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate10": 1,
        "initial_change_rate10": 1,
        "ramp_period10": 1,
    },
)
def change_rate_slope10():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (final_change_rate10() - initial_change_rate10()) / ramp_period10()


@component.add(
    name="Change Rate Slope11",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate11": 1,
        "initial_change_rate11": 1,
        "ramp_period11": 1,
    },
)
def change_rate_slope11():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (final_change_rate11() - initial_change_rate11()) / ramp_period11()


@component.add(
    name="Change Rate Slope12",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate12": 1,
        "initial_change_rate12": 1,
        "ramp_period12": 1,
    },
)
def change_rate_slope12():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        float(np.abs(final_change_rate12() - initial_change_rate12())) / ramp_period12()
    )


@component.add(
    name="Change Rate Slope13",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate13": 1,
        "initial_change_rate13": 1,
        "ramp_period13": 1,
    },
)
def change_rate_slope13():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (final_change_rate13() - initial_change_rate13()) / ramp_period13()


@component.add(
    name="Change Rate Slope14",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate14": 1,
        "initial_change_rate14": 1,
        "ramp_period14": 1,
    },
)
def change_rate_slope14():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (final_change_rate14() - initial_change_rate14()) / ramp_period14()


@component.add(
    name="Change Rate Slope15",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_change_rate15": 1,
        "initial_change_rate15": 1,
        "ramp_period15": 1,
    },
)
def change_rate_slope15():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (final_change_rate15() - initial_change_rate15()) / ramp_period15()


@component.add(
    name="Change Rate Slope2",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate2": 1, "initial_change_rate2": 1, "ramp_period2": 1},
)
def change_rate_slope2():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate2() - initial_change_rate2())) / ramp_period2()


@component.add(
    name="Change Rate Slope3",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate3": 1, "initial_change_rate3": 1, "ramp_period3": 1},
)
def change_rate_slope3():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate3() - initial_change_rate3())) / ramp_period3()


@component.add(
    name="Change Rate Slope4",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reduced_carbon_emissions_of_oil": 1,
        "normal_carbon_emissions_of_oil": 1,
        "ramp_period4": 1,
    },
)
def change_rate_slope4():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        reduced_carbon_emissions_of_oil() - normal_carbon_emissions_of_oil()
    ) / ramp_period4()


@component.add(
    name="Change Rate Slope5",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reduced_c_emissions_of_gas": 1,
        "normal_carbon_emissions_of_gas": 1,
        "ramp_period5": 1,
    },
)
def change_rate_slope5():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        reduced_c_emissions_of_gas() - normal_carbon_emissions_of_gas()
    ) / ramp_period5()


@component.add(
    name="Change Rate Slope6",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reduced_c_emissions_of_coal": 1,
        "normal_carbon_emissions_of_coal": 1,
        "ramp_period6": 1,
    },
)
def change_rate_slope6():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return (
        reduced_c_emissions_of_coal() - normal_carbon_emissions_of_coal()
    ) / ramp_period6()


@component.add(
    name="Change Rate Slope7",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate7": 1, "initial_change_rate7": 1, "ramp_period7": 1},
)
def change_rate_slope7():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate7() - initial_change_rate7())) / ramp_period7()


@component.add(
    name="Change Rate Slope8",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate8": 1, "initial_change_rate8": 1, "ramp_period8": 1},
)
def change_rate_slope8():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate8() - initial_change_rate8())) / ramp_period8()


@component.add(
    name="Change Rate Slope9",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate9": 1, "initial_change_rate9": 1, "ramp_period9": 1},
)
def change_rate_slope9():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate9() - initial_change_rate9())) / ramp_period9()


@component.add(
    name="Ramp Period9", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period9():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Change Rate Start1",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start1": 1},
)
def change_rate_start1():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start1()


@component.add(
    name="Change Rate Start10",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start10": 1},
)
def change_rate_start10():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start10()


@component.add(
    name="Change Rate Start11",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start11": 1},
)
def change_rate_start11():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start11()


@component.add(
    name="Change Rate Start12",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start12": 1},
)
def change_rate_start12():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start12()


@component.add(
    name="Change Rate Start13",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start13": 1},
)
def change_rate_start13():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start13()


@component.add(
    name="Change Rate Start14",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start14": 1},
)
def change_rate_start14():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start14()


@component.add(
    name="Change Rate Start15",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start15": 1},
)
def change_rate_start15():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start15()


@component.add(
    name="Change Rate Start2",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start2": 1},
)
def change_rate_start2():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start2()


@component.add(
    name="Change Rate Start3",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start3": 1},
)
def change_rate_start3():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start3()


@component.add(
    name="Change Rate Start4",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start4": 1},
)
def change_rate_start4():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start4()


@component.add(
    name="Change Rate Start5",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start5": 1},
)
def change_rate_start5():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start5()


@component.add(
    name="Change Rate Start6",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start6": 1},
)
def change_rate_start6():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start6()


@component.add(
    name="Change Rate Start7",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start7": 1},
)
def change_rate_start7():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start7()


@component.add(
    name="Change Rate Start8",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start8": 1},
)
def change_rate_start8():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start8()


@component.add(
    name="Change Rate Start9",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start9": 1},
)
def change_rate_start9():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start9()


@component.add(name="Ramp Start10", comp_type="Constant", comp_subtype="Normal")
def ramp_start10():
    return 2020


@component.add(
    name="Ramp Period10", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period10():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Ramp Period11", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period11():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Ramp Period12", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period12():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(name="Ramp Start7", comp_type="Constant", comp_subtype="Normal")
def ramp_start7():
    return 2020


@component.add(name="Ramp Start8", comp_type="Constant", comp_subtype="Normal")
def ramp_start8():
    return 2020


@component.add(
    name="Ramp Period6", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period6():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Final Change Rate9",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate9():
    """
    Final Educational Attainment Change Rate
    """
    return 40


@component.add(name="Ramp Start1", comp_type="Constant", comp_subtype="Normal")
def ramp_start1():
    return 2020


@component.add(name="Ramp Start5", comp_type="Constant", comp_subtype="Normal")
def ramp_start5():
    return 2020


@component.add(name="Ramp Start11", comp_type="Constant", comp_subtype="Normal")
def ramp_start11():
    return 2020


@component.add(name="Ramp Start12", comp_type="Constant", comp_subtype="Normal")
def ramp_start12():
    return 2020


@component.add(
    name="Normal Carbon Emissions of Oil",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_carbon_emissions_of_oil():
    """
    Felix1: 836500 IPCC: 9.04814e+006 co2
    """
    return 836500


@component.add(
    name="Normal Carbon Emissions of Gas",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_carbon_emissions_of_gas():
    """
    Felix1: 1.08e+006 IPCC: med: 5.6987e+006 min:4768300 Felix Brian: 640000
    """
    return 640000


@component.add(
    name="Normal Carbon Emissions of Coal",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_carbon_emissions_of_coal():
    """
    Felix1: 640000 IPCC: med: 9.5366e+006 min:8606200 Brian Felix 1.08e+006
    """
    return 1080000.0


@component.add(
    name="Initial Change Rate7",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate7():
    """
    Initial Educational Attainment Change Rate
    """
    return 1.2


@component.add(
    name="Initial Change Rate8",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate8():
    """
    Initial Educational Attainment Change Rate
    """
    return 7


@component.add(
    name="Initial Change Rate9",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate9():
    """
    Initial Educational Attainment Change Rate
    """
    return 30


@component.add(name="Ramp Start6", comp_type="Constant", comp_subtype="Normal")
def ramp_start6():
    return 2020


@component.add(name="Ramp Start9", comp_type="Constant", comp_subtype="Normal")
def ramp_start9():
    return 2020


@component.add(
    name="Reduced C Emissions of Coal",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reduced_c_emissions_of_coal():
    """
    64000
    """
    return 953660


@component.add(
    name="Final Change Rate12",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate12():
    """
    Final Educational Attainment Change Rate
    """
    return 0.2


@component.add(name="Ramp Start3", comp_type="Constant", comp_subtype="Normal")
def ramp_start3():
    return 2020


@component.add(
    name="Solar Conversion Efficiency Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable2_solar": 1},
)
def solar_conversion_efficiency_factor():
    return variable2_solar()


@component.add(
    name="Final Change Rate11",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate11():
    """
    Final Educational Attainment Change Rate
    """
    return 120


@component.add(name="Ramp Start2", comp_type="Constant", comp_subtype="Normal")
def ramp_start2():
    return 2020


@component.add(
    name="Reduced Carbon Emissions of Oil",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reduced_carbon_emissions_of_oil():
    """
    83650
    """
    return 904814


@component.add(name="Ramp Start15", comp_type="Constant", comp_subtype="Normal")
def ramp_start15():
    return 2020


@component.add(
    name="Reduced C Emissions of Gas",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reduced_c_emissions_of_gas():
    """
    Erlier Felix;108000
    """
    return 569870


@component.add(
    name="Final Change Rate10",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate10():
    """
    Final Educational Attainment Change Rate
    """
    return 2000000000000.0


@component.add(name="Ramp Start14", comp_type="Constant", comp_subtype="Normal")
def ramp_start14():
    return 2020


@component.add(name="Ramp Start4", comp_type="Constant", comp_subtype="Normal")
def ramp_start4():
    return 2020


@component.add(name="Ramp Start13", comp_type="Constant", comp_subtype="Normal")
def ramp_start13():
    return 2020


@component.add(
    name="Change Rate Slope",
    units="1/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_change_rate": 1, "initial_change_rate": 1, "ramp_period": 1},
)
def change_rate_slope():
    """
    Intensity of Educational Attainment Change Rate.
    """
    return float(np.abs(final_change_rate() - initial_change_rate())) / ramp_period()


@component.add(
    name="Variable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_change_rate": 1,
        "change_rate_slope": 1,
        "change_rate_finish": 1,
        "change_rate_start": 1,
        "time": 1,
    },
)
def variable():
    """
    Educational Attainment Change Rate.
    """
    return initial_change_rate() + ramp(
        __data["time"], change_rate_slope(), change_rate_start(), change_rate_finish()
    )


@component.add(
    name="Final Change Rate",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def final_change_rate():
    """
    Final Educational Attainment Change Rate
    """
    return 2


@component.add(
    name="Change Rate Finish",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start": 1, "ramp_period": 1},
)
def change_rate_finish():
    """
    End of fractional investments in Educational Attainment.
    """
    return ramp_start() + ramp_period()


@component.add(name="Ramp Start", comp_type="Constant", comp_subtype="Normal")
def ramp_start():
    return 2020


@component.add(
    name="Change Rate Start",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ramp_start": 1},
)
def change_rate_start():
    """
    Start of increased investments in Educational Attainment.
    """
    return ramp_start()


@component.add(
    name="Initial Change Rate",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_change_rate():
    """
    Initial Educational Attainment Change Rate
    """
    return 1


@component.add(
    name="Ramp Period", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def ramp_period():
    """
    Period of increasing investments in Educational Attainment.
    """
    return 50


@component.add(
    name="Net Capital Change Rate",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"net_capital_change": 1},
)
def net_capital_change_rate():
    """
    Net Capital Stock change rate.
    """
    return net_capital_change()


@component.add(
    name="Capital",
    units="$",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_capital": 1},
    other_deps={
        "_integ_capital": {
            "initial": {"init_capital": 1},
            "step": {"net_capital_change_rate": 1},
        }
    },
)
def capital():
    """
    Capital stock. Source of historical data: http://www.ggdc.net/MADDISON/oriindex.htm
    """
    return _integ_capital()


_integ_capital = Integ(
    lambda: net_capital_change_rate(), lambda: init_capital(), "_integ_capital"
)


@component.add(
    name="GWP per Capita",
    units="$/(Person*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gross_world_product": 1, "population": 1},
)
def gwp_per_capita():
    return gross_world_product() / population()


@component.add(
    name="Net Capital Change",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"net_energy_capital_change": 1, "other_capital_change": 1},
)
def net_capital_change():
    """
    Net capital change.
    """
    return net_energy_capital_change() + other_capital_change()


@component.add(
    name="Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_technology": 1, "other_technologies": 1},
)
def technology():
    """
    Total factor productivity.
    """
    return energy_technology() + other_technologies()


@component.add(
    name="INIT Capital", units="$", comp_type="Constant", comp_subtype="Normal"
)
def init_capital():
    """
    Initial Capital Stock.
    """
    return 1300000000000.0


@component.add(
    name="Output in 1900", units="$/Year", comp_type="Constant", comp_subtype="Normal"
)
def output_in_1900():
    return 1300000000000.0


@component.add(
    name="Impact of GDP on Fertility Inflection",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_gdp_on_fertility_inflection():
    """
    A parameter determining the inflection point of the nonlinear function representing the impact of population wealth on fertility.5.5
    """
    return 2.00035


@component.add(
    name="Impact of GDP on Fertility Steepness",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_gdp_on_fertility_steepness():
    """
    A parameter determining the isteepness of the nonlinear function representing the impact of population wealth on fertility.
    """
    return 0.3


@component.add(
    name="Impact of Water Quality on Health",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"quality_of_domestic_water": 1},
)
def impact_of_water_quality_on_health():
    """
    Impact of changes in water quality on health.
    """
    return quality_of_domestic_water()


@component.add(
    name="Lifetime Multiplier from Food",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"impact_of_food_on_life_expectancy": 1},
)
def lifetime_multiplier_from_food():
    """
    Multiplier to account for changes in life expectancy due to food availability.
    """
    return impact_of_food_on_life_expectancy()


@component.add(
    name="Lifetime Multiplier from Health Services",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_wealth_on_health": 1,
        "impact_of_biodiversity_on_health": 1,
        "impact_of_water_quality_on_health": 1,
    },
)
def lifetime_multiplier_from_health_services():
    """
    Multiplier to account for changes in life expectancy due to health factors related to biodiversity, health services and water quality.
    """
    return (
        impact_of_wealth_on_health()
        * impact_of_biodiversity_on_health()
        * impact_of_water_quality_on_health()
    )


@component.add(
    name="MIN Fertility", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def min_fertility():
    """
    The minimal level of the fertility. Logically set to 1 child.
    """
    return 1


@component.add(
    name="GDP per Capita 2000",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def gdp_per_capita_2000():
    return 6576


@component.add(
    name="Impact of Biodiversity on Health",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_impact_of_biodiversity_on_health": 2,
        "mean_species_abundance": 1,
        "max_impact_of_biodiversity_on_health": 1,
        "init_species_abundance": 1,
    },
)
def impact_of_biodiversity_on_health():
    """
    Impact of changes in biodiversity on health. Scaled between minimum and maximum impact.
    """
    return min_impact_of_biodiversity_on_health() + (
        max_impact_of_biodiversity_on_health() - min_impact_of_biodiversity_on_health()
    ) * (mean_species_abundance() / init_species_abundance())


@component.add(
    name="Health Impact Delay",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def health_impact_delay():
    """
    Time delay to account for impact of health services on life expectancy.
    """
    return 1


@component.add(
    name="Impact of Fertilizer Consumption on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biodiversity_impact_fertilizer_consumption_scale": 1,
        "biodiversity_impact_reference_fertilizer_consumption": 1,
        "total_fertilizer_runoff_and_leaching": 1,
        "biodiversity_impact_fertilizer_consumption_nonlinearity": 1,
    },
)
def impact_of_fertilizer_consumption_on_biodiversity():
    """
    Nonlinear function representing impact of fertilization practices on species carrying capacity.
    """
    return 1 / (
        1
        + biodiversity_impact_fertilizer_consumption_scale()
        * (
            total_fertilizer_runoff_and_leaching()
            / biodiversity_impact_reference_fertilizer_consumption()
        )
        ** biodiversity_impact_fertilizer_consumption_nonlinearity()
    )


@component.add(
    name="Impact of Agricultural Land Changes on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "init_agricultural_land": 1,
        "impact_of_agricultural_land_changes_on_biodiversity_elasticity": 1,
    },
)
def impact_of_agricultural_land_changes_on_biodiversity():
    """
    Nonlinear function representing impact of agricultural land use change on species carrying capacity.
    """
    return (
        1 / (agricultural_land() / init_agricultural_land())
    ) ** impact_of_agricultural_land_changes_on_biodiversity_elasticity()


@component.add(
    name="Agriculture Biomass Production Land Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "land_allocated_for_energy_crops": 1,
        "land_allocated_for_food_crops": 1,
    },
)
def agriculture_biomass_production_land_ratio():
    """
    Ratio of agricultural land area being used for crops biomass production.
    """
    return land_allocated_for_energy_crops() / land_allocated_for_food_crops()


@component.add(
    name="Biodiversity Impact Reference Fertilizer Consumption",
    units="TonNutrient/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biodiversity_impact_reference_fertilizer_consumption():
    """
    Value against which the fertilization consumption is compared to in order to determine its impact on species carrying capacity.: 4e+008
    """
    return 25000000.0


@component.add(
    name="Species Abundance Realtive to Carrying Capacity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mean_species_abundance": 1, "species_carrying_capacity": 1},
)
def species_abundance_realtive_to_carrying_capacity():
    """
    The ratio of species abundance to carrying capacity determines the fractional regeneration and extinction rates.
    """
    return mean_species_abundance() / species_carrying_capacity()


@component.add(
    name="Species Carrying Capacity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_species_carrying_capacity": 1,
        "impact_of_biomass_production_on_biodiversity": 1,
        "impact_of_climate_damage_on_biodiversity": 1,
        "impact_of_fertilizer_consumption_on_biodiversity": 1,
        "impact_of_land_use_change_on_biodiversity": 1,
    },
)
def species_carrying_capacity():
    """
    The carrying capacity defines the equilibrium or maximum sustainable species population. It is impacted by fertilization, biomas production, climate risk and land use change.
    """
    return (
        reference_species_carrying_capacity()
        * impact_of_biomass_production_on_biodiversity()
        * impact_of_climate_damage_on_biodiversity()
        * impact_of_fertilizer_consumption_on_biodiversity()
        * impact_of_land_use_change_on_biodiversity()
    )


@component.add(
    name="Biodiversity Impact Fertilizer Consumption Scale",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biodiversity_impact_fertilizer_consumption_scale():
    """
    The maximum fractional impact of fertilization practices on species carrying capacity.
    """
    return 0.2


@component.add(
    name="Biodiversity Impact Fertilizer Consumption Nonlinearity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biodiversity_impact_fertilizer_consumption_nonlinearity():
    """
    Elasticity of impact of fertilization consumption on species carrying capacity.
    """
    return 1.5


@component.add(
    name="Impact of Biomass Production on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_agriculture_biomass_production_on_biodiversity": 1,
        "impact_of_forest_biomass_production_on_biodiversity": 1,
    },
)
def impact_of_biomass_production_on_biodiversity():
    """
    Total impact of forest and crops biomass production on species carrying capacity.
    """
    return (
        impact_of_agriculture_biomass_production_on_biodiversity()
        * impact_of_forest_biomass_production_on_biodiversity()
    )


@component.add(
    name="Impact of Agricultural Land Changes on Biodiversity Elasticity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_agricultural_land_changes_on_biodiversity_elasticity():
    """
    Elasticity of impact of agricultural land use change on species carrying capacity.
    """
    return 0.1


@component.add(
    name="Impact of Other Land Changes on Biodiversity Elasticity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_other_land_changes_on_biodiversity_elasticity():
    """
    Elasticity of impact of other land use change on species carrying capacity.
    """
    return 0.1


@component.add(
    name="Impact of Land Use Change on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_agricultural_land_changes_on_biodiversity": 1,
        "impact_of_forest_land_changes_on_biodiversity": 1,
        "impact_of_other_land_changes_on_biodiversity": 1,
    },
)
def impact_of_land_use_change_on_biodiversity():
    """
    Total impact of land use change on species carrying capacity.
    """
    return (
        impact_of_agricultural_land_changes_on_biodiversity()
        * impact_of_forest_land_changes_on_biodiversity()
        * impact_of_other_land_changes_on_biodiversity()
    )


@component.add(
    name="Impact of Other Land Changes on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "other_land": 1,
        "init_other_land": 1,
        "impact_of_other_land_changes_on_biodiversity_elasticity": 1,
    },
)
def impact_of_other_land_changes_on_biodiversity():
    """
    Nonlinear function representing impact of other land use change on species carrying capacity.
    """
    return (
        other_land() / init_other_land()
    ) ** impact_of_other_land_changes_on_biodiversity_elasticity()


@component.add(
    name="Impact of Climate Damage on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biodiversity_impact_climate_damage_scale": 1,
        "biodiversity_impact_reference_temperature": 1,
        "temperature_change_from_preindustrial": 1,
        "biodiversity_impact_climate_damage_nonlinearity": 1,
    },
)
def impact_of_climate_damage_on_biodiversity():
    """
    Nonlinear function representing impact of climate risk on species carrying capacity.
    """
    return 1 / (
        1
        + biodiversity_impact_climate_damage_scale()
        * (
            temperature_change_from_preindustrial()
            / biodiversity_impact_reference_temperature()
        )
        ** biodiversity_impact_climate_damage_nonlinearity()
    )


@component.add(
    name="Impact of Forest Land Changes on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land": 1,
        "init_forest_land": 1,
        "impact_of_forest_land_changes_on_biodiversity_elasticity": 1,
    },
)
def impact_of_forest_land_changes_on_biodiversity():
    """
    Nonlinear function representing impact of forest land use change on species carrying capacity.
    """
    return (
        forest_land() / init_forest_land()
    ) ** impact_of_forest_land_changes_on_biodiversity_elasticity()


@component.add(
    name="Impact of Forest Land Changes on Biodiversity Elasticity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_forest_land_changes_on_biodiversity_elasticity():
    """
    Elasticity of impact of forest land use change on species carrying capacity.
    """
    return 0.1


@component.add(
    name="Biodiversity Impact Climate Damage Scale",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biodiversity_impact_climate_damage_scale():
    """
    The maximum fractional impact of climate risk on species carrying capacity.
    """
    return 0.1


@component.add(
    name="Agriculture Biomass Production on Biodiversity Elasticity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agriculture_biomass_production_on_biodiversity_elasticity():
    """
    Elasticity of impact of crops biomass production on species carrying capacity.
    """
    return 2


@component.add(
    name="Forest Biomass Production on Biodiversity Elasticity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_biomass_production_on_biodiversity_elasticity():
    """
    Elasticity of impact of forest biomass production on species carrying capacity.
    """
    return 2


@component.add(
    name="Impact of Forest Biomass Production on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_biomass_production_land_ratio": 1,
        "forest_biomass_production_on_biodiversity_elasticity": 1,
    },
)
def impact_of_forest_biomass_production_on_biodiversity():
    """
    Nonlinear function representing impact of forest biomass production on species carrying capacity.
    """
    return (
        1 - forest_biomass_production_land_ratio()
    ) ** forest_biomass_production_on_biodiversity_elasticity()


@component.add(
    name="Reference Species Carrying Capacity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_species_carrying_capacity():
    """
    Reference species carrying capacity for year 1900.
    """
    return 81


@component.add(
    name="Impact of Agriculture Biomass Production on Biodiversity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agriculture_biomass_production_land_ratio": 1,
        "agriculture_biomass_production_on_biodiversity_elasticity": 1,
    },
)
def impact_of_agriculture_biomass_production_on_biodiversity():
    """
    Nonlinear function representing impact of crops biomass production on species carrying capacity.
    """
    return (
        1 - agriculture_biomass_production_land_ratio()
    ) ** agriculture_biomass_production_on_biodiversity_elasticity()


@component.add(
    name="Forest Biomass Production Land Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"actual_forest_land_harvested": 1, "forest_land": 1},
)
def forest_biomass_production_land_ratio():
    """
    Ratio of forest land area being used for biomass production.
    """
    return actual_forest_land_harvested() / forest_land()


@component.add(
    name="Biodiversity Impact Climate Damage Nonlinearity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biodiversity_impact_climate_damage_nonlinearity():
    """
    Elasticity of impact of climate risk on species carrying capacity.
    """
    return 1.5


@component.add(
    name="Biodiversity Impact Reference Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biodiversity_impact_reference_temperature():
    """
    Value against which the temperature anomalies are compared to in order to determine its impact on species carrying capacity.
    """
    return 3


@component.add(
    name="Mean Species Abundance",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mean_species_abundance": 1},
    other_deps={
        "_integ_mean_species_abundance": {
            "initial": {"init_species_abundance": 1},
            "step": {"species_regeneration_rate": 1, "species_extinction_rate": 1},
        }
    },
)
def mean_species_abundance():
    """
    Mean abundance of original species relative to their abundance in undisturbed ecosystems. Source of Historical Data: Secretariat of the Convention for Biological Diversity (CBD), Cross-roads of Life on Earth - Exploring means to meet the 2010 Biodiversity Target, 2007
    """
    return _integ_mean_species_abundance()


_integ_mean_species_abundance = Integ(
    lambda: species_regeneration_rate() - species_extinction_rate(),
    lambda: init_species_abundance(),
    "_integ_mean_species_abundance",
)


@component.add(
    name="INIT Species Abundance",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_species_abundance():
    """
    Mean species abundance in year 1900.
    """
    return 85


@component.add(
    name="Species Extinction Rate",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mean_species_abundance": 1, "species_extinction": 1},
)
def species_extinction_rate():
    """
    Average rate of species extinction.
    """
    return mean_species_abundance() * species_extinction()


@component.add(
    name="Species Regeneration",
    units="Dmnl/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "regeneration_factor": 1,
        "species_abundance_realtive_to_carrying_capacity": 1,
    },
)
def species_regeneration():
    """
    The fractional species regeneration rate is a declining function of the species abundance relative to the carrying capacity. A logistic function is used.
    """
    return regeneration_factor() * (
        1
        - 1
        / (
            1
            + float(
                np.exp(-7 * (species_abundance_realtive_to_carrying_capacity() - 1))
            )
        )
    )


@component.add(
    name="Species Regeneration Rate",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mean_species_abundance": 1, "species_regeneration": 1},
)
def species_regeneration_rate():
    """
    Average rate of species regeneration.
    """
    return mean_species_abundance() * species_regeneration()


@component.add(
    name="Extinction Factor",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def extinction_factor():
    """
    The minimum fractional extinction rate.
    """
    return 0.01


@component.add(
    name="Regeneration Factor",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def regeneration_factor():
    """
    The maximum fractional net regeneration rate.
    """
    return 0.04


@component.add(
    name="Species Extinction",
    units="Dmnl/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extinction_factor": 1,
        "species_abundance_realtive_to_carrying_capacity": 1,
    },
)
def species_extinction():
    """
    The fractional species extinctionrate is an increasing function of the ratio of species abundance carrying capacity. A power function is assumed.
    """
    return extinction_factor() * (
        1 + species_abundance_realtive_to_carrying_capacity() ** 2
    )


@component.add(
    name="Human Development Index",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"health_index": 1, "income_index": 1, "education_index": 1},
)
def human_development_index():
    """
    Human Development Index as an average of three indexes of achievement.
    """
    return (
        health_index() ** (1 / 3)
        * income_index() ** (1 / 3)
        * education_index() ** (1 / 3)
    )


@component.add(
    name="Total Change in Cropland Ecosystem Value",
    units="$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "init_agricultural_land": 1,
        "cropland_ecosystem_value": 1,
    },
)
def total_change_in_cropland_ecosystem_value():
    """
    Total ecosystem value of cropland.
    """
    return (agricultural_land() - init_agricultural_land()) * cropland_ecosystem_value()


@component.add(
    name="Health index",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "life_expectancy_at_birth": 1,
        "min_life_expectancy": 2,
        "max_life_expectancy": 1,
    },
)
def health_index():
    """
    Index of achievement in Life Expectancy. Source of historical data: http://hdr.undp.org/en/reports/global/hdr2011/
    """
    return (life_expectancy_at_birth() - min_life_expectancy()) / (
        max_life_expectancy() - min_life_expectancy()
    )


@component.add(
    name="Income index",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gwp_per_capita": 1, "min_gwp_per_capita": 2, "max_gwp_per_capita": 1},
)
def income_index():
    """
    Index of achievement in GWP per Capita, formulation used in Human Development Report 2022/2022, https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return (float(np.log(gwp_per_capita())) - float(np.log(min_gwp_per_capita()))) / (
        float(np.log(max_gwp_per_capita())) - float(np.log(min_gwp_per_capita()))
    )


@component.add(
    name="Reference GWP per Capita for Income Index",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_income_index():
    """
    Auxilary variable to eliminate units and make the Income index dimensionless.
    """
    return 1


@component.add(
    name="Total Change in Forest Ecosystem Value",
    units="$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_land": 1, "init_forest_land": 1, "forest_ecosystem_value": 1},
)
def total_change_in_forest_ecosystem_value():
    """
    Total ecosystem value of forest.
    """
    return (forest_land() - init_forest_land()) * forest_ecosystem_value()


@component.add(
    name="Total Lost Value of Ecosystems",
    units="$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_change_in_forest_ecosystem_value": 1,
        "total_change_in_cropland_ecosystem_value": 1,
        "total_change_in_other_land_ecosystem_value": 1,
    },
)
def total_lost_value_of_ecosystems():
    """
    Total ecosystem value of all considered areas - forest, cropland and other land like woodland and grassland.
    """
    return -(
        total_change_in_forest_ecosystem_value()
        + total_change_in_cropland_ecosystem_value()
        + total_change_in_other_land_ecosystem_value()
    )


@component.add(
    name="Forest Ecosystem Value",
    units="$/ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_ecosystem_value():
    """
    Ecosystem value of unit area of forest.
    """
    return 700


@component.add(
    name="Total Change in Other Land Ecosystem Value",
    units="$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_land": 1, "init_other_land": 1, "other_land_ecosystem_value": 1},
)
def total_change_in_other_land_ecosystem_value():
    """
    Total ecosystem value of other land.
    """
    return (other_land() - init_other_land()) * other_land_ecosystem_value()


@component.add(
    name="Other Land Ecosystem Value",
    units="$/ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_land_ecosystem_value():
    """
    Ecosystem value of unit area of other land.
    """
    return 230


@component.add(
    name="Cropland Ecosystem Value",
    units="$/ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def cropland_ecosystem_value():
    """
    Ecosystem value of unit area of cropland.
    """
    return 90


@component.add(
    name="Min GWP per Capita",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_gwp_per_capita():
    """
    Minimal reference Gross World Product per Capita in 2017 internationla $ PPP, from Human Development Report 2022/2022, https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return 100


@component.add(
    name="Min Life Expectancy",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_life_expectancy():
    """
    Minimal reference Life Expectancy, from Human Development Report 2021/2022 https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return 20


@component.add(
    name="Max GWP per Capita",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_gwp_per_capita():
    """
    Maximal reference Gross World Product per Capita in 2017 internationla $ PPP, from Human Development Report 2022/2022, https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return 75000


@component.add(
    name="Max Life Expectancy",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_life_expectancy():
    """
    Maximal reference Life Expectancy, from Human Development Report 2021-2022 https://hdr.undp.org/sites/default/files/2021-22_HDR/hdr2021-22_technical_n otes.pdf
    """
    return 85


@component.add(
    name="Impact of Climate Damage on Reliable Water Supply",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"climate_damage_fraction_old": 1},
)
def impact_of_climate_damage_on_reliable_water_supply():
    """
    A parameter that determines the impact of climate risk on water resources or infrastructure availability to provide reliable water supply.
    """
    return climate_damage_fraction_old()


@component.add(
    name="Rainfed Agriculture Land",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land": 1, "percent_of_irrigated_land": 1},
)
def rainfed_agriculture_land():
    """
    Area of agricultural land on which the supply of water is only due to rain.
    """
    return agricultural_land() * (1 - percent_of_irrigated_land() / 100)


@component.add(
    name="Irrigated Agriculture Land",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land": 1, "percent_of_irrigated_land": 1},
)
def irrigated_agriculture_land():
    """
    Area of agricultural land on which the supply of water is only due to irrigation. Source of Historical Data: Gleick,P.H., et al. The World's Water Volume 7: The Biennial Report on Freshwater Resources. Washington: Island Press, 2012.
    """
    return agricultural_land() * percent_of_irrigated_land() / 100


@component.add(
    name="MAX Domestic Water Use per Capita",
    units="m*m*m/(Year*People)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable11_domestic_water": 1},
)
def max_domestic_water_use_per_capita():
    """
    Max level of average domestic water use per capita.
    """
    return variable11_domestic_water()


@component.add(
    name="MAX Industrial Water Use",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable10_industrial_water": 1},
)
def max_industrial_water_use():
    """
    Max level of average industrial water use.
    """
    return variable10_industrial_water()


@component.add(
    name="Average Used Water Recovery Fraction",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable12_water_recovery": 1},
)
def average_used_water_recovery_fraction():
    """
    Factor determining the percentage of consumed water resources that can be recovered.
    """
    return variable12_water_recovery()


@component.add(
    name="Average Agricultural Water Use per m2 Rainfed",
    units="m*m*m/(Year*m*m)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_agricultural_water_use_rainfed": 2,
        "reference_gwp_per_capita_for_agricultural_water_use_rainfed": 1,
        "max_agricultural_water_use_rainfed": 1,
        "smoothed_gwp_per_capita": 2,
    },
)
def average_agricultural_water_use_per_m2_rainfed():
    """
    Nonlinear relation that describes average agricultural water use on rainfed part of agricultural land as dependent on the population wealth represented by GWP per capita. Scaled between minimal and maximal level.
    """
    return min_agricultural_water_use_rainfed() + (
        max_agricultural_water_use_rainfed() - min_agricultural_water_use_rainfed()
    ) * (
        smoothed_gwp_per_capita()
        / (
            smoothed_gwp_per_capita()
            + reference_gwp_per_capita_for_agricultural_water_use_rainfed()
        )
    )


@component.add(
    name="Domestic Water Demand",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "smoothed_total_population": 1,
        "average_domestic_water_use_per_capita": 1,
    },
)
def domestic_water_demand():
    """
    Total water demand for domestic purposes. Source of Historical Data: International Hydrological Programme (IHP) of UNESCO, data by Shiklomanov, I.A – Dynamics of water use in the world (total) over the kinds of economic activities http://webworld.unesco.org/water/ihp/db/shiklomanov/
    """
    return smoothed_total_population() * average_domestic_water_use_per_capita()


@component.add(
    name="Average Agricultural Water Use per m2 Irrigated",
    units="m*m*m/(Year*m*m)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_agricultural_water_use_irrigated": 2,
        "max_agricultural_water_use_irrigated": 1,
        "smoothed_gwp_per_capita": 2,
        "reference_gwp_per_capita_for_agricultural_water_use_irrigated": 1,
    },
)
def average_agricultural_water_use_per_m2_irrigated():
    """
    Nonlinear relation that describes average agricultural water use on irrigated part of agricultural land as dependent on the population wealth represented by GWP per capita. Scaled between minimal and maximal level.
    """
    return min_agricultural_water_use_irrigated() + (
        max_agricultural_water_use_irrigated() - min_agricultural_water_use_irrigated()
    ) * (
        smoothed_gwp_per_capita()
        / (
            smoothed_gwp_per_capita()
            + reference_gwp_per_capita_for_agricultural_water_use_irrigated()
        )
    )


@component.add(
    name="Percent of Irrigated Land",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_percent_of_irrigated_land": 2,
        "smoothed_gwp_per_capita": 2,
        "reference_gwp_per_capita_for_land_irrigation": 1,
        "max_percent_of_irrigated_land": 1,
    },
)
def percent_of_irrigated_land():
    """
    Nonlinear relation that determines the area of irrigated land as percentage of total agricultural land as dependent on the population wealth represented by GWP per capita. Scaled between minimal and maximal percentage.
    """
    return min_percent_of_irrigated_land() + (
        max_percent_of_irrigated_land() - min_percent_of_irrigated_land()
    ) * (
        smoothed_gwp_per_capita()
        / (smoothed_gwp_per_capita() + reference_gwp_per_capita_for_land_irrigation())
    )


@component.add(
    name="Average Domestic Water Use per Capita",
    units="m*m*m/(Year*People)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_domestic_water_use_per_capita": 2,
        "smoothed_gwp_per_capita": 2,
        "max_domestic_water_use_per_capita": 1,
        "reference_gwp_per_capita_for_domestic_water_use": 1,
    },
)
def average_domestic_water_use_per_capita():
    """
    Nonlinear relation that describes average domestic water use per capita as dependent on the population wealth represented by GWP per capita. Scaled between minimal and maximal level.
    """
    return min_domestic_water_use_per_capita() + (
        max_domestic_water_use_per_capita() - min_domestic_water_use_per_capita()
    ) * (
        smoothed_gwp_per_capita()
        / (
            smoothed_gwp_per_capita()
            + reference_gwp_per_capita_for_domestic_water_use()
        )
    )


@component.add(
    name="Average Industrial Water Use",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_industrial_water_use": 2,
        "smoothed_gwp_per_capita": 2,
        "max_industrial_water_use": 1,
        "reference_gwp_per_capita_for_industrial_water_use": 1,
    },
)
def average_industrial_water_use():
    """
    Nonlinear relation that describes average industrial water use as dependent on the population wealth represented by GWP per capita. Scaled between minimal and maximal level.
    """
    return min_industrial_water_use() + (
        max_industrial_water_use() - min_industrial_water_use()
    ) * (
        smoothed_gwp_per_capita()
        / (
            smoothed_gwp_per_capita()
            + reference_gwp_per_capita_for_industrial_water_use()
        )
    )


@component.add(
    name="MAX Agricultural Water Use Rainfed",
    units="m*m*m/(Year*m*m)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_agricultural_water_use_rainfed():
    """
    Max level of average agricultural water use on part of agricultural land that is rainfed.
    """
    return 0.1


@component.add(
    name="Agricultural Water Demand",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_agricultural_water_use_per_m2_irrigated": 1,
        "irrigated_agriculture_land": 1,
        "sqr_m_to_ha": 2,
        "average_agricultural_water_use_per_m2_rainfed": 1,
        "rainfed_agriculture_land": 1,
    },
)
def agricultural_water_demand():
    """
    Total water demand for agricultural purposes. Source of Historical Data: International Hydrological Programme (IHP) of UNESCO, data by Shiklomanov, I.A Dynamics of water use in the world (total) over the kinds of economic activities http://webworld.unesco.org/water/ihp/db/shiklomanov/
    """
    return (
        average_agricultural_water_use_per_m2_irrigated()
        * irrigated_agriculture_land()
        / sqr_m_to_ha()
        + average_agricultural_water_use_per_m2_rainfed()
        * rainfed_agriculture_land()
        / sqr_m_to_ha()
    )


@component.add(
    name="Reference GWP per Capita for Agricultural Water Use Rainfed",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_agricultural_water_use_rainfed():
    """
    A reference value against which the GDP per Capita is compared to calculate the impact of population wealth on average agricultural water use on the land where the supply of water is only due to rainfall.
    """
    return 7000


@component.add(
    name="MIN Agricultural Water Use Irrigated",
    units="m*m*m/(Year*m*m)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_agricultural_water_use_irrigated():
    """
    Min level of average agricultural water use on part of agricultural land that is irrigated.
    """
    return 0.005


@component.add(
    name="MIN Agricultural Water Use Rainfed",
    units="m*m*m/(Year*m*m)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_agricultural_water_use_rainfed():
    """
    Min level of average agricultural water use on part of agricultural land that is rainfed.
    """
    return 0.005


@component.add(
    name="Reference GWP per Capita for Agricultural Water Use Irrigated",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_agricultural_water_use_irrigated():
    """
    A reference value against which the GDP per Capita is compared to calculate the impact of population wealth on average agricultural water use on the land where the supply of water is due to irrigation.
    """
    return 3500


@component.add(
    name="MAX Agricultural Water Use Irrigated",
    units="m*m*m/(Year*m*m)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_agricultural_water_use_irrigated():
    """
    Max level of average agricultural water use on part of agricultural land that is irrigated.
    """
    return 0.05


@component.add(
    name="Drought Out",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_water_withdrawal_rate_no_drought": 1,
        "agricultural_water_withdrawal_rate": 1,
    },
)
def drought_out():
    """
    Water resources decrease rate due to drought.
    """
    return (
        agricultural_water_withdrawal_rate_no_drought()
        - agricultural_water_withdrawal_rate()
    )


@component.add(
    name="Extreme Drought", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def extreme_drought():
    """
    Drought scenario trigger.
    """
    return 0


@component.add(
    name="Agricultural Water Withdrawal Fulfillment Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agricultural_water_withdrawal_fulfillment_factor():
    """
    A factor determining the strength of infrastructure operating limits on agricultural water withdrawal fulfillment.
    """
    return 3.5


@component.add(
    name="Agricultural Water Withdrawal Fulfillment Rate",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_water_withdrawal_fulfillment_factor": 1,
        "max_water_withdrawal_rate": 1,
        "agricultural_water_demand": 1,
    },
)
def agricultural_water_withdrawal_fulfillment_rate():
    """
    Nonlinear relation that describes agricultural water withdrawal fulfillment as a relation of max water withdrawal and demand. With growing agricultural water demand the withdrawal fulfillment might be impaired which relates to infrastructure design and its operating limits.
    """
    return (
        2
        / (
            1
            + float(
                np.exp(
                    -agricultural_water_withdrawal_fulfillment_factor()
                    * (max_water_withdrawal_rate() / agricultural_water_demand())
                )
            )
        )
        - 1
    )


@component.add(
    name="Agricultural Water Withdrawal Rate no Drought",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_water_demand": 1,
        "agricultural_water_withdrawal_fulfillment_rate": 1,
    },
)
def agricultural_water_withdrawal_rate_no_drought():
    """
    Drought scenario variable. Accounts for Agricultural Water Withdrawal Rate in no drought case.
    """
    return (
        agricultural_water_demand() * agricultural_water_withdrawal_fulfillment_rate()
    )


@component.add(
    name="Industrial Water Withdrawal Fulfillment Rate",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "industrial_water_withdrawal_fulfillment_factor": 1,
        "max_water_withdrawal_rate": 1,
        "industrial_water_demand": 1,
    },
)
def industrial_water_withdrawal_fulfillment_rate():
    """
    Nonlinear relation that describes industrial water withdrawal fulfillment as a relation of max water withdrawal and demand. With growing industrial water demand the withdrawal fulfillment might be impaired which relates to infrastructure design and its operating limits.
    """
    return (
        2
        / (
            1
            + float(
                np.exp(
                    -industrial_water_withdrawal_fulfillment_factor()
                    * (max_water_withdrawal_rate() / industrial_water_demand())
                )
            )
        )
        - 1
    )


@component.add(
    name="Domestic Water Withdrawal Fulfillment Rate",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_water_withdrawal_fulfillment_factor": 1,
        "max_water_withdrawal_rate": 1,
        "domestic_water_demand": 1,
    },
)
def domestic_water_withdrawal_fulfillment_rate():
    """
    Nonlinear relation that describes domestic water withdrawal fulfillment as a relation of max water withdrawal and demand. With growing domestic water demand the withdrawal fulfillment might be impaired which relates to infrastructure design and its operating limits.
    """
    return (
        2
        / (
            1
            + float(
                np.exp(
                    -domestic_water_withdrawal_fulfillment_factor()
                    * (max_water_withdrawal_rate() / domestic_water_demand())
                )
            )
        )
        - 1
    )


@component.add(
    name="Water Supply Fulfillment Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def water_supply_fulfillment_factor():
    """
    A factor determining the strength of infrastructure operating limits on water supply fulfillment.
    """
    return 3


@component.add(
    name="Max Water Withdrawal Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"available_water_resources": 1, "min_water_withdrawal_time": 1},
)
def max_water_withdrawal_rate():
    """
    Max possible water withdrawal rate due to available water resources.
    """
    return available_water_resources() / min_water_withdrawal_time()


@component.add(
    name="Available Water Resources",
    units="m*m*m",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_available_water_resources": 1},
    other_deps={
        "_integ_available_water_resources": {
            "initial": {"desired_available_water_resources": 1},
            "step": {
                "recovery_of_used_water_resources_rate": 1,
                "water_supply_rate": 1,
                "agricultural_water_withdrawal_rate": 1,
                "domestic_water_withdrawal_rate": 1,
                "industrial_water_withdrawal_rate": 1,
                "drought_out": 1,
            },
        }
    },
)
def available_water_resources():
    """
    Available water resources to be used for domestic, agricultural and industrial use.
    """
    return _integ_available_water_resources()


_integ_available_water_resources = Integ(
    lambda: recovery_of_used_water_resources_rate()
    + water_supply_rate()
    - agricultural_water_withdrawal_rate()
    - domestic_water_withdrawal_rate()
    - industrial_water_withdrawal_rate()
    - drought_out(),
    lambda: desired_available_water_resources(),
    "_integ_available_water_resources",
)


@component.add(
    name="Additional Change in Reliable Water Supply",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def additional_change_in_reliable_water_supply():
    """
    A parameter that enables testing additional changes in reliable water supply independently from changes due to climate risk.
    """
    return 1


@component.add(
    name="Net Change in Reliable Water Supply",
    units="m*m*m/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "init_reliable_water_supply": 1,
        "impact_of_climate_damage_on_reliable_water_supply": 1,
        "additional_change_in_reliable_water_supply": 1,
        "reliable_water_supply": 1,
        "min_reliable_water_supply_decrease_time": 1,
    },
)
def net_change_in_reliable_water_supply():
    """
    Change in reliable water supply due to changes in water resources or infrastructure availability.
    """
    return (
        init_reliable_water_supply()
        * impact_of_climate_damage_on_reliable_water_supply()
        * additional_change_in_reliable_water_supply()
        - reliable_water_supply()
    ) / min_reliable_water_supply_decrease_time()


@component.add(
    name="Reliable Water Supply",
    units="m*m*m/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_reliable_water_supply": 1},
    other_deps={
        "_integ_reliable_water_supply": {
            "initial": {"init_reliable_water_supply": 1},
            "step": {"net_change_in_reliable_water_supply": 1},
        }
    },
)
def reliable_water_supply():
    """
    Amount of water that can be reliably provided on annual basis for domestic, agricultural and industrial use due to resources and infrastructure availability. Source of historical data: 2030 Water Resources Group, 2009. Charting Our Water Future - Economic frameworks to inform decision-making. http://www.mckinsey.com/App_Media/Reports/Water/Charting_Our_Water_Future_F ull_Report_001.pdf
    """
    return _integ_reliable_water_supply()


_integ_reliable_water_supply = Integ(
    lambda: net_change_in_reliable_water_supply(),
    lambda: init_reliable_water_supply(),
    "_integ_reliable_water_supply",
)


@component.add(
    name="Min Reliable Water Supply Decrease Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_reliable_water_supply_decrease_time():
    """
    Minimal period of time used to consider changes in water resources or infrastructure availability.
    """
    return 1


@component.add(
    name="Quality of Domestic Water",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_water_withdrawal_fulfillment_rate": 2,
        "water_quality_steepness": 4,
        "water_quality_inflection": 2,
    },
)
def quality_of_domestic_water():
    """
    Nonlinear relation describing the quality of domestic as dependent on withdrawal fulfillment rate.
    """
    return (
        domestic_water_withdrawal_fulfillment_rate() ** water_quality_steepness()
        * (water_quality_inflection() ** water_quality_steepness() + 1)
        / (
            water_quality_inflection() ** water_quality_steepness()
            + domestic_water_withdrawal_fulfillment_rate() ** water_quality_steepness()
        )
    )


@component.add(
    name="Water Quality Inflection",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def water_quality_inflection():
    """
    Inflection point of nonlinear relation describing domestic water quality.
    """
    return 0.5


@component.add(
    name="Water Quality Steepness",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def water_quality_steepness():
    """
    Steepness of nonlinear relation describing domestic water quality.
    """
    return 5


@component.add(
    name="Reference GWP per Capita for Land Irrigation",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_land_irrigation():
    """
    A reference value against which the GDP per Capita is compared to calculate the impact of population wealth on percentage of agricultural land irrigation.
    """
    return 120000


@component.add(
    name="MAX Percent of Irrigated Land",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_percent_of_irrigated_land():
    """
    Max percentage of total agricultural land that can be eventually irrigated.
    """
    return 100


@component.add(
    name="MIN Percent of Irrigated Land",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_percent_of_irrigated_land():
    """
    Min percentage of total agricultural land that can be irrigated.
    """
    return 0


@component.add(
    name="INIT Reliable Water Supply",
    units="m*m*m/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_reliable_water_supply():
    """
    Amount of water that can be reliably provided on annual basis for domestic, agricultural and industrial use due to resources and infrastructure availability for year 1900.
    """
    return 4200000000000.0


@component.add(
    name="Water Supply Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_water_supply_rate": 1, "water_supply_fulfillment_rate": 1},
)
def water_supply_rate():
    """
    Water supply taking into account the desired water supply and the supply fulfillment rate. The water supply includes withdrawals from surface water, groundwater or nonconventional sources for example desalination.
    """
    return desired_water_supply_rate() * water_supply_fulfillment_rate()


@component.add(
    name="Water Supply Fulfillment Rate",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "water_supply_fulfillment_factor": 1,
        "desired_water_supply_rate": 1,
        "reliable_water_supply": 1,
    },
)
def water_supply_fulfillment_rate():
    """
    Nonlinear relation that describes water supply fulfillment as a relation of water supply and demand. With growing water demand the supply fulfillment might be impaired which relates to infrastructure design and its operating limits.
    """
    return (
        2
        / (
            1
            + float(
                np.exp(
                    -water_supply_fulfillment_factor()
                    * (reliable_water_supply() / desired_water_supply_rate())
                )
            )
        )
        - 1
    )


@component.add(
    name="Used Water Resources",
    units="m*m*m",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_used_water_resources": 1},
    other_deps={
        "_integ_used_water_resources": {
            "initial": {"available_water_resources": 1},
            "step": {
                "agricultural_water_withdrawal_rate": 1,
                "domestic_water_withdrawal_rate": 1,
                "industrial_water_withdrawal_rate": 1,
                "non_recoverable_water_consumption_rate": 1,
                "recovery_of_used_water_resources_rate": 1,
            },
        }
    },
)
def used_water_resources():
    """
    Water resources that have been used for industrial, agricultural and domestic purposes.
    """
    return _integ_used_water_resources()


_integ_used_water_resources = Integ(
    lambda: agricultural_water_withdrawal_rate()
    + domestic_water_withdrawal_rate()
    + industrial_water_withdrawal_rate()
    - non_recoverable_water_consumption_rate()
    - recovery_of_used_water_resources_rate(),
    lambda: available_water_resources(),
    "_integ_used_water_resources",
)


@component.add(
    name="Agricultural Water Withdrawal Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_water_demand": 1,
        "agricultural_water_withdrawal_fulfillment_rate": 1,
        "extreme_drought": 1,
    },
)
def agricultural_water_withdrawal_rate():
    """
    Water withdrawal rate for agricultural purposes.
    """
    return (
        agricultural_water_demand()
        * agricultural_water_withdrawal_fulfillment_rate()
        * (1 - extreme_drought())
    )


@component.add(
    name="Industrial Water Withdrawal Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "industrial_water_demand": 1,
        "industrial_water_withdrawal_fulfillment_rate": 1,
    },
)
def industrial_water_withdrawal_rate():
    """
    Water withdrawal rate for industrial purposes.
    """
    return industrial_water_demand() * industrial_water_withdrawal_fulfillment_rate()


@component.add(
    name="Water Consumption Adjustment",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_water_withdrawal_rate": 1,
        "domestic_water_withdrawal_rate": 1,
        "industrial_water_withdrawal_rate": 1,
        "recovery_of_used_water_resources_rate": 1,
    },
)
def water_consumption_adjustment():
    """
    The sum of consumption of water in industrial, agricultural and domestic sectors corected by used water recovery rate.
    """
    return (
        agricultural_water_withdrawal_rate()
        + domestic_water_withdrawal_rate()
        + industrial_water_withdrawal_rate()
        - recovery_of_used_water_resources_rate()
    )


@component.add(
    name="Domestic Water Withdrawal Fulfillment Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def domestic_water_withdrawal_fulfillment_factor():
    """
    A factor determining the strength of infrastructure operating limits on domestic water withdrawal fulfillment.
    """
    return 0.8


@component.add(
    name="Domestic Water Withdrawal Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "domestic_water_demand": 1,
        "domestic_water_withdrawal_fulfillment_rate": 1,
    },
)
def domestic_water_withdrawal_rate():
    """
    Water withdrawal rate for domestic purposes.
    """
    return domestic_water_demand() * domestic_water_withdrawal_fulfillment_rate()


@component.add(
    name="Total Water Demand",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_water_demand": 1,
        "domestic_water_demand": 1,
        "industrial_water_demand": 1,
    },
)
def total_water_demand():
    """
    Total world water demand related to various purposes. http://webworld.unesco.org/water/ihp/db/shiklomanov/index.shtml
    """
    return (
        agricultural_water_demand()
        + domestic_water_demand()
        + industrial_water_demand()
    )


@component.add(
    name="Industrial Water Demand",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_industrial_water_use": 1},
)
def industrial_water_demand():
    """
    Total water demand for industrial purposes. Source of Historical Data: International Hydrological Programme (IHP) of UNESCO, data by Shiklomanov, I.A – Dynamics of water use in the world (total) over the kinds of economic activities http://webworld.unesco.org/water/ihp/db/shiklomanov/
    """
    return average_industrial_water_use()


@component.add(
    name="Reference GWP per Capita for Industrial Water Use",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_industrial_water_use():
    """
    A reference value against which the GDP per Capita is compared to calculate the impact of population wealth on average inductrial water use.
    """
    return 17000


@component.add(
    name="MIN Domestic Water Use per Capita",
    units="m*m*m/(Year*People)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_domestic_water_use_per_capita():
    """
    Min level of average domestic water use per capita.
    """
    return 5


@component.add(
    name="Reference GWP per Capita for Domestic Water Use",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_domestic_water_use():
    """
    A reference value against which the GDP per Capita is compared to calculate the impact of population wealth on domestic water use.
    """
    return 9000


@component.add(
    name="MIN Industrial Water Use",
    units="m*m*m/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_industrial_water_use():
    """
    Min level of average industrial water use.
    """
    return 2000


@component.add(
    name="Available Water Resources Adjustment Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def available_water_resources_adjustment_time():
    """
    Time required to adjust available water resources to desired water resources.
    """
    return 1


@component.add(
    name="Available Water Resources Adjustment",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "desired_available_water_resources": 1,
        "available_water_resources": 1,
        "available_water_resources_adjustment_time": 1,
    },
)
def available_water_resources_adjustment():
    """
    Adjustment of available water resources to desired available water resources.
    """
    return (
        desired_available_water_resources() - available_water_resources()
    ) / available_water_resources_adjustment_time()


@component.add(
    name="Industrial Water Withdrawal Fulfillment Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def industrial_water_withdrawal_fulfillment_factor():
    """
    A factor determining the strength of infrastructure operating limits on industrial water withdrawal fulfillment.
    """
    return 2


@component.add(
    name="Desired Available Water Resources",
    units="m*m*m",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_water_demand": 1,
        "water_safety_stock_coverage": 1,
        "min_water_withdrawal_time": 1,
    },
)
def desired_available_water_resources():
    """
    Total desired available water resources including demand from industrial, agricultural and domestic sectors as well as safety coverage.
    """
    return total_water_demand() * (
        min_water_withdrawal_time() + water_safety_stock_coverage()
    )


@component.add(
    name="Desired Water Supply Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "water_consumption_adjustment": 1,
        "available_water_resources_adjustment": 1,
    },
)
def desired_water_supply_rate():
    """
    Desired water supply including constant water consumption and available water resources adjustment.
    """
    return float(
        np.maximum(
            0, water_consumption_adjustment() + available_water_resources_adjustment()
        )
    )


@component.add(
    name="Water Safety Stock Coverage",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def water_safety_stock_coverage():
    """
    Water resources safety stock expressed in terms of time duration. Additional time period during which the water resources need to be available at the total water demand level.
    """
    return 0.1


@component.add(
    name="Min Water Withdrawal Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_water_withdrawal_time():
    """
    Minimal time unit constraining water withdrawal.
    """
    return 1


@component.add(
    name="Recovery of Used Water Resources Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"used_water_resources": 1, "average_used_water_recovery_fraction": 1},
)
def recovery_of_used_water_resources_rate():
    """
    Rate of water consumption possible to be recovered and thus return to available water resources stock.
    """
    return used_water_resources() * average_used_water_recovery_fraction()


@component.add(
    name="Non Recoverable Water Consumption Rate",
    units="m*m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"used_water_resources": 1, "average_used_water_recovery_fraction": 1},
)
def non_recoverable_water_consumption_rate():
    """
    Rate of water consumption not possible to be recovered.
    """
    return used_water_resources() * (1 - average_used_water_recovery_fraction())


@component.add(
    name="CCS Improvement Change",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ccsiclv3": 1},
)
def ccs_improvement_change():
    """
    Change in improvement of carbon capture and storage technology.
    """
    return outflow_ccsiclv3()


@component.add(
    name="Total C Emission",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_c_emission_from_the_energy_sector": 1,
        "total_agricultural_and_land_use_c_emissions": 1,
        "shock_emission_addition": 1,
    },
)
def total_c_emission():
    """
    Emissions of carbon from energy use and other sources.
    """
    return (
        total_c_emission_from_the_energy_sector()
        + total_agricultural_and_land_use_c_emissions()
        + shock_emission_addition()
    )


@component.add(
    name="Presure to Adjust Total C Emission from Fossil Fuels",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ccs_scenario": 1,
        "c_emission_from_biomass_energy": 1,
        "desired_total_c_emission_from_fossil_fuels": 1,
        "total_c_emission_from_fossil_fuels": 1,
    },
)
def presure_to_adjust_total_c_emission_from_fossil_fuels():
    """
    Pressure to adjust the level of carbon emission from fossil fuels is the emission level rises above the acceptable level.
    """
    return ccs_scenario() * float(
        np.maximum(
            0,
            (total_c_emission_from_fossil_fuels() + c_emission_from_biomass_energy())
            / desired_total_c_emission_from_fossil_fuels()
            - 1,
        )
    )


@component.add(
    name="C in Atmosphere",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_atmosphere": 1},
    other_deps={
        "_integ_c_in_atmosphere": {
            "initial": {"init_c_in_atmosphere": 1},
            "step": {
                "flux_biomass_to_atmosphere": 1,
                "flux_humus_to_atmosphere": 1,
                "total_c_emission": 1,
                "carbon_removal_rate": 2,
                "flux_atmosphere_to_biomass": 1,
                "flux_atmosphere_to_ocean": 1,
            },
        }
    },
)
def c_in_atmosphere():
    """
    Carbon in atmosphere.
    """
    return _integ_c_in_atmosphere()


_integ_c_in_atmosphere = Integ(
    lambda: flux_biomass_to_atmosphere()
    + flux_humus_to_atmosphere()
    + total_c_emission()
    - carbon_removal_rate()
    - flux_atmosphere_to_biomass()
    - flux_atmosphere_to_ocean()
    - carbon_removal_rate(),
    lambda: init_c_in_atmosphere(),
    "_integ_c_in_atmosphere",
)


@component.add(
    name="Flux Atmosphere to Ocean",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"equil_c_in_mixed_layer": 1, "c_in_mixed_layer": 1, "mixing_time": 1},
)
def flux_atmosphere_to_ocean():
    """
    Carbon flux from atmosphere to mixed ocean layer.
    """
    return (equil_c_in_mixed_layer() - c_in_mixed_layer()) / mixing_time()


@component.add(
    name="Flux Atmosphere to Biomass",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_net_primary_production": 1,
        "preindustrial_c_in_atmosphere": 1,
        "c_in_atmosphere": 1,
        "biostimulation_coefficient": 1,
    },
)
def flux_atmosphere_to_biomass():
    """
    Carbon flux from atmosphere to biosphere (from primary production)
    """
    return initial_net_primary_production() * (
        1
        + biostimulation_coefficient()
        * float(np.log(c_in_atmosphere() / preindustrial_c_in_atmosphere()))
    )


@component.add(
    name="C Intensity of Emission from Biomass Energy",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ccs_improvement_factor": 1},
)
def c_intensity_of_emission_from_biomass_energy():
    """
    Carbon intensity from biomass energy production and it use. Felix1: 1.278e+006 IPCC: med: 2.6749e+006 min:1511900
    """
    return 1511900.0 * (1 - ccs_improvement_factor())


@component.add(
    name="C Emission from Land Use",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_intensity_of_emissions_from_agricultural_land_use": 1,
        "agricultural_land_change": 1,
        "c_intensity_of_emissions_from_forest_land_use": 1,
        "forest_land_change": 1,
    },
)
def c_emission_from_land_use():
    """
    Total carbon emission from forest and agricultural land use change. Source of Historical Data: Houghton, R.A. 2008. Carbon Flux to the Atmosphere from Land-Use Changes: 1850-2005. In TRENDS: A Compendium of Data on Global Change. Carbon Dioxide Information Analysis Center, Oak Ridge National Laboratory, U.S. Department of Energy, Oak Ridge, Tenn., U.S.A.
    """
    return (
        c_intensity_of_emissions_from_agricultural_land_use()
        * agricultural_land_change()
        + (2 - forest_land_change()) * c_intensity_of_emissions_from_forest_land_use()
    )


@component.add(
    name="Desired Total C Emission from Fossil Fuels",
    units="TonC/Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"de_var_s": 1, "_smooth_desired_total_c_emission_from_fossil_fuels": 1},
    other_deps={
        "_smooth_desired_total_c_emission_from_fossil_fuels": {
            "initial": {
                "desired_total_c_emission_from_fossil_fuels_variation": 1,
                "de_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "desired_total_c_emission_from_fossil_fuels_variation": 1,
                "de_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def desired_total_c_emission_from_fossil_fuels():
    """
    The upper level of acceptable total carbon emission from fossil fuels.
    """
    return de_var_s() + _smooth_desired_total_c_emission_from_fossil_fuels()


_smooth_desired_total_c_emission_from_fossil_fuels = Smooth(
    lambda: step(
        __data["time"],
        desired_total_c_emission_from_fossil_fuels_variation() - de_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        desired_total_c_emission_from_fossil_fuels_variation() - de_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_desired_total_c_emission_from_fossil_fuels",
)


@component.add(
    name="CCS Scenario",
    units="Dmnl",
    limits=(0.0, 1.0, 1.0),
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ccs_scenario_switch_variation": 1, "time": 1},
)
def ccs_scenario():
    """
    Carbon capture and storage scenario trigger
    """
    return 0 + step(__data["time"], ccs_scenario_switch_variation(), 2020)


@component.add(
    name="Effectiveness of Pressure to Adjust C Emission",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_pressure_to_adjust_c_emission_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_pressure_to_adjust_c_emission():
    """
    Rate at which the gap between acceptable and current carbon emission from fossil fuels level is addressed.
    """
    return 0.07 + step(
        __data["time"],
        effectiveness_of_pressure_to_adjust_c_emission_variation() - 0.07,
        2020,
    )


@component.add(
    name="Time to Improve CCS",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time_to_improve_ccs_variation": 1, "time": 1},
)
def time_to_improve_ccs():
    """
    Average CCS technology development lead time.
    """
    return 10 + step(__data["time"], time_to_improve_ccs_variation() - 10, 2020)


@component.add(
    name="Normal C Intensity of Emission from Oil",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"normal_carbon_emissions_of_oil": 1},
)
def normal_c_intensity_of_emission_from_oil():
    """
    Initial carbon intensity of production from oil technologies.
    """
    return normal_carbon_emissions_of_oil()


@component.add(
    name="Normal C Intensity of Emission from Coal",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"normal_carbon_emissions_of_coal": 1},
)
def normal_c_intensity_of_emission_from_coal():
    """
    Initial carbon intensity of production from coal technologies.
    """
    return normal_carbon_emissions_of_coal()


@component.add(
    name="Normal C Intensity of Emission from Gas",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"normal_carbon_emissions_of_gas": 1},
)
def normal_c_intensity_of_emission_from_gas():
    """
    Initial carbon intensity of production from gas technologies.
    """
    return normal_carbon_emissions_of_gas()


@component.add(
    name="INIT C in Deep Ocean 2",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"init_c_in_deep_ocean_per_meter": 1, "layer_depth_2": 1},
)
def init_c_in_deep_ocean_2():
    """
    Initial carbon in the second layer of deep ocean. was constant at 3.099e+012 in earlier versions of the model
    """
    return init_c_in_deep_ocean_per_meter() * layer_depth_2()


@component.add(
    name="Equil C in Mixed Layer",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "preindustrial_c_in_mixed_layer": 1,
        "effect_of_temp_on_c_flux_atm_ml": 1,
        "preindustrial_c_in_atmosphere": 1,
        "c_in_atmosphere": 1,
        "buffer_factor": 1,
    },
)
def equil_c_in_mixed_layer():
    """
    Equilibrium carbon content of mixed layer.
    """
    return (
        preindustrial_c_in_mixed_layer()
        * effect_of_temp_on_c_flux_atm_ml()
        * (c_in_atmosphere() / preindustrial_c_in_atmosphere()) ** (1 / buffer_factor())
    )


@component.add(
    name="INIT C in Deep Ocean 4",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"init_c_in_deep_ocean_per_meter": 1, "layer_depth_4": 1},
)
def init_c_in_deep_ocean_4():
    """
    Initial carbon in the fourth layer of deep ocean. was constant at 1.8477e+013 in earlier versions of the model.
    """
    return init_c_in_deep_ocean_per_meter() * layer_depth_4()


@component.add(
    name="INIT C in Deep Ocean 3",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"init_c_in_deep_ocean_per_meter": 1, "layer_depth_3": 1},
)
def init_c_in_deep_ocean_3():
    """
    Initial carbon in the third layer of deep ocean. was constant at 1.3356e+013 in earlier versions of the model
    """
    return init_c_in_deep_ocean_per_meter() * layer_depth_3()


@component.add(
    name="Agricultural Land Change",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land": 1, "init_agricultural_land": 1},
)
def agricultural_land_change():
    """
    Ratio of agricultural land area change compared to its initial area in year 1900.
    """
    return agricultural_land() / init_agricultural_land()


@component.add(
    name="C Emission from Wind Energy",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_energy_production": 1,
        "c_intensity_of_emission_from_wind_energy": 1,
    },
)
def c_emission_from_wind_energy():
    """
    Total carbon emission from wind energy production and it use.
    """
    return wind_energy_production() * c_intensity_of_emission_from_wind_energy()


@component.add(
    name="C Emission from Biomass Energy",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_production": 1,
        "c_intensity_of_emission_from_biomass_energy": 1,
    },
)
def c_emission_from_biomass_energy():
    """
    Total carbon emission from biomass energy production and it use.
    """
    return biomass_energy_production() * c_intensity_of_emission_from_biomass_energy()


@component.add(
    name="C Emission from Coal Energy",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_production": 1, "c_intensity_of_emission_from_coal": 1},
)
def c_emission_from_coal_energy():
    """
    Total carbon emission from coal energy production and it use.
    """
    return coal_production() * c_intensity_of_emission_from_coal()


@component.add(
    name="C Emission from Gas Energy",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_production": 1, "c_intensity_of_emission_from_gas": 1},
)
def c_emission_from_gas_energy():
    """
    Total carbon emission from gas energy production and it use.
    """
    return gas_production() * c_intensity_of_emission_from_gas()


@component.add(
    name="C Emission from Oil Energy",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_production": 1, "c_intensity_of_emission_from_oil": 1},
)
def c_emission_from_oil_energy():
    """
    Total carbon emission from oil production and it use.
    """
    return oil_production() * c_intensity_of_emission_from_oil()


@component.add(
    name="C Emission from Solar Energy",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_energy_production": 1,
        "c_intensity_of_emission_from_solar_energy": 1,
    },
)
def c_emission_from_solar_energy():
    """
    Total carbon emission from solar energy production and it use.
    """
    return solar_energy_production() * c_intensity_of_emission_from_solar_energy()


@component.add(
    name="Emission per Capita",
    units="TonC/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission": 1, "population": 1},
)
def emission_per_capita():
    """
    Emissions of carbon from energy use and other sources per capita.
    """
    return total_c_emission() / population()


@component.add(
    name="Emission from Fossil Fuels per Capita",
    units="TonC/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_c_emission_from_fossil_fuels": 1, "population": 1},
)
def emission_from_fossil_fuels_per_capita():
    """
    Carbon emission from energy production and it use per capita.
    """
    return total_c_emission_from_fossil_fuels() / population()


@component.add(
    name="Land Use as Share of Total C Emission",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_emission_from_land_use": 1, "total_c_emission": 1},
)
def land_use_as_share_of_total_c_emission():
    """
    Carbon emission from forest and agricultural land use change as a percentage of total carbon emission.
    """
    return (c_emission_from_land_use() / total_c_emission()) * 100


@component.add(
    name="Total C Emission from Fossil Fuels",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_emission_from_coal_energy": 1,
        "c_emission_from_gas_energy": 1,
        "c_emission_from_oil_energy": 1,
    },
)
def total_c_emission_from_fossil_fuels():
    """
    Source of historical data: Global Carbon Project 2020
    """
    return (
        c_emission_from_coal_energy()
        + c_emission_from_gas_energy()
        + c_emission_from_oil_energy()
    )


@component.add(
    name="Default C Intensity of Emission from Biomass",
    units="kgCO2/GJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_intensity_of_emission_from_biomass_energy": 1,
        "ton_c_to_kg_co2": 1,
        "mtoe_to_gj": 1,
    },
)
def default_c_intensity_of_emission_from_biomass():
    """
    Carbon intensity from biomass energy production and it use.
    """
    return (
        c_intensity_of_emission_from_biomass_energy() * ton_c_to_kg_co2() / mtoe_to_gj()
    )


@component.add(
    name="Default C Intensity of Emission from Oil",
    units="kgCO2/GJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_c_intensity_of_emission_from_oil": 1,
        "ton_c_to_kg_co2": 1,
        "mtoe_to_gj": 1,
    },
)
def default_c_intensity_of_emission_from_oil():
    """
    Initial carbon intensity of production from oil technologies.
    """
    return normal_c_intensity_of_emission_from_oil() * ton_c_to_kg_co2() / mtoe_to_gj()


@component.add(
    name="Default C Intensity of Emission from Coal",
    units="kgCO2/GJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_c_intensity_of_emission_from_coal": 1,
        "ton_c_to_kg_co2": 1,
        "mtoe_to_gj": 1,
    },
)
def default_c_intensity_of_emission_from_coal():
    """
    Initial carbon intensity of production from coal technologies.
    """
    return normal_c_intensity_of_emission_from_coal() * ton_c_to_kg_co2() / mtoe_to_gj()


@component.add(
    name="Default C Intensity of Emission from Gas",
    units="kgCO2/GJ",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_c_intensity_of_emission_from_gas": 1,
        "ton_c_to_kg_co2": 1,
        "mtoe_to_gj": 1,
    },
)
def default_c_intensity_of_emission_from_gas():
    """
    Initial carbon intensity of production from gas technologies.
    """
    return normal_c_intensity_of_emission_from_gas() * ton_c_to_kg_co2() / mtoe_to_gj()


@component.add(
    name="Atmospheric Concentration CO2",
    units="ppm",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_atmosphere": 1, "gtc_to_tonc": 1, "ppm_to_gtc": 1},
)
def atmospheric_concentration_co2():
    """
    Converts weight of CO2 in atmosphere to concentration (ppm CO2). Source of Historical Data: Etheridge, D.M., Steele, L.P., Langenfelds, R.L., Francey, R.J., Barnola, J.-M., Morgan, V.I. 1998. Historical CO2 records from the Law Dome DE08, DE08-2, and DSS ice cores. In Trends: A Compendium of Data on Global Change. Carbon Dioxide Information Analysis Center, Oak Ridge National Laboratory, U.S. Department of Energy, Oak Ridge, Tenn., U.S.A
    """
    return c_in_atmosphere() / gtc_to_tonc() / ppm_to_gtc()


@component.add(
    name="Diffusion Flux 3",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_in_deep_ocean_2_per_meter": 1,
        "c_in_deep_ocean_3_per_meter": 1,
        "eddy_diff_coeff_2_3": 1,
        "mean_depth_of_adjacent_2_3_layers": 1,
    },
)
def diffusion_flux_3():
    """
    Diffusion flux between the second and the third ocean layers.
    """
    return (
        (c_in_deep_ocean_2_per_meter() - c_in_deep_ocean_3_per_meter())
        * eddy_diff_coeff_2_3()
        / mean_depth_of_adjacent_2_3_layers()
    )


@component.add(
    name="Diffusion Flux 4",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_in_deep_ocean_3_per_meter": 1,
        "c_in_deep_ocean_4_per_meter": 1,
        "eddy_diff_coeff_3_4": 1,
        "mean_depth_of_adjacent_3_4_layers": 1,
    },
)
def diffusion_flux_4():
    """
    Diffusion flux between the third and the fourth ocean layers.
    """
    return (
        (c_in_deep_ocean_3_per_meter() - c_in_deep_ocean_4_per_meter())
        * eddy_diff_coeff_3_4()
        / mean_depth_of_adjacent_3_4_layers()
    )


@component.add(
    name="C in Deep Ocean 3 per meter",
    units="TonC/Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_deep_ocean_3": 1, "layer_depth_3": 1},
)
def c_in_deep_ocean_3_per_meter():
    """
    Carbon in the third ocean layer per its meter.
    """
    return c_in_deep_ocean_3() / layer_depth_3()


@component.add(
    name="C in Deep Ocean 4",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_deep_ocean_4": 1},
    other_deps={
        "_integ_c_in_deep_ocean_4": {
            "initial": {"init_c_in_deep_ocean_4": 1},
            "step": {"diffusion_flux_4": 1},
        }
    },
)
def c_in_deep_ocean_4():
    """
    Carbon in the fourth layer of deep ocean.
    """
    return _integ_c_in_deep_ocean_4()


_integ_c_in_deep_ocean_4 = Integ(
    lambda: diffusion_flux_4(),
    lambda: init_c_in_deep_ocean_4(),
    "_integ_c_in_deep_ocean_4",
)


@component.add(
    name="C in Deep Ocean 4 per meter",
    units="TonC/Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_deep_ocean_4": 1, "layer_depth_4": 1},
)
def c_in_deep_ocean_4_per_meter():
    """
    Carbon in the fourth ocean layer per its meter.
    """
    return c_in_deep_ocean_4() / layer_depth_4()


@component.add(
    name="ppm to GtC", units="GtC/ppm", comp_type="Constant", comp_subtype="Normal"
)
def ppm_to_gtc():
    """
    1 ppm by volume of atmosphere CO2 equals 2.13 GtC
    """
    return 2.13


@component.add(
    name="Eddy diff coeff 1 2",
    units="Meter*Meter/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"eddy_diff_coeff_index_1_2": 1, "eddy_diff_coeff_mean_1_2": 1},
)
def eddy_diff_coeff_1_2():
    """
    Coefficient of carbon diffusion to the second layer of deep ocean.
    """
    return eddy_diff_coeff_index_1_2() * eddy_diff_coeff_mean_1_2()


@component.add(
    name="Eddy diff coeff 2 3",
    units="Meter*Meter/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"eddy_diff_coeff_index_2_3": 1, "eddy_diff_coeff_mean_2_3": 1},
)
def eddy_diff_coeff_2_3():
    """
    Coefficient of carbon diffusion to the third layer of deep ocean.
    """
    return eddy_diff_coeff_index_2_3() * eddy_diff_coeff_mean_2_3()


@component.add(
    name="Eddy diff coeff 3 4",
    units="Meter*Meter/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"eddy_diff_coeff_index_3_4": 1, "eddy_diff_coeff_mean_3_4": 1},
)
def eddy_diff_coeff_3_4():
    """
    Coefficient of carbon diffusion to the fourth layer of deep ocean.
    """
    return eddy_diff_coeff_index_3_4() * eddy_diff_coeff_mean_3_4()


@component.add(
    name="Eddy diff coeff index 1 2",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_index_1_2():
    """
    Index of coefficient for rate at which carbon is mixed in the ocean due to eddy motion, where 1 is equivalent to the expected value of 4400 meter/meter/year.
    """
    return 1


@component.add(
    name="Eddy diff coeff index 2 3",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_index_2_3():
    """
    Index of coefficient for rate at which carbon is mixed in the ocean due to eddy motion, where 1 is equivalent to the expected value of 4400 meter/meter/year.
    """
    return 1


@component.add(
    name="Eddy diff coeff index 3 4",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_index_3_4():
    """
    Index of coefficient for rate at which carbon is mixed in the ocean due to eddy motion, where 1 is equivalent to the expected value of 4400 meter/meter/year.
    """
    return 1


@component.add(
    name="Eddy diff coeff index M 1",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_index_m_1():
    """
    Index of coefficient for rate at which carbon is mixed in the ocean due to eddy motion, where 1 is equivalent to the expected value of 4400 meter/meter/year.
    """
    return 1


@component.add(
    name="Eddy diff coeff mean 1 2",
    units="Meter*Meter/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_mean_1_2():
    """
    Expected value at which carbon is mixed in the ocean due to eddy motion.
    """
    return 4400


@component.add(
    name="Eddy diff coeff mean 2 3",
    units="Meter*Meter/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_mean_2_3():
    """
    Expected value at which carbon is mixed in the ocean due to eddy motion.
    """
    return 4400


@component.add(
    name="Eddy diff coeff mean 3 4",
    units="Meter*Meter/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_mean_3_4():
    """
    Expected value at which carbon is mixed in the ocean due to eddy motion.
    """
    return 4400


@component.add(
    name="Eddy diff coeff mean M 1",
    units="Meter*Meter/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def eddy_diff_coeff_mean_m_1():
    """
    Expected value at which carbon is mixed in the ocean due to eddy motion.
    """
    return 4400


@component.add(
    name="Layer Depth 2", units="Meter", comp_type="Constant", comp_subtype="Normal"
)
def layer_depth_2():
    """
    Depth of the second ocean layer.
    """
    return 300


@component.add(
    name="Layer Depth 3", units="Meter", comp_type="Constant", comp_subtype="Normal"
)
def layer_depth_3():
    """
    Depth of the third ocean layer.
    """
    return 1300


@component.add(
    name="Layer Depth 4", units="Meter", comp_type="Constant", comp_subtype="Normal"
)
def layer_depth_4():
    """
    Depth of the fourth ocean layer.
    """
    return 1800


@component.add(
    name="Layer Time Constant 1 2",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_2": 2, "eddy_diff_coeff_1_2": 1, "layer_depth_1": 1},
)
def layer_time_constant_1_2():
    """
    Time constant of exchange between the first and the second ocean layers.
    """
    return layer_depth_2() / (
        eddy_diff_coeff_1_2() / ((layer_depth_1() + layer_depth_2()) / 2)
    )


@component.add(
    name="Layer Time Constant M 1",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_1": 2, "mixed_layer_depth": 1, "eddy_diff_coeff_m_1": 1},
)
def layer_time_constant_m_1():
    """
    Time constant of exchange between mixed and the first ocean layers.
    """
    return layer_depth_1() / (
        eddy_diff_coeff_m_1() / ((mixed_layer_depth() + layer_depth_1()) / 2)
    )


@component.add(
    name="C in Deep Ocean 1 per meter",
    units="TonC/Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_deep_ocean_1": 1, "layer_depth_1": 1},
)
def c_in_deep_ocean_1_per_meter():
    """
    Carbon in the first ocean layer per its meter.
    """
    return c_in_deep_ocean_1() / layer_depth_1()


@component.add(
    name="C in Deep Ocean 2",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_deep_ocean_2": 1},
    other_deps={
        "_integ_c_in_deep_ocean_2": {
            "initial": {"init_c_in_deep_ocean_2": 1},
            "step": {"diffusion_flux_2": 1, "diffusion_flux_3": 1},
        }
    },
)
def c_in_deep_ocean_2():
    """
    Carbon in the second layer of deep ocean.
    """
    return _integ_c_in_deep_ocean_2()


_integ_c_in_deep_ocean_2 = Integ(
    lambda: diffusion_flux_2() - diffusion_flux_3(),
    lambda: init_c_in_deep_ocean_2(),
    "_integ_c_in_deep_ocean_2",
)


@component.add(
    name="C in Deep Ocean 2 per meter",
    units="TonC/Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_deep_ocean_2": 1, "layer_depth_2": 1},
)
def c_in_deep_ocean_2_per_meter():
    """
    Carbon in the second ocean layer per its meter.
    """
    return c_in_deep_ocean_2() / layer_depth_2()


@component.add(
    name="C in Deep Ocean 3",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_deep_ocean_3": 1},
    other_deps={
        "_integ_c_in_deep_ocean_3": {
            "initial": {"init_c_in_deep_ocean_3": 1},
            "step": {"diffusion_flux_3": 1, "diffusion_flux_4": 1},
        }
    },
)
def c_in_deep_ocean_3():
    """
    Carbon in the third layer of deep ocean.
    """
    return _integ_c_in_deep_ocean_3()


_integ_c_in_deep_ocean_3 = Integ(
    lambda: diffusion_flux_3() - diffusion_flux_4(),
    lambda: init_c_in_deep_ocean_3(),
    "_integ_c_in_deep_ocean_3",
)


@component.add(
    name="Layer Time Constant 2 3",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_3": 2, "layer_depth_2": 1, "eddy_diff_coeff_2_3": 1},
)
def layer_time_constant_2_3():
    """
    Time constant of exchange between the second and the third ocean layers.
    """
    return layer_depth_3() / (
        eddy_diff_coeff_2_3() / ((layer_depth_2() + layer_depth_3()) / 2)
    )


@component.add(
    name="Atmospheric CO2 Law Dome 1850",
    units="ppm",
    comp_type="Constant",
    comp_subtype="Normal",
)
def atmospheric_co2_law_dome_1850():
    """
    Historical CO2 record derived from a spline fit (20 year cutoff) of the Law Dome DE08 and DE08-2 ice cores for year 1850
    """
    return 284.7


@component.add(
    name="Layer Depth 1", units="Meter", comp_type="Constant", comp_subtype="Normal"
)
def layer_depth_1():
    """
    Depth of the first ocean layer.
    """
    return 300


@component.add(
    name="Mean Depth of Adjacent 2 3 Layers",
    units="Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_2": 1, "layer_depth_3": 1},
)
def mean_depth_of_adjacent_2_3_layers():
    """
    Mean depth of the second and the third ocean layers.
    """
    return (layer_depth_2() + layer_depth_3()) / 2


@component.add(
    name="C in Mixed Layer per meter",
    units="TonC/Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_mixed_layer": 1, "mixed_layer_depth": 1},
)
def c_in_mixed_layer_per_meter():
    """
    Carbon in mixed layer per its meter.
    """
    return c_in_mixed_layer() / mixed_layer_depth()


@component.add(
    name="GtC to TonC", units="TonC/GtC", comp_type="Constant", comp_subtype="Normal"
)
def gtc_to_tonc():
    """
    1 GtC equals 1000000000 tons of carbon
    """
    return 1000000000.0


@component.add(
    name="Layer Time Constant 3 4",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_4": 2, "layer_depth_3": 1, "eddy_diff_coeff_3_4": 1},
)
def layer_time_constant_3_4():
    """
    Time constant of exchange between the third and the fourth ocean layers.
    """
    return layer_depth_4() / (
        eddy_diff_coeff_3_4() / ((layer_depth_3() + layer_depth_4()) / 2)
    )


@component.add(
    name="Mean Depth of Adjacent 1 2 Layers",
    units="Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_1": 1, "layer_depth_2": 1},
)
def mean_depth_of_adjacent_1_2_layers():
    """
    Mean depth of the first and the second ocean layers.
    """
    return (layer_depth_1() + layer_depth_2()) / 2


@component.add(
    name="Preindustrial Ocean C per meter",
    units="TonC/m",
    comp_type="Constant",
    comp_subtype="Normal",
)
def preindustrial_ocean_c_per_meter():
    """
    Preindustrial carbon content in ocean per meter.
    """
    return 9000000000.0


@component.add(
    name="Mean Depth of Adjacent M 1 Layers",
    units="Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mixed_layer_depth": 1, "layer_depth_1": 1},
)
def mean_depth_of_adjacent_m_1_layers():
    """
    Mean depth of mixed and the first ocean layers.
    """
    return (mixed_layer_depth() + layer_depth_1()) / 2


@component.add(
    name="Diffusion Flux 2",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_in_deep_ocean_1_per_meter": 1,
        "c_in_deep_ocean_2_per_meter": 1,
        "eddy_diff_coeff_1_2": 1,
        "mean_depth_of_adjacent_1_2_layers": 1,
    },
)
def diffusion_flux_2():
    """
    Diffusion flux between the first and the second ocean layers.
    """
    return (
        (c_in_deep_ocean_1_per_meter() - c_in_deep_ocean_2_per_meter())
        * eddy_diff_coeff_1_2()
        / mean_depth_of_adjacent_1_2_layers()
    )


@component.add(
    name="Mean Depth of Adjacent 3 4 Layers",
    units="Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"layer_depth_3": 1, "layer_depth_4": 1},
)
def mean_depth_of_adjacent_3_4_layers():
    """
    Mean depth of the third and the fourth ocean layers.
    """
    return (layer_depth_3() + layer_depth_4()) / 2


@component.add(
    name="Ton C to kg CO2",
    units="kgCO2/TonC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def ton_c_to_kg_co2():
    """
    Conversion from TonC to kgCO2.
    """
    return 3670


@component.add(
    name="Mtoe to GJ", units="GJ/Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def mtoe_to_gj():
    """
    Conversion from Mtoe to GJ.
    """
    return 41868000.0


@component.add(
    name="Reference C Emission from Agricultural Land Use",
    units="TonC/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_c_emission_from_agricultural_land_use():
    """
    Reference value of carbon emission from unit agricultural land change.
    """
    return 650000000.0


@component.add(
    name="Reference C Emission from Forest Land Use",
    units="TonC/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_c_emission_from_forest_land_use():
    """
    Reference value of carbon emission from unit forest land change.
    """
    return 450000000.0


@component.add(
    name="Forest Land Change",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_land": 1, "init_forest_land": 1},
)
def forest_land_change():
    """
    Ratio of forest land area change compared to its initial area in year 1900.
    """
    return forest_land() / init_forest_land()


@component.add(
    name="CCS Improvement",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ccs_improvement": 1},
    other_deps={
        "_integ_ccs_improvement": {
            "initial": {"init_ccs_improvement": 1},
            "step": {"ccs_improvement_change": 1},
        }
    },
)
def ccs_improvement():
    """
    Accumulated improvement of carbon capture and storage technology.
    """
    return _integ_ccs_improvement()


_integ_ccs_improvement = Integ(
    lambda: ccs_improvement_change(),
    lambda: init_ccs_improvement(),
    "_integ_ccs_improvement",
)


@component.add(
    name="CCS Improvement Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_ccs_improvement_factor": 2,
        "ccs_improvement": 2,
        "max_ccs_improvement_factor": 1,
    },
)
def ccs_improvement_factor():
    """
    Impact of carbon capture and storage on carbon intensity of emissions from fossil fuels. Scaled between min and max improvement factor.
    """
    return min_ccs_improvement_factor() + (
        max_ccs_improvement_factor() - min_ccs_improvement_factor()
    ) * (ccs_improvement() / (ccs_improvement() + 1))


@component.add(
    name="MIN CCS Improvement Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_ccs_improvement_factor():
    """
    Min impact of carbon capture and storage on carbon intensity of emissions from fossil fuels.
    """
    return 0


@component.add(
    name="MAX CCS Improvement Factor",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_ccs_improvement_factor():
    """
    Max impact of carbon capture and storage on carbon intensity of emissions from fossil fuels.
    """
    return 1


@component.add(
    name="Total C Emission from Renewables",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_emission_from_biomass_energy": 1,
        "c_emission_from_solar_energy": 1,
        "c_emission_from_wind_energy": 1,
    },
)
def total_c_emission_from_renewables():
    """
    Total carbon emission from renewable energy sources.
    """
    return (
        c_emission_from_biomass_energy()
        + c_emission_from_solar_energy()
        + c_emission_from_wind_energy()
    )


@component.add(
    name="INIT C in Humus",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_init_c_in_humus": 1},
    other_deps={
        "_initial_init_c_in_humus": {
            "initial": {"flux_biomass_to_humus": 1, "humus_res_time": 1},
            "step": {},
        }
    },
)
def init_c_in_humus():
    """
    Inital carbon in humus.
    """
    return _initial_init_c_in_humus()


_initial_init_c_in_humus = Initial(
    lambda: flux_biomass_to_humus() * humus_res_time(), "_initial_init_c_in_humus"
)


@component.add(
    name="INIT C in Biomass",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_init_c_in_biomass": 1},
    other_deps={
        "_initial_init_c_in_biomass": {
            "initial": {"flux_atmosphere_to_biomass": 1, "biomass_res_time": 1},
            "step": {},
        }
    },
)
def init_c_in_biomass():
    """
    Initial carbon in biomass.
    """
    return _initial_init_c_in_biomass()


_initial_init_c_in_biomass = Initial(
    lambda: flux_atmosphere_to_biomass() * biomass_res_time(),
    "_initial_init_c_in_biomass",
)


@component.add(
    name="Preindustrial C in Mixed Layer",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"preindustrial_ocean_c_per_meter": 1, "mixed_layer_depth": 1},
)
def preindustrial_c_in_mixed_layer():
    """
    Initial carbon content of mixed ocean layer.
    """
    return preindustrial_ocean_c_per_meter() * mixed_layer_depth()


@component.add(
    name="Buffer Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ref_buffer_factor": 1,
        "preindustrial_c_in_mixed_layer": 1,
        "c_in_mixed_layer": 1,
        "buff_c_coeff": 1,
    },
)
def buffer_factor():
    """
    Buffer factor for atmosphere/mixed ocean carbon equilibration.
    """
    return (
        ref_buffer_factor()
        * (c_in_mixed_layer() / preindustrial_c_in_mixed_layer()) ** buff_c_coeff()
    )


@component.add(
    name="INIT C in Atmosphere",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"atmospheric_co2_law_dome_1850": 1, "gtc_to_tonc": 1, "ppm_to_gtc": 1},
)
def init_c_in_atmosphere():
    """
    Initial carbon in atmosphere.
    """
    return atmospheric_co2_law_dome_1850() * gtc_to_tonc() * ppm_to_gtc()


@component.add(
    name="C in Deep Ocean 1",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_deep_ocean_1": 1},
    other_deps={
        "_integ_c_in_deep_ocean_1": {
            "initial": {"init_c_in_deep_ocean_1": 1},
            "step": {"diffusion_flux_1": 1, "diffusion_flux_2": 1},
        }
    },
)
def c_in_deep_ocean_1():
    """
    Carbon in the first layer of deep ocean.
    """
    return _integ_c_in_deep_ocean_1()


_integ_c_in_deep_ocean_1 = Integ(
    lambda: diffusion_flux_1() - diffusion_flux_2(),
    lambda: init_c_in_deep_ocean_1(),
    "_integ_c_in_deep_ocean_1",
)


@component.add(
    name="Eddy diff coeff M 1",
    units="Meter*Meter/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"eddy_diff_coeff_index_m_1": 1, "eddy_diff_coeff_mean_m_1": 1},
)
def eddy_diff_coeff_m_1():
    """
    Coefficient of carbon diffusion to the first layer of deep ocean.
    """
    return eddy_diff_coeff_index_m_1() * eddy_diff_coeff_mean_m_1()


@component.add(
    name="Diffusion Flux 1",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "c_in_mixed_layer_per_meter": 1,
        "c_in_deep_ocean_1_per_meter": 1,
        "eddy_diff_coeff_m_1": 1,
        "mean_depth_of_adjacent_m_1_layers": 1,
    },
)
def diffusion_flux_1():
    """
    Diffusion flux between mixed and the first ocean layers.
    """
    return (
        (c_in_mixed_layer_per_meter() - c_in_deep_ocean_1_per_meter())
        * eddy_diff_coeff_m_1()
        / mean_depth_of_adjacent_m_1_layers()
    )


@component.add(
    name="C Concentration Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_atmosphere": 1, "init_c_in_atmosphere": 1},
)
def c_concentration_ratio():
    """
    Current to initial carbon concentration in atmosphere.
    """
    return c_in_atmosphere() / init_c_in_atmosphere()


@component.add(
    name="Preindustrial C in Atmosphere",
    units="TonC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def preindustrial_c_in_atmosphere():
    """
    Preindustrial carbon content of atmosphere.
    """
    return 590000000000.0


@component.add(
    name="Flux Biomass to Humus",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_biomass": 1, "biomass_res_time": 1, "humification_fraction": 1},
)
def flux_biomass_to_humus():
    """
    Carbon flux from biomass to humus.
    """
    return (c_in_biomass() / biomass_res_time()) * humification_fraction()


@component.add(
    name="Flux Biomass to Atmosphere",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_biomass": 1, "biomass_res_time": 1, "humification_fraction": 1},
)
def flux_biomass_to_atmosphere():
    """
    Carbon flux from biomass to atmosphere.
    """
    return (c_in_biomass() / biomass_res_time()) * (1 - humification_fraction())


@component.add(
    name="Biomass Res Time", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def biomass_res_time():
    """
    Average residence time of carbon in biomass.
    """
    return 10.6


@component.add(
    name="Biostimulation Coefficient",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biostimulation_coefficient():
    """
    Coefficient for response of primary production to carbon concentration.
    """
    return 0.35


@component.add(
    name="Buff C Coeff", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def buff_c_coeff():
    """
    Coefficient of carbon concentration influence on buffer factor.
    """
    return 3.92


@component.add(
    name="C in Biomass",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_biomass": 1},
    other_deps={
        "_integ_c_in_biomass": {
            "initial": {"init_c_in_biomass": 1},
            "step": {
                "flux_atmosphere_to_biomass": 1,
                "flux_biomass_to_atmosphere": 1,
                "flux_biomass_to_humus": 1,
            },
        }
    },
)
def c_in_biomass():
    """
    Carbon in biosphere (biomass, litter, and humus)
    """
    return _integ_c_in_biomass()


_integ_c_in_biomass = Integ(
    lambda: flux_atmosphere_to_biomass()
    - flux_biomass_to_atmosphere()
    - flux_biomass_to_humus(),
    lambda: init_c_in_biomass(),
    "_integ_c_in_biomass",
)


@component.add(
    name="C in Humus",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_humus": 1},
    other_deps={
        "_integ_c_in_humus": {
            "initial": {"init_c_in_humus": 1},
            "step": {"flux_biomass_to_humus": 1, "flux_humus_to_atmosphere": 1},
        }
    },
)
def c_in_humus():
    """
    Carbon in humus.
    """
    return _integ_c_in_humus()


_integ_c_in_humus = Integ(
    lambda: flux_biomass_to_humus() - flux_humus_to_atmosphere(),
    lambda: init_c_in_humus(),
    "_integ_c_in_humus",
)


@component.add(
    name="C in Mixed Layer",
    units="TonC",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_c_in_mixed_layer": 1},
    other_deps={
        "_integ_c_in_mixed_layer": {
            "initial": {"init_c_in_mixed_ocean": 1},
            "step": {"flux_atmosphere_to_ocean": 1, "diffusion_flux_1": 1},
        }
    },
)
def c_in_mixed_layer():
    """
    Carbon in mixed layer.
    """
    return _integ_c_in_mixed_layer()


_integ_c_in_mixed_layer = Integ(
    lambda: flux_atmosphere_to_ocean() - diffusion_flux_1(),
    lambda: init_c_in_mixed_ocean(),
    "_integ_c_in_mixed_layer",
)


@component.add(
    name="Flux Humus to Atmosphere",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_humus": 1, "humus_res_time": 1},
)
def flux_humus_to_atmosphere():
    """
    Carbon flux from humus to atmosphere.
    """
    return c_in_humus() / humus_res_time()


@component.add(
    name="Humification Fraction",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def humification_fraction():
    """
    Fraction of carbon outflow from biomass that enters humus stock.
    """
    return 0.428


@component.add(
    name="Humus Res Time", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def humus_res_time():
    """
    Average carbon residence time in humus.
    """
    return 27.8


@component.add(
    name="INIT C in Deep Ocean 1",
    units="TonC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"init_c_in_deep_ocean_per_meter": 1, "layer_depth_1": 1},
)
def init_c_in_deep_ocean_1():
    """
    Initial carbon in the first layer of deep ocean. was constant at 3.115e+012 in the earlier versions of the model.
    """
    return init_c_in_deep_ocean_per_meter() * layer_depth_1()


@component.add(
    name="INIT C in Mixed Ocean",
    units="TonC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_c_in_mixed_ocean():
    """
    Initial carbon in mixed ocean layer.
    """
    return 901800000000.0


@component.add(
    name="Initial Net Primary Production",
    units="TonC/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_net_primary_production():
    """
    Initial net primary production.
    """
    return 85177100000.0


@component.add(
    name="Mixed Layer Depth", units="Meter", comp_type="Constant", comp_subtype="Normal"
)
def mixed_layer_depth():
    """
    Mixed ocean layer depth.
    """
    return 100


@component.add(
    name="Mixing Time", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def mixing_time():
    """
    Atmosphere - mixed ocean layer mixing time.
    """
    return 1


@component.add(
    name="Ref Buffer Factor", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def ref_buffer_factor():
    """
    Normal buffer factor.
    """
    return 9.7


@component.add(
    name="C Intensity of Emission from Oil",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_c_intensity_of_emission_from_oil": 1,
        "ccs_improvement_factor": 1,
    },
)
def c_intensity_of_emission_from_oil():
    """
    Carbon intensity from oil energy production and it use.
    """
    return normal_c_intensity_of_emission_from_oil() * (1 - ccs_improvement_factor())


@component.add(
    name="C Intensity of Emission from Coal",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_c_intensity_of_emission_from_coal": 1,
        "ccs_improvement_factor": 1,
    },
)
def c_intensity_of_emission_from_coal():
    """
    Carbon intensity from coal energy production and it use.
    """
    return normal_c_intensity_of_emission_from_coal() * (1 - ccs_improvement_factor())


@component.add(
    name="C Intensity of Emission from Gas",
    units="TonC/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_c_intensity_of_emission_from_gas": 1,
        "ccs_improvement_factor": 1,
    },
)
def c_intensity_of_emission_from_gas():
    """
    Carbon intensity from gas energy production and it use.
    """
    return normal_c_intensity_of_emission_from_gas() * (1 - ccs_improvement_factor())


@component.add(
    name="Total C Emission from the Energy Sector",
    units="TonC/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_c_emission_from_fossil_fuels": 1,
        "total_c_emission_from_renewables": 1,
    },
)
def total_c_emission_from_the_energy_sector():
    """
    Total carbon emission from energy production and it use.
    """
    return total_c_emission_from_fossil_fuels() + total_c_emission_from_renewables()


@component.add(
    name="C Intensity of Emission from Wind Energy",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def c_intensity_of_emission_from_wind_energy():
    """
    Carbon intensity from wind energy production and it use. Felix1: 27000 IPCC: med: 139560 min: 93040
    """
    return 27000


@component.add(
    name="C Intensity of Emission from Solar Energy",
    units="TonC/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def c_intensity_of_emission_from_solar_energy():
    """
    Carbon intensity from solar energy production and it use. fELIX1: 43200 IPCC: med: 476830 min:302380
    """
    return 43200


@component.add(
    name="Effect of Coal Demand and Supply on Price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sc_init": 1,
        "potential_coal_production": 1,
        "sensitivity_of_coal_price_to_supply_and_demand": 1,
        "total_coal_demand": 1,
    },
)
def effect_of_coal_demand_and_supply_on_price():
    """
    Effect of Coal Demand and Supply ratio on actual coal price.
    """
    return (
        sc_init()
        * (total_coal_demand() / potential_coal_production())
        ** sensitivity_of_coal_price_to_supply_and_demand()
    )


@component.add(
    name="Productivity of Investment in Coal Production",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_coal_production_compared_to_exploration": 1,
        "coal_productivity_of_investment": 1,
    },
)
def productivity_of_investment_in_coal_production():
    """
    Parameter indicating the amount of coal resources possible to be recovered per unit investment spent.
    """
    return (
        relative_productivity_of_investment_in_coal_production_compared_to_exploration()
        * coal_productivity_of_investment()
    )


@component.add(
    name="Investment in Coal Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_coal_revenues_invested_in_technology": 1,
        "coal_revenue": 1,
    },
)
def investment_in_coal_technology():
    """
    Investments in development of coal exploration and production technology.
    """
    return fraction_of_coal_revenues_invested_in_technology() * coal_revenue()


@component.add(
    name="Productivity of Investment in Coal Exploration",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_coal_exploration": 1,
        "effect_of_technology_on_coal_discoveries": 1,
    },
)
def productivity_of_investment_in_coal_exploration():
    """
    Parameter indicating the amount of coal resources possible to be explored per unit investment spent.
    """
    return float(
        np.maximum(
            0,
            relative_productivity_of_investment_in_coal_exploration()
            * effect_of_technology_on_coal_discoveries(),
        )
    )


@component.add(
    name="Investment in Coal Production Delay",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"ic_var_s": 1, "_smooth_investment_in_coal_production_delay": 1},
    other_deps={
        "_smooth_investment_in_coal_production_delay": {
            "initial": {
                "investment_in_coal_exploration_and_production_delay_variation": 1,
                "ic_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "investment_in_coal_exploration_and_production_delay_variation": 1,
                "ic_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def investment_in_coal_production_delay():
    """
    Time delay to make investments in coal production effective.
    """
    return ic_var_s() + _smooth_investment_in_coal_production_delay()


_smooth_investment_in_coal_production_delay = Smooth(
    lambda: step(
        __data["time"],
        investment_in_coal_exploration_and_production_delay_variation() - ic_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        investment_in_coal_exploration_and_production_delay_variation() - ic_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_investment_in_coal_production_delay",
)


@component.add(
    name="Increase in Ratio of Coal Fraction Recoverable to Unrecoverable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ircfrulv3": 1},
)
def increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable():
    """
    Increase in Ratio of Coal Fraction Recoverable to Unrecoverable due to investments in recovery technology and their productivity.
    """
    return outflow_ircfrulv3()


@component.add(
    name="Increase in Ratio of Coal Fraction Discoverable to Undiscoverable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ircfdulv3": 1},
)
def increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable():
    """
    Increase in Ratio of Coal Fraction Discoverable to Undiscoverable due to investments in discovery technology and their productivity.
    """
    return outflow_ircfdulv3()


@component.add(
    name="Unit Cost of Coal Production",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_coal_production": 1,
        "toe_per_mtoe": 1,
        "carbon_price": 1,
        "co2_intensity_of_fuels": 1,
        "climate_policy_scenario": 1,
    },
)
def unit_cost_of_coal_production():
    """
    Unit cost of coal production. ZIDZ(1, Productivity of Investment in Coal Production/Million toe per Mtoe)
    """
    return (
        1 / productivity_of_investment_in_coal_production() * toe_per_mtoe()
        + climate_policy_scenario()
        * float(co2_intensity_of_fuels().loc["Coal"])
        * carbon_price()
    )


@component.add(
    name="Coal Cost",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"unit_cost_of_coal_exploration": 1, "unit_cost_of_coal_production": 1},
)
def coal_cost():
    """
    Cost of unit coal resources as a sum of unit exploration and production costs.
    """
    return unit_cost_of_coal_exploration() + unit_cost_of_coal_production()


@component.add(
    name="Desired Investment in Coal Exploration",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_coal_exploration_rate": 1, "unit_cost_of_coal_exploration": 1},
)
def desired_investment_in_coal_exploration():
    """
    Desired amount of resources that need to be invested in order to secure desired coal exploration.
    """
    return desired_coal_exploration_rate() * unit_cost_of_coal_exploration()


@component.add(
    name="Unit Cost of Coal Exploration",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_unit_cost_of_coal_exploration": 1,
        "toe_per_mtoe": 1,
        "productivity_of_investment_in_coal_exploration": 2,
    },
)
def unit_cost_of_coal_exploration():
    """
    Unit cost of coal exploration. Depends on remaining undiscovered coal resources and advances in exploration technologies.
    """
    return float(
        np.minimum(
            max_unit_cost_of_coal_exploration(),
            if_then_else(
                productivity_of_investment_in_coal_exploration() == 0,
                lambda: 0,
                lambda: 1
                / productivity_of_investment_in_coal_exploration()
                * toe_per_mtoe(),
            ),
        )
    )


@component.add(
    name="INIT UCRN",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"uc_var_s": 1, "_smooth_init_ucrn": 1},
    other_deps={
        "_smooth_init_ucrn": {
            "initial": {
                "undiscovered_coal_resources_variation": 1,
                "uc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "undiscovered_coal_resources_variation": 1,
                "uc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def init_ucrn():
    """
    Initial amount of Undiscovered Coal Resources.
    """
    return uc_var_s() + _smooth_init_ucrn()


_smooth_init_ucrn = Smooth(
    lambda: step(
        __data["time"],
        undiscovered_coal_resources_variation() - uc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        undiscovered_coal_resources_variation() - uc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_init_ucrn",
)


@component.add(
    name="Relative Productivity of Investment in Coal Exploration",
    units="toe/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "rpc_var_s": 1,
        "_smooth_relative_productivity_of_investment_in_coal_exploration": 1,
    },
    other_deps={
        "_smooth_relative_productivity_of_investment_in_coal_exploration": {
            "initial": {
                "relative_productivity_of_investment_in_coal_exploration_variation": 1,
                "rpc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "relative_productivity_of_investment_in_coal_exploration_variation": 1,
                "rpc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def relative_productivity_of_investment_in_coal_exploration():
    """
    Relative Productivity of Investment in Coal Exploration without taking into account remaining undiscovered coal resources and advances in exploration technologies.
    """
    return (
        rpc_var_s() + _smooth_relative_productivity_of_investment_in_coal_exploration()
    )


_smooth_relative_productivity_of_investment_in_coal_exploration = Smooth(
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_coal_exploration_variation()
        - rpc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_coal_exploration_variation()
        - rpc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_relative_productivity_of_investment_in_coal_exploration",
)


@component.add(
    name="Max Unit Cost of Coal Exploration",
    units="$/Mtoe",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"mfc_var_s": 1, "_smooth_max_unit_cost_of_coal_exploration": 1},
    other_deps={
        "_smooth_max_unit_cost_of_coal_exploration": {
            "initial": {
                "max_unit_cost_of_fossil_fuel_exploration_variation": 1,
                "mfc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "max_unit_cost_of_fossil_fuel_exploration_variation": 1,
                "mfc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def max_unit_cost_of_coal_exploration():
    """
    Upper level limit for unit cost of coal exploration.
    """
    return mfc_var_s() + _smooth_max_unit_cost_of_coal_exploration()


_smooth_max_unit_cost_of_coal_exploration = Smooth(
    lambda: step(
        __data["time"],
        max_unit_cost_of_fossil_fuel_exploration_variation() - mfc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        max_unit_cost_of_fossil_fuel_exploration_variation() - mfc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_max_unit_cost_of_coal_exploration",
)


@component.add(
    name="Fraction of Coal Revenues Invested in Technology",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "fc_var_s": 1,
        "_smooth_fraction_of_coal_revenues_invested_in_technology": 1,
    },
    other_deps={
        "_smooth_fraction_of_coal_revenues_invested_in_technology": {
            "initial": {
                "fraction_of_coal_revenues_invested_in_technology_variation": 1,
                "fc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "fraction_of_coal_revenues_invested_in_technology_variation": 1,
                "fc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def fraction_of_coal_revenues_invested_in_technology():
    """
    Percentage of total coal sector revenue dedicated to exploration and production technology development.
    """
    return fc_var_s() + _smooth_fraction_of_coal_revenues_invested_in_technology()


_smooth_fraction_of_coal_revenues_invested_in_technology = Smooth(
    lambda: step(
        __data["time"],
        fraction_of_coal_revenues_invested_in_technology_variation() - fc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        fraction_of_coal_revenues_invested_in_technology_variation() - fc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_fraction_of_coal_revenues_invested_in_technology",
)


@component.add(
    name="Price Elasticity of Demand Gas",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"peg_var_s": 1, "_smooth_price_elasticity_of_demand_gas": 1},
    other_deps={
        "_smooth_price_elasticity_of_demand_gas": {
            "initial": {
                "price_elasticity_of_demand_gas_variation": 1,
                "peg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "price_elasticity_of_demand_gas_variation": 1,
                "peg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def price_elasticity_of_demand_gas():
    """
    Gas energy price elasticity of demand.
    """
    return peg_var_s() + _smooth_price_elasticity_of_demand_gas()


_smooth_price_elasticity_of_demand_gas = Smooth(
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_gas_variation() - peg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_gas_variation() - peg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_price_elasticity_of_demand_gas",
)


@component.add(
    name="Effectiveness of Investment in Coal Recovery Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_coal_recovery_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_coal_recovery_technology():
    """
    Effectiveness of resources dedicated to coal recovery technology development.
    """
    return 1.3e-12 + step(
        __data["time"],
        effectiveness_of_investment_in_coal_recovery_technology_variation() - 1.3e-12,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Coal Discovery Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_coal_discovery_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_coal_discovery_technology():
    """
    Effectiveness of resources dedicated to coal discovery technology development.
    """
    return 1.62e-11 + step(
        __data["time"],
        effectiveness_of_investment_in_coal_discovery_technology_variation() - 1.62e-11,
        2020,
    )


@component.add(
    name="Coal Recovery Technology Development Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"cdr_var_s": 1, "_smooth_coal_recovery_technology_development_time": 1},
    other_deps={
        "_smooth_coal_recovery_technology_development_time": {
            "initial": {
                "coal_discovery_and_recovery_technology_development_time_variation": 1,
                "cdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "coal_discovery_and_recovery_technology_development_time_variation": 1,
                "cdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def coal_recovery_technology_development_time():
    """
    Average time required to turn investments into concrete coal recovery developments.
    """
    return cdr_var_s() + _smooth_coal_recovery_technology_development_time()


_smooth_coal_recovery_technology_development_time = Smooth(
    lambda: step(
        __data["time"],
        coal_discovery_and_recovery_technology_development_time_variation()
        - cdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        coal_discovery_and_recovery_technology_development_time_variation()
        - cdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_coal_recovery_technology_development_time",
)


@component.add(
    name="Coal Discovery Technology Development Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "cdr_var_s": 1,
        "_smooth_coal_discovery_technology_development_time": 1,
    },
    other_deps={
        "_smooth_coal_discovery_technology_development_time": {
            "initial": {
                "coal_discovery_and_recovery_technology_development_time_variation": 1,
                "cdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "coal_discovery_and_recovery_technology_development_time_variation": 1,
                "cdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def coal_discovery_technology_development_time():
    """
    Average time required to turn investments into concrete coal discovery developments.
    """
    return cdr_var_s() + _smooth_coal_discovery_technology_development_time()


_smooth_coal_discovery_technology_development_time = Smooth(
    lambda: step(
        __data["time"],
        coal_discovery_and_recovery_technology_development_time_variation()
        - cdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        coal_discovery_and_recovery_technology_development_time_variation()
        - cdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_coal_discovery_technology_development_time",
)


@component.add(
    name="Sensitivity of Coal Price to Supply and Demand",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "sco_var_s": 1,
        "_smooth_sensitivity_of_coal_price_to_supply_and_demand": 1,
    },
    other_deps={
        "_smooth_sensitivity_of_coal_price_to_supply_and_demand": {
            "initial": {
                "sensitivity_of_coal_price_to_supply_and_demand_variation": 1,
                "sco_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "sensitivity_of_coal_price_to_supply_and_demand_variation": 1,
                "sco_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def sensitivity_of_coal_price_to_supply_and_demand():
    """
    Sensitivity of Coal Price to Supply and Demand ratio.
    """
    return sco_var_s() + _smooth_sensitivity_of_coal_price_to_supply_and_demand()


_smooth_sensitivity_of_coal_price_to_supply_and_demand = Smooth(
    lambda: step(
        __data["time"],
        sensitivity_of_coal_price_to_supply_and_demand_variation() - sco_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        sensitivity_of_coal_price_to_supply_and_demand_variation() - sco_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_sensitivity_of_coal_price_to_supply_and_demand",
)


@component.add(
    name="Relative Productivity of Investment in Coal Production Compared to Exploration",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "rpcpe_var_s": 1,
        "_smooth_relative_productivity_of_investment_in_coal_production_compared_to_exploration": 1,
    },
    other_deps={
        "_smooth_relative_productivity_of_investment_in_coal_production_compared_to_exploration": {
            "initial": {
                "relative_productivity_of_investment_in_coal_production_compared_to_exploration_variation": 1,
                "rpcpe_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "relative_productivity_of_investment_in_coal_production_compared_to_exploration_variation": 1,
                "rpcpe_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def relative_productivity_of_investment_in_coal_production_compared_to_exploration():
    """
    Relative Productivity of Investment in Coal Production as a multiplier of Productivity of Investment in Coal Exploration.
    """
    return (
        rpcpe_var_s()
        + _smooth_relative_productivity_of_investment_in_coal_production_compared_to_exploration()
    )


_smooth_relative_productivity_of_investment_in_coal_production_compared_to_exploration = Smooth(
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_coal_production_compared_to_exploration_variation()
        - rpcpe_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_coal_production_compared_to_exploration_variation()
        - rpcpe_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_relative_productivity_of_investment_in_coal_production_compared_to_exploration",
)


@component.add(
    name="Investment in Coal Exploration Delay",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"ic_var_s": 1, "_smooth_investment_in_coal_exploration_delay": 1},
    other_deps={
        "_smooth_investment_in_coal_exploration_delay": {
            "initial": {
                "investment_in_coal_exploration_and_production_delay_variation": 1,
                "ic_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "investment_in_coal_exploration_and_production_delay_variation": 1,
                "ic_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def investment_in_coal_exploration_delay():
    """
    Time delay to make investments in coal exploration effective.
    """
    return ic_var_s() + _smooth_investment_in_coal_exploration_delay()


_smooth_investment_in_coal_exploration_delay = Smooth(
    lambda: step(
        __data["time"],
        investment_in_coal_exploration_and_production_delay_variation() - ic_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        investment_in_coal_exploration_and_production_delay_variation() - ic_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_investment_in_coal_exploration_delay",
)


@component.add(
    name="Effective Investment in Coal Exploration",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_effective_investment_in_coal_exploration": 1},
    other_deps={
        "_integ_effective_investment_in_coal_exploration": {
            "initial": {"init_eice": 1},
            "step": {"change_in_effective_investment_in_coal_exploration": 1},
        }
    },
)
def effective_investment_in_coal_exploration():
    """
    Effective investments dedicated for coal resources exploration.
    """
    return _integ_effective_investment_in_coal_exploration()


_integ_effective_investment_in_coal_exploration = Integ(
    lambda: change_in_effective_investment_in_coal_exploration(),
    lambda: init_eice(),
    "_integ_effective_investment_in_coal_exploration",
)


@component.add(
    name="Potential Coal Production from Investment",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_coal_production": 1,
        "effective_investment_in_coal_production": 1,
        "toe_per_mtoe": 1,
    },
)
def potential_coal_production_from_investment():
    """
    Potential Coal Production due to available investments in coal resources recovery.
    """
    return (
        productivity_of_investment_in_coal_production()
        * effective_investment_in_coal_production()
        / toe_per_mtoe()
    )


@component.add(
    name="Potential Coal Exploration",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effective_investment_in_coal_exploration": 1,
        "productivity_of_investment_in_coal_exploration": 1,
        "toe_per_mtoe": 1,
    },
)
def potential_coal_exploration():
    """
    Potential Coal exploration due to available investments in coal resources discovery.
    """
    return (
        effective_investment_in_coal_exploration()
        * productivity_of_investment_in_coal_exploration()
        / toe_per_mtoe()
    )


@component.add(
    name="Desired Investment in Coal Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_coal_production_from_resources": 1,
        "total_coal_demand": 1,
        "productivity_of_investment_in_coal_production": 1,
        "toe_per_mtoe": 1,
    },
)
def desired_investment_in_coal_production():
    """
    Desired Investment in Coal Production due to Total Coal Demand and Productivity of Investment in Coal Production.
    """
    return (
        float(
            np.minimum(potential_coal_production_from_resources(), total_coal_demand())
        )
        / productivity_of_investment_in_coal_production()
        * toe_per_mtoe()
    )


@component.add(
    name="Desired Investment in Oil Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_oil_production_from_resources": 1,
        "total_oil_demand": 1,
        "productivity_of_investment_in_oil_production": 1,
        "toe_per_mtoe": 1,
    },
)
def desired_investment_in_oil_production():
    """
    Desired Investment in Oil Production due to Total Oil Demand and Productivity of Investment in Oil Production.
    """
    return (
        float(np.minimum(potential_oil_production_from_resources(), total_oil_demand()))
        / productivity_of_investment_in_oil_production()
        * toe_per_mtoe()
    )


@component.add(
    name="Coal Productivity of Investment",
    units="toe/$",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_coal_productivity_of_investment": 1},
    other_deps={
        "_integ_coal_productivity_of_investment": {
            "initial": {"init_cpi": 1},
            "step": {"change_in_coal_productivity_of_investment": 1},
        }
    },
)
def coal_productivity_of_investment():
    """
    Factor indicating productivity of investments in coal production.
    """
    return _integ_coal_productivity_of_investment()


_integ_coal_productivity_of_investment = Integ(
    lambda: change_in_coal_productivity_of_investment(),
    lambda: init_cpi(),
    "_integ_coal_productivity_of_investment",
)


@component.add(
    name="Change in Average Coal Production",
    units="Mtoe/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coal_production": 1,
        "average_coal_production": 1,
        "time_to_average_coal_production": 1,
    },
)
def change_in_average_coal_production():
    """
    Change in Average Coal Production.
    """
    return (
        coal_production() - average_coal_production()
    ) / time_to_average_coal_production()


@component.add(
    name="Change in Coal Productivity of Investment",
    units="toe/(Year*$)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_coal_exploration": 1,
        "coal_productivity_of_investment": 1,
        "coal_production_coverage": 1,
    },
)
def change_in_coal_productivity_of_investment():
    """
    Change in Coal Productivity of Investment.
    """
    return (
        productivity_of_investment_in_coal_exploration()
        - coal_productivity_of_investment()
    ) / coal_production_coverage()


@component.add(
    name="Change in Effective Investment in Coal Production",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_coal_production": 1,
        "effective_investment_in_coal_production": 1,
        "investment_in_coal_production_delay": 1,
    },
)
def change_in_effective_investment_in_coal_production():
    """
    Change in Effective Investment in Coal Production.
    """
    return (
        investment_in_coal_production() - effective_investment_in_coal_production()
    ) / investment_in_coal_production_delay()


@component.add(
    name="Change in Effective Investment in Coal Exploration",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_coal_exploration": 1,
        "effective_investment_in_coal_exploration": 1,
        "investment_in_coal_exploration_delay": 1,
    },
)
def change_in_effective_investment_in_coal_exploration():
    """
    Change in Effective Investment in Coal Exploration.
    """
    return (
        investment_in_coal_exploration() - effective_investment_in_coal_exploration()
    ) / investment_in_coal_exploration_delay()


@component.add(
    name="Effective Investment in Coal Production",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_effective_investment_in_coal_production": 1},
    other_deps={
        "_integ_effective_investment_in_coal_production": {
            "initial": {"init_eicp": 1},
            "step": {"change_in_effective_investment_in_coal_production": 1},
        }
    },
)
def effective_investment_in_coal_production():
    """
    Effective investments dedicated for coal resources production.
    """
    return _integ_effective_investment_in_coal_production()


_integ_effective_investment_in_coal_production = Integ(
    lambda: change_in_effective_investment_in_coal_production(),
    lambda: init_eicp(),
    "_integ_effective_investment_in_coal_production",
)


@component.add(
    name="Average Coal Production",
    units="Mtoe/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_coal_production": 1},
    other_deps={
        "_integ_average_coal_production": {
            "initial": {"init_average_coal_production": 1},
            "step": {"change_in_average_coal_production": 1},
        }
    },
)
def average_coal_production():
    """
    Average total coal production per year.
    """
    return _integ_average_coal_production()


_integ_average_coal_production = Integ(
    lambda: change_in_average_coal_production(),
    lambda: init_average_coal_production(),
    "_integ_average_coal_production",
)


@component.add(
    name="Coal Price per Ton",
    units="$/Ton",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_price": 1, "mtoe_per_ton": 1},
)
def coal_price_per_ton():
    """
    Actual Coal Price per Ton.
    """
    return coal_price() * mtoe_per_ton()


@component.add(
    name="Identified Coal Resources",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_identified_coal_resources": 1},
    other_deps={
        "_integ_identified_coal_resources": {
            "initial": {
                "total_coal_demand": 1,
                "normal_coal_production_ratio": 1,
                "coal_fraction_recoverable": 2,
                "cumulative_coal_production": 1,
            },
            "step": {"coal_exploration": 1, "coal_production": 1},
        }
    },
)
def identified_coal_resources():
    """
    Coal Resources discovered thanks to developments in exploration technology.
    """
    return _integ_identified_coal_resources()


_integ_identified_coal_resources = Integ(
    lambda: coal_exploration() - coal_production(),
    lambda: (
        total_coal_demand() * normal_coal_production_ratio()
        + cumulative_coal_production() * (1 - coal_fraction_recoverable())
    )
    / coal_fraction_recoverable(),
    "_integ_identified_coal_resources",
)


@component.add(
    name="Total Coal Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "market_share_coal": 1},
)
def total_coal_demand():
    """
    Total demand for coal resources.
    """
    return energy_demand() * market_share_coal()


@component.add(
    name="Total Coal Discoverable Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_coal_resources": 1,
        "coal_fraction_discoverable": 1,
        "cumulative_additions_to_coal_production": 1,
    },
)
def total_coal_discoverable_resources():
    """
    Total Coal Discoverable Resources as a percentage of Total Coal Resources. It excludes identified and already produced resources. The percentage is determined by exploration technology developments.
    """
    return (
        total_coal_resources() * coal_fraction_discoverable()
        - cumulative_additions_to_coal_production()
    )


@component.add(
    name="Total Coal Recoverable Resource Remaining",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cumulative_additions_to_coal_production": 1,
        "coal_fraction_recoverable": 1,
        "cumulative_coal_production": 1,
    },
)
def total_coal_recoverable_resource_remaining():
    """
    Total Coal Recoverable Resources Remaining as a percentage of Cumulative Additions to Coal Production. It excludes already produced resources. The percentage is determined by production technology developments.
    """
    return (
        cumulative_additions_to_coal_production() * coal_fraction_recoverable()
        - cumulative_coal_production()
    )


@component.add(
    name="Investment in Coal Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_investment_in_coal_production": 1},
)
def investment_in_coal_production():
    """
    Amount of resources dedicated to coal production.
    """
    return desired_investment_in_coal_production()


@component.add(
    name="Time to Average Coal Production",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_coal_production():
    """
    Time to average total coal production per year.
    """
    return 1


@component.add(
    name="Coal Production Coverage",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"identified_coal_resources": 1, "average_coal_production": 1},
)
def coal_production_coverage():
    """
    Ratio indicating coal coverage in years for discovered resources and at the current average coal production.
    """
    return identified_coal_resources() / average_coal_production()


@component.add(
    name="Ratio of Coal Fraction Discoverable to Undiscoverable",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ratio_of_coal_fraction_discoverable_to_undiscoverable": 1},
    other_deps={
        "_integ_ratio_of_coal_fraction_discoverable_to_undiscoverable": {
            "initial": {"init_rcdu": 1},
            "step": {
                "increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable": 1
            },
        }
    },
)
def ratio_of_coal_fraction_discoverable_to_undiscoverable():
    """
    Ratio of Coal Fraction Discoverable to Undiscoverable increased due to investments in discovery technology and their productivity.
    """
    return _integ_ratio_of_coal_fraction_discoverable_to_undiscoverable()


_integ_ratio_of_coal_fraction_discoverable_to_undiscoverable = Integ(
    lambda: increase_in_ratio_of_coal_fraction_discoverable_to_undiscoverable(),
    lambda: init_rcdu(),
    "_integ_ratio_of_coal_fraction_discoverable_to_undiscoverable",
)


@component.add(
    name="Ratio of Coal Fraction Recoverable to Unrecoverable",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ratio_of_coal_fraction_recoverable_to_unrecoverable": 1},
    other_deps={
        "_integ_ratio_of_coal_fraction_recoverable_to_unrecoverable": {
            "initial": {"init_rcru": 1},
            "step": {
                "increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable": 1
            },
        }
    },
)
def ratio_of_coal_fraction_recoverable_to_unrecoverable():
    """
    Ratio of Coal Fraction Recoverable to Unrecoverable increased due to investments in recovery technology and their productivity.
    """
    return _integ_ratio_of_coal_fraction_recoverable_to_unrecoverable()


_integ_ratio_of_coal_fraction_recoverable_to_unrecoverable = Integ(
    lambda: increase_in_ratio_of_coal_fraction_recoverable_to_unrecoverable(),
    lambda: init_rcru(),
    "_integ_ratio_of_coal_fraction_recoverable_to_unrecoverable",
)


@component.add(
    name="Coal Shortage",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_coal_demand": 1, "coal_production": 1},
)
def coal_shortage():
    """
    Difference between demand and the coal production rate.
    """
    return total_coal_demand() - coal_production()


@component.add(
    name="Investment in Coal Exploration",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_investment_in_coal_exploration": 1},
)
def investment_in_coal_exploration():
    """
    Amount of resources dedicated to coal exploration.
    """
    return desired_investment_in_coal_exploration()


@component.add(
    name="INIT RCDU", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_rcdu():
    """
    Initial Ratio of Coal Fraction Discoverable to Undiscoverable.
    """
    return 0


@component.add(
    name="Coal Production Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_coal_demand": 1, "potential_coal_production": 1},
)
def coal_production_rate():
    """
    Total coal energy production per year due to available resources, developments in production technology and coal energy demand.
    """
    return float(np.minimum(total_coal_demand(), potential_coal_production()))


@component.add(
    name="Effect of Technology on Coal Discoveries",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_coal_discoverable_resources": 1, "init_ucrn": 1},
)
def effect_of_technology_on_coal_discoveries():
    """
    Impact of technology development on coal exploration taking into account remaining undiscovered coal resources (the less remaining undiscovered coal resources the more expensive it is to discover them).
    """
    return total_coal_discoverable_resources() / init_ucrn()


@component.add(
    name="Investment in Coal Recovery Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_coal_technology": 1,
        "fraction_invested_in_coal_discovery_technology": 1,
    },
)
def investment_in_coal_recovery_technology():
    """
    Total investments in coal production technology.
    """
    return investment_in_coal_technology() * (
        1 - fraction_invested_in_coal_discovery_technology()
    )


@component.add(
    name="Desired Coal Exploration Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"adjustment_for_identified_coal_resource": 1, "coal_production": 1},
)
def desired_coal_exploration_rate():
    """
    Desired Coal exploration rate due to Total Coal Demand and Identified Coal Resources safety coverage.
    """
    return float(
        np.maximum(0, adjustment_for_identified_coal_resource() + coal_production())
    )


@component.add(
    name="Identified Coal Resources Adjustment Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def identified_coal_resources_adjustment_time():
    """
    Time to adjust Identified Oil Coal Resource to the desired level.
    """
    return 10


@component.add(name="MAXCFD", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxcfd():
    """
    Maximal possible percentage of coal resources to be discovered.
    """
    return 1


@component.add(
    name="Coal Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicated_coal_price": 1,
        "effect_of_coal_demand_and_supply_on_price": 1,
    },
)
def coal_price():
    """
    Actual coal price accounting for indicated coal price and effect of demand and supply.
    """
    return indicated_coal_price() * effect_of_coal_demand_and_supply_on_price()


@component.add(
    name="Coal Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_production_rate": 1},
)
def coal_production():
    """
    Total coal energy production per year. Source of historical data: International Energy Agency – Key World Energy Statistics 2007; BP Statistical Review of World Energy June 2008
    """
    return coal_production_rate()


@component.add(
    name="Required Identified Coal Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "identified_coal_resources": 1,
        "total_coal_recoverable_resource_remaining": 1,
        "normal_coal_production_ratio": 1,
        "total_coal_demand": 1,
    },
)
def required_identified_coal_resources():
    """
    The desired Identified Coal Resources level sought by the coal sector.
    """
    return (
        identified_coal_resources() / total_coal_recoverable_resource_remaining()
    ) * (normal_coal_production_ratio() * total_coal_demand())


@component.add(name="MINCFD", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def mincfd():
    """
    Initial and minimal possible percentage of coal resources to be discovered.
    """
    return 0.5


@component.add(
    name="INIT RCRU", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_rcru():
    """
    Initial Ratio of Coal Fraction Recoverable to Unrecoverable.
    """
    return 0


@component.add(name="MINCFR", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def mincfr():
    """
    Initial and minimal possible percentage of coal resources to be recovered.
    """
    return 0.15


@component.add(
    name="Coal Exploration Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_coal_exploration_rate": 1, "potential_coal_exploration": 1},
)
def coal_exploration_rate():
    """
    Coal Exploration Rate accounting for potential and desired coal exploration rates.
    """
    return float(
        np.minimum(desired_coal_exploration_rate(), potential_coal_exploration())
    )


@component.add(
    name="Coal Fraction Discoverable",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mincfd": 2,
        "maxcfd": 1,
        "ratio_of_coal_fraction_discoverable_to_undiscoverable": 2,
    },
)
def coal_fraction_discoverable():
    """
    Percentage of coal resources that can be still explored due to current state of discovery technology.
    """
    return mincfd() + (maxcfd() - mincfd()) * (
        ratio_of_coal_fraction_discoverable_to_undiscoverable()
        / (ratio_of_coal_fraction_discoverable_to_undiscoverable() + 1)
    )


@component.add(
    name="Coal Desired Gross Margin",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def coal_desired_gross_margin():
    """
    Desired Gross Margin per unit coal resources.
    """
    return 0.2


@component.add(
    name="Normal Coal Production Ratio",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_coal_production_ratio():
    """
    Safety stock coverage as a number of years of the total coal demand the coal sector would like to maintain in identified coal resources. It secures the market against possibility of unforeseen variations in demand. It is also a stimulus for coal exploration.
    """
    return 10


@component.add(
    name="Fraction Invested in Coal Discovery Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_fraction_discoverable": 1, "table_for_ficdt": 1},
)
def fraction_invested_in_coal_discovery_technology():
    """
    Fraction of investments in coal technology dedicated to discovery technology.
    """
    return table_for_ficdt(coal_fraction_discoverable())


@component.add(
    name="Cumulative Additions to Coal Production",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"identified_coal_resources": 1, "cumulative_coal_production": 1},
)
def cumulative_additions_to_coal_production():
    """
    Identified and already produced coal resources.
    """
    return identified_coal_resources() + cumulative_coal_production()


@component.add(
    name="Table for FICDT",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_ficdt"},
)
def table_for_ficdt(x, final_subs=None):
    """
    Table determining order by which technology investments are dedicated to exploration and production technologies. For small Coal Fraction Discoverable, in order to make sufficient resources available to be produced, more investments are directed to exploration technologies. Once the Coal Fraction Discoverable increases the investments are redirected to production technologies.
    """
    return _hardcodedlookup_table_for_ficdt(x, final_subs)


_hardcodedlookup_table_for_ficdt = HardcodedLookups(
    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
    [0.8, 0.8, 0.7, 0.5, 0.2, 0.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_ficdt",
)


@component.add(
    name="Coal Fraction Recoverable",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mincfr": 2,
        "maxcfr": 1,
        "ratio_of_coal_fraction_recoverable_to_unrecoverable": 2,
    },
)
def coal_fraction_recoverable():
    """
    Percentage of coal resources that can be produced due to current state of recovery technology.
    """
    return mincfr() + (maxcfr() - mincfr()) * (
        ratio_of_coal_fraction_recoverable_to_unrecoverable()
        / (ratio_of_coal_fraction_recoverable_to_unrecoverable() + 1)
    )


@component.add(
    name="Investment in Coal Discovery Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_coal_technology": 1,
        "fraction_invested_in_coal_discovery_technology": 1,
    },
)
def investment_in_coal_discovery_technology():
    """
    Total investments in coal exploration technology.
    """
    return (
        investment_in_coal_technology()
        * fraction_invested_in_coal_discovery_technology()
    )


@component.add(
    name="Adjustment for Identified Coal Resource",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_identified_coal_resources": 1,
        "identified_coal_resources": 1,
        "identified_coal_resources_adjustment_time": 1,
    },
)
def adjustment_for_identified_coal_resource():
    """
    Adjustment of Identified Coal Resource to the desired level over a specified adjustment time.
    """
    return (
        required_identified_coal_resources() - identified_coal_resources()
    ) / identified_coal_resources_adjustment_time()


@component.add(
    name="Coal Demand to Supply Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_coal_demand": 1, "potential_coal_production": 1},
)
def coal_demand_to_supply_ratio():
    """
    Coal Demand to Supply Ratio.
    """
    return total_coal_demand() / potential_coal_production()


@component.add(
    name="Coal Gross Margin",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_price": 1, "coal_cost": 2},
)
def coal_gross_margin():
    """
    Actual coal gross margin.
    """
    return (coal_price() - coal_cost()) / coal_cost()


@component.add(
    name="Potential Coal Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_coal_production_from_investment": 1,
        "potential_coal_production_from_resources": 1,
    },
)
def potential_coal_production():
    """
    Potential Coal Production due to available investments in coal resources recovery and recovery technology.
    """
    return float(
        np.minimum(
            potential_coal_production_from_investment(),
            potential_coal_production_from_resources(),
        )
    )


@component.add(
    name="INIT CCPN", units="Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def init_ccpn():
    """
    Cumulative Coal resources for 1900.
    """
    return 37630


@component.add(
    name="Cumulative Coal Production",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_coal_production": 1},
    other_deps={
        "_integ_cumulative_coal_production": {
            "initial": {"init_ccpn": 1},
            "step": {"coal_production": 1},
        }
    },
)
def cumulative_coal_production():
    """
    Cumulative Coal resources that has been produced.
    """
    return _integ_cumulative_coal_production()


_integ_cumulative_coal_production = Integ(
    lambda: coal_production(), lambda: init_ccpn(), "_integ_cumulative_coal_production"
)


@component.add(name="MAXCFR", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxcfr():
    """
    Maximal possible percentage of coal resources to be recovered.
    """
    return 1


@component.add(
    name="Potential Coal Production from Resources",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_coal_recoverable_resource_remaining": 1,
        "normal_coal_production_ratio": 1,
    },
)
def potential_coal_production_from_resources():
    """
    Potential Coal Production rate due to Total Coal Recoverable Resource Remaining adjusted by coal production safety coverage.
    """
    return total_coal_recoverable_resource_remaining() / normal_coal_production_ratio()


@component.add(
    name="Total Coal Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "undiscovered_coal_resources": 1,
        "cumulative_additions_to_coal_production": 1,
    },
)
def total_coal_resources():
    """
    Total coal resources including Undiscovered Coal Resources, Identified Coal Resources and resources already produced i.e. Cumulative Coal Production.
    """
    return undiscovered_coal_resources() + cumulative_additions_to_coal_production()


@component.add(
    name="Undiscovered Coal Resources",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_undiscovered_coal_resources": 1},
    other_deps={
        "_integ_undiscovered_coal_resources": {
            "initial": {"init_ucrn": 1},
            "step": {"coal_exploration": 1},
        }
    },
)
def undiscovered_coal_resources():
    """
    Existing Coal Resources but not discovered yet.
    """
    return _integ_undiscovered_coal_resources()


_integ_undiscovered_coal_resources = Integ(
    lambda: -coal_exploration(),
    lambda: init_ucrn(),
    "_integ_undiscovered_coal_resources",
)


@component.add(
    name="Coal Exploration",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_exploration_rate": 1},
)
def coal_exploration():
    """
    Coal resources discovery rate.
    """
    return float(np.maximum(coal_exploration_rate(), 0))


@component.add(
    name="Indicated Coal Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_cost": 1, "coal_desired_gross_margin": 1},
)
def indicated_coal_price():
    """
    Indicated coal price accounting for exploration and production cost and gross margin.
    """
    return coal_cost() * (1 + coal_desired_gross_margin())


@component.add(
    name="Coal Revenue",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_price": 1, "average_coal_production": 1},
)
def coal_revenue():
    """
    Total revenue in coal market.
    """
    return coal_price() * average_coal_production()


@component.add(
    name="Increase in Wind Energy Technology Ratio",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_iwetrlv3": 1},
)
def increase_in_wind_energy_technology_ratio():
    """
    Increase in Wind Energy Technology Ratio due to investments in wind conversion efficiency technology and their productivity.
    """
    return outflow_iwetrlv3()


@component.add(
    name="Increase in Wind Installation Technology Ratio",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_iwitrlv3": 1},
)
def increase_in_wind_installation_technology_ratio():
    """
    Increase in Wind Installation Technology Ratio due to investments in wind energy installation capacity.
    """
    return outflow_iwitrlv3()


@component.add(
    name="Wind Available Area",
    units="m*m",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_available_area_variation": 1, "time": 1},
)
def wind_available_area():
    """
    Total area available for wind energy production capacities.
    """
    return 8000000000000.0 + step(
        __data["time"], wind_available_area_variation() - 8000000000000.0, 2020
    )


@component.add(
    name="Wind Installation Technology Development Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_installation_technology_development_time_variation": 1,
        "time": 1,
    },
)
def wind_installation_technology_development_time():
    """
    Average time required to turn investments into concrete wind energy production capacity. Since the simulation starts in 1900 it is a significant time.
    """
    return 100 + step(
        __data["time"],
        renewable_installation_technology_development_time_variation() - 100,
        2020,
    )


@component.add(
    name="Fraction for Wind Learning Curve Strength",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_for_wind_and_solar_learning_curve_strength_variation": 1,
        "time": 1,
    },
)
def fraction_for_wind_learning_curve_strength():
    """
    Fraction for Wind Learning Curve Strength indicating by what percentage the wind energy cost will drop for each doubling of wind installed capacity.
    """
    return 0.2 + step(
        __data["time"],
        fraction_for_wind_and_solar_learning_curve_strength_variation() - 0.2,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Wind Energy Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_renewable_energy_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_wind_energy_technology():
    """
    Effectivenes of resources dedicated to wind conversion efficiency technology development.
    """
    return 1e-09 + step(
        __data["time"],
        effectiveness_of_investment_in_renewable_energy_technology_variation() - 1e-09,
        2020,
    )


@component.add(
    name="Wind Energy Technology Development Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"renewable_energy_technology_development_time_variation": 1, "time": 1},
)
def wind_energy_technology_development_time():
    """
    Average time required to turn investments into concrete wind conversion efficiency technology developments. Since the simulation starts in 1900 it is a significant time.
    """
    return 50 + step(
        __data["time"],
        renewable_energy_technology_development_time_variation() - 50,
        2020,
    )


@component.add(
    name="Wind Final Investment",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"renewable_final_investment_fraction_variation": 1, "time": 1},
)
def wind_final_investment():
    """
    Eventual average level of investments in wind energy technology.
    """
    return 0.03 + step(
        __data["time"], renewable_final_investment_fraction_variation() - 0.03, 2020
    )


@component.add(
    name="Effectiveness of Investment in Wind Installation Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_renewable_installation_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_wind_installation_technology():
    """
    Effectiveness of resources dedicated to wind energy capacity efficiency technology development.
    """
    return 1e-10 + step(
        __data["time"],
        effectiveness_of_investment_in_renewable_installation_technology_variation()
        - 1e-10,
        2020,
    )


@component.add(
    name="Reference Cost of Wind Energy Production",
    units="$/((m*m)*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable15_wind_cost": 1},
)
def reference_cost_of_wind_energy_production():
    """
    Reference cost of unit wind energy production per year.
    """
    return variable15_wind_cost()


@component.add(
    name="Average Capacity per SqMeter",
    units="kW/(m*m)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable3_wind": 1},
)
def average_capacity_per_sqmeter():
    """
    Average wind energy production from one sqr meter of wind installed capacity.
    """
    return variable3_wind()


@component.add(
    name="INIT Unit Cost of Wind Capacity Installation",
    units="$/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_unit_cost_of_wind_capacity_installation():
    """
    Initial unit cost per unit wind capacity installation.
    """
    return 2000000000.0


@component.add(
    name="Unit Cost of Wind Energy Production",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_cost_of_wind_energy_production": 1,
        "wind_production_to_installation_ratio": 1,
    },
)
def unit_cost_of_wind_energy_production():
    """
    Unit cost of wind capacity installation per energy unit.
    """
    return (
        reference_cost_of_wind_energy_production()
        / wind_production_to_installation_ratio()
    )


@component.add(
    name="Impact of Space on Wind Capacity Installation",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_installed_capacity": 1, "wind_available_area": 1},
)
def impact_of_space_on_wind_capacity_installation():
    """
    Ratio of currently installed wind capacity to total possible.
    """
    return float(np.maximum(0, 1 - wind_installed_capacity() / wind_available_area()))


@component.add(
    name="Time to Adjust Wind Infrastructure",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_adjust_wind_infrastructure():
    """
    Time to adjust Wind Infrastructure to the desired level.
    """
    return 5


@component.add(
    name="Investment in Wind Capacity",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installation_of_wind_capacity_rate": 1,
        "unit_cost_of_wind_capacity_installation": 1,
        "efficiency_of_wind_installed_capacity": 1,
        "wind_aging_time": 1,
    },
)
def investment_in_wind_capacity():
    """
    Amount of resources dedicated to wind energy capacity development.
    """
    return (
        installation_of_wind_capacity_rate()
        * unit_cost_of_wind_capacity_installation()
        * efficiency_of_wind_installed_capacity()
        * wind_aging_time()
    )


@component.add(
    name="Wind Energy Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicated_wind_energy_price": 1,
        "effect_of_wind_energy_demand_and_supply_on_price": 1,
    },
)
def wind_energy_price():
    """
    Actual wind energy price accounting for indicated wind energy price and effect of demand and supply.
    """
    return (
        indicated_wind_energy_price()
        * effect_of_wind_energy_demand_and_supply_on_price()
    )


@component.add(
    name="Wind Production to Installation Ratio",
    units="Mtoe/(m*m*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_production": 1, "wind_installed_capacity": 1},
)
def wind_production_to_installation_ratio():
    """
    Ratio of wind energy production to available production capacity.
    """
    return wind_energy_production() / wind_installed_capacity()


@component.add(
    name="Cost of Wind Energy",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_cost_of_wind_capacity_installation": 1,
        "unit_cost_of_wind_energy_production": 1,
    },
)
def cost_of_wind_energy():
    """
    Cost of wind energy production assuming an impact of learning curve.
    """
    return (
        unit_cost_of_wind_capacity_installation()
        + unit_cost_of_wind_energy_production()
    )


@component.add(
    name="Unit Cost of Wind Capacity Installation",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "init_unit_cost_of_wind_capacity_installation": 1,
        "impact_of_learning_on_wind_unit_cost_of_technology": 1,
    },
)
def unit_cost_of_wind_capacity_installation():
    """
    Unit Cost of Wind Capacity Installation. Determined by Productivity of Investment in Wind Capacity Installation.
    """
    return (
        init_unit_cost_of_wind_capacity_installation()
        * impact_of_learning_on_wind_unit_cost_of_technology()
    )


@component.add(
    name="Productivity of Investment in Wind Capacity Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_space_on_wind_capacity_installation": 1,
        "wind_installation_efficiency": 1,
    },
)
def productivity_of_investment_in_wind_capacity_installation():
    """
    Productivity of wind capacity installation taking into account the level of remaining possible capacities and technology development state.
    """
    return (
        impact_of_space_on_wind_capacity_installation() * wind_installation_efficiency()
    )


@component.add(
    name="Installation of Wind Capacity Rate",
    units="m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_wind_capacity_installation": 1,
        "wind_infrastructure_adjustment": 1,
    },
)
def installation_of_wind_capacity_rate():
    """
    Rate of new wind capacity installation.
    """
    return (
        productivity_of_investment_in_wind_capacity_installation()
        * wind_infrastructure_adjustment()
    )


@component.add(name="MAXWIE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxwie():
    """
    Maximal value of Wind Installation Efficiency factor.
    """
    return 1


@component.add(name="MINWIE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minwie():
    """
    Minimal and initial value of Wind Installation Efficiency factor.
    """
    return 0.01


@component.add(
    name="Fraction Invested in Wind Energy Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_installation_efficiency": 1, "table_for_fiwei": 1},
)
def fraction_invested_in_wind_energy_installation():
    """
    Fraction of investments in wind energy technology dedicated to capacity.
    """
    return table_for_fiwei(wind_installation_efficiency())


@component.add(
    name="Fraction of Revenue Invested in Wind Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_investment_fraction_slope": 1,
        "wind_investment_fraction_start": 1,
        "wind_investment_fraction_finish": 1,
        "time": 1,
    },
)
def fraction_of_revenue_invested_in_wind_technology():
    """
    Parameter to take into account historical increase of the wind energy significance and over time greater resources dedicated to the technology development.
    """
    return ramp(
        __data["time"],
        wind_investment_fraction_slope(),
        wind_investment_fraction_start(),
        wind_investment_fraction_finish(),
    )


@component.add(
    name="Investment in Wind Energy Efficiency",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_wind_energy_technology": 1,
        "fraction_invested_in_wind_energy_installation": 1,
    },
)
def investment_in_wind_energy_efficiency():
    """
    Total investments in wind conversion efficiency technology.
    """
    return investment_in_wind_energy_technology() * (
        1 - fraction_invested_in_wind_energy_installation()
    )


@component.add(
    name="Investment in Wind Energy Installation",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_wind_energy_technology": 1,
        "fraction_invested_in_wind_energy_installation": 1,
    },
)
def investment_in_wind_energy_installation():
    """
    Total investments in wind energy capacity.
    """
    return (
        investment_in_wind_energy_technology()
        * fraction_invested_in_wind_energy_installation()
    )


@component.add(
    name="Investment in Wind Energy Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_revenue_invested_in_wind_technology": 1,
        "wind_energy_revenue": 1,
    },
)
def investment_in_wind_energy_technology():
    """
    Investments in development of wind conversion efficiency technology and production capability.
    """
    return fraction_of_revenue_invested_in_wind_technology() * wind_energy_revenue()


@component.add(
    name="Wind Installation Technology Ratio",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_wind_installation_technology_ratio": 1},
    other_deps={
        "_integ_wind_installation_technology_ratio": {
            "initial": {"init_witrn": 1},
            "step": {"increase_in_wind_installation_technology_ratio": 1},
        }
    },
)
def wind_installation_technology_ratio():
    """
    Wind Installation Technology Ratio increased due to investments in wind energy capacity installation efficiency.
    """
    return _integ_wind_installation_technology_ratio()


_integ_wind_installation_technology_ratio = Integ(
    lambda: increase_in_wind_installation_technology_ratio(),
    lambda: init_witrn(),
    "_integ_wind_installation_technology_ratio",
)


@component.add(
    name="Wind Investment Fraction Finish",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_time": 1, "ramp_investment_period": 1},
)
def wind_investment_fraction_finish():
    """
    End of fractional investments in wind energy technology.
    """
    return initial_time() + ramp_investment_period()


@component.add(
    name="Wind Investment Fraction Slope",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_final_investment": 1,
        "wind_initial_investment": 1,
        "ramp_investment_period": 1,
    },
)
def wind_investment_fraction_slope():
    """
    Intensity of increase in investments in wind energy technology.
    """
    return (
        float(np.abs(wind_final_investment() - wind_initial_investment()))
        / ramp_investment_period()
    )


@component.add(
    name="Wind Investment Fraction Start",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_time": 1},
)
def wind_investment_fraction_start():
    """
    Start of investments in wind energy technology.
    """
    return initial_time()


@component.add(
    name="INIT WITRN", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_witrn():
    """
    Initial Wind Installation Technology Ratio.
    """
    return 0


@component.add(
    name="Wind Initial Investment",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def wind_initial_investment():
    """
    Initial level of fractional investments in wind energy technology.
    """
    return 0


@component.add(
    name="Wind Installation Efficiency",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"minwie": 2, "wind_installation_technology_ratio": 2, "maxwie": 1},
)
def wind_installation_efficiency():
    """
    Parameter indicating wind energy capacity installation efficiency at the current state of technical developments.
    """
    return minwie() + (maxwie() - minwie()) * (
        wind_installation_technology_ratio()
        / (wind_installation_technology_ratio() + 1)
    )


@component.add(
    name="Table for FIWEI",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_fiwei"},
)
def table_for_fiwei(x, final_subs=None):
    """
    Table determining order by which technology investments are dedicated to energy and installation efficiency. For small Wind Installation Efficiency, in order to secure sufficient production capacity, more investments are directed to infrastructure. Once the Wind Installation Efficiency increases the investments are redirected to solar conversion efficiency technologies.
    """
    return _hardcodedlookup_table_for_fiwei(x, final_subs)


_hardcodedlookup_table_for_fiwei = HardcodedLookups(
    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
    [0.8, 0.8, 0.7, 0.5, 0.2, 0.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_fiwei",
)


@component.add(
    name="Total Wind Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "market_share_wind": 1},
)
def total_wind_demand():
    """
    Total demand for wind energy.
    """
    return energy_demand() * market_share_wind()


@component.add(
    name="Max Wind Power Point TW",
    units="TW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_wind_power_point": 1, "kw_into_tw": 1},
)
def max_wind_power_point_tw():
    """
    Wind Max Power Point measured in TW.
    """
    return max_wind_power_point() / kw_into_tw()


@component.add(
    name="Potential Wind Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_installed_capacity": 1,
        "average_capacity_per_sqmeter": 1,
        "wind_capacity_factor": 1,
        "hours_per_year": 1,
        "kwh_into_mtoe": 1,
    },
)
def potential_wind_energy_production():
    """
    Potential solar energy production per year due to available production capability and technical developments.
    """
    return (
        wind_installed_capacity()
        * average_capacity_per_sqmeter()
        * wind_capacity_factor()
        * hours_per_year()
        * kwh_into_mtoe()
    )


@component.add(
    name="Max Wind Power Point GW",
    units="GW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_wind_power_point": 1, "kw_into_gw": 1},
)
def max_wind_power_point_gw():
    """
    Wind Max Power Point measured in GW.
    """
    return max_wind_power_point() / kw_into_gw()


@component.add(
    name="Wind Energy Price per kWh",
    units="$/(kW*Hour)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_price": 1, "kwh_into_mtoe": 1},
)
def wind_energy_price_per_kwh():
    """
    Actual wind energy price accounting for indicated wind energy price and effect of demand and supply measured in dollars per kWh.
    """
    return wind_energy_price() * kwh_into_mtoe()


@component.add(
    name="Max Wind Power Point",
    units="kW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_installed_capacity": 1,
        "average_capacity_per_sqmeter": 1,
        "wind_capacity_factor": 1,
    },
)
def max_wind_power_point():
    """
    Max Power Point measured at Standard Test Conditions for installed wind energy production capacity and current wind conversion efficiency.
    """
    return (
        wind_installed_capacity()
        * average_capacity_per_sqmeter()
        * wind_capacity_factor()
    )


@component.add(
    name="Desired Wind Energy Gross Margin",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def desired_wind_energy_gross_margin():
    """
    Desired Gross Margin per unit of wind energy.
    """
    return 0.2


@component.add(
    name="Effect of Wind Energy Demand and Supply on Price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_wind_demand": 1,
        "potential_wind_energy_production": 1,
        "sensitivity_of_wind_energy_price_to_supply_and_demand": 1,
    },
)
def effect_of_wind_energy_demand_and_supply_on_price():
    """
    Effect of Wind Demand and Supply ratio on actual wind energy price.
    """
    return (
        total_wind_demand() / potential_wind_energy_production()
    ) ** sensitivity_of_wind_energy_price_to_supply_and_demand()


@component.add(
    name="INIT WIC", units="m*m", comp_type="Constant", comp_subtype="Normal"
)
def init_wic():
    """
    Initial installed capacity to transform wind into energy.
    """
    return 4000


@component.add(
    name="Wind Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_production_rate": 1},
)
def wind_energy_production():
    """
    Total wind energy production per year.
    """
    return wind_energy_production_rate()


@component.add(
    name="Wind Energy Demand to Supply Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_wind_demand": 1, "potential_wind_energy_production": 1},
)
def wind_energy_demand_to_supply_ratio():
    """
    Wind Energy Demand to Supply Ratio.
    """
    return total_wind_demand() / potential_wind_energy_production()


@component.add(name="MAXWCF", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxwcf():
    """
    Maximal wind capacity factor.
    """
    return 0.5


@component.add(
    name="Efficiency of Wind Installed Capacity",
    units="Mtoe/(Year*m*m)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_wind_energy_production": 1, "wind_installed_capacity": 1},
)
def efficiency_of_wind_installed_capacity():
    """
    Total production efficiency of Wind Installed Capacity for given technology developments.
    """
    return zidz(potential_wind_energy_production(), wind_installed_capacity())


@component.add(
    name="Indicated Wind Energy Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cost_of_wind_energy": 1, "desired_wind_energy_gross_margin": 1},
)
def indicated_wind_energy_price():
    """
    Indicated wind energy price accounting for unit cost and gross margin.
    """
    return cost_of_wind_energy() * (1 + desired_wind_energy_gross_margin())


@component.add(
    name="Total Wind Demand GW",
    units="GW/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_wind_demand": 1, "kwh_into_mtoe_peak_hour": 1, "kw_into_gw": 1},
)
def total_wind_demand_gw():
    """
    Total demand for wind energy measured in GW.
    """
    return total_wind_demand() / kwh_into_mtoe_peak_hour() / kw_into_gw()


@component.add(
    name="Sensitivity of Wind Energy Price to Supply and Demand",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_wind_energy_price_to_supply_and_demand():
    """
    Sensitivity of Wind Energy Price to Supply and Demand ratio.
    """
    return 0


@component.add(name="MINWCF", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minwcf():
    """
    Minimal and initial wind capacity factor.
    """
    return 0.2


@component.add(
    name="INIT WETRN", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_wetrn():
    """
    Initial Wind Energy Technology Ratio.
    """
    return 0


@component.add(
    name="Cumulative Wind Energy Produced",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_wind_energy_produced": 1},
    other_deps={
        "_integ_cumulative_wind_energy_produced": {
            "initial": {"init_cumulative_wind_produced": 1},
            "step": {"wind_energy_production": 1},
        }
    },
)
def cumulative_wind_energy_produced():
    """
    Cumulative wind energy that has been produced.
    """
    return _integ_cumulative_wind_energy_produced()


_integ_cumulative_wind_energy_produced = Integ(
    lambda: wind_energy_production(),
    lambda: init_cumulative_wind_produced(),
    "_integ_cumulative_wind_energy_produced",
)


@component.add(
    name="Desired Wind Installed Capacity",
    units="m*m",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_wind_demand": 1, "efficiency_of_wind_installed_capacity": 1},
)
def desired_wind_installed_capacity():
    """
    Desired Wind Installed Capacity accounting for Total Wind Demand and Efficiency of Wind Installed Capacity.
    """
    return total_wind_demand() / efficiency_of_wind_installed_capacity()


@component.add(
    name="Wind Energy Revenue",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_production": 1, "wind_energy_price": 1},
)
def wind_energy_revenue():
    """
    Total revenue in wind energy market.
    """
    return wind_energy_production() * wind_energy_price()


@component.add(
    name="Wind Energy Technology Ratio",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_wind_energy_technology_ratio": 1},
    other_deps={
        "_integ_wind_energy_technology_ratio": {
            "initial": {"init_wetrn": 1},
            "step": {"increase_in_wind_energy_technology_ratio": 1},
        }
    },
)
def wind_energy_technology_ratio():
    """
    Wind Energy Technology Ratio increased due to investments in wind conversion efficiency.
    """
    return _integ_wind_energy_technology_ratio()


_integ_wind_energy_technology_ratio = Integ(
    lambda: increase_in_wind_energy_technology_ratio(),
    lambda: init_wetrn(),
    "_integ_wind_energy_technology_ratio",
)


@component.add(
    name="Impact of Learning on Wind Unit Cost of Technology",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_installed_capacity": 1,
        "init_wic": 1,
        "wind_learning_curve_strength": 1,
    },
)
def impact_of_learning_on_wind_unit_cost_of_technology():
    """
    Impact of learning curve on wind energy cost.
    """
    return (wind_installed_capacity() / init_wic()) ** wind_learning_curve_strength()


@component.add(
    name="Wind Learning Curve Strength",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_for_wind_learning_curve_strength": 1},
)
def wind_learning_curve_strength():
    """
    Strength of learning curve with which the wind energy costs are influenced.
    """
    return float(np.log(1 - fraction_for_wind_learning_curve_strength())) / float(
        np.log(2)
    )


@component.add(
    name="Wind Energy Production Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_wind_energy_production": 1, "total_wind_demand": 1},
)
def wind_energy_production_rate():
    """
    Total wind energy production per year accounting for demand and potential production due to available production capability and technical developments.
    """
    return float(np.minimum(potential_wind_energy_production(), total_wind_demand()))


@component.add(
    name="Wind Capacity Aging Rate",
    units="m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_installed_capacity": 1, "wind_aging_time": 1},
)
def wind_capacity_aging_rate():
    """
    Aging rate of wind energy production capacities.
    """
    return wind_installed_capacity() / wind_aging_time()


@component.add(
    name="Wind Capacity Factor",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"minwcf": 2, "maxwcf": 1, "wind_energy_technology_ratio": 2},
)
def wind_capacity_factor():
    """
    Parameter indicating what fraction of average wind capacity per sqr meter it is possible to realize with the current state of technical developments.
    """
    return minwcf() + (maxwcf() - minwcf()) * (
        wind_energy_technology_ratio() / (wind_energy_technology_ratio() + 1)
    )


@component.add(
    name="Wind Installed Capacity",
    units="m*m",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_wind_installed_capacity": 1},
    other_deps={
        "_integ_wind_installed_capacity": {
            "initial": {"init_wic": 1},
            "step": {
                "installation_of_wind_capacity_rate": 1,
                "wind_capacity_aging_rate": 1,
            },
        }
    },
)
def wind_installed_capacity():
    """
    Installed capacity to transform wind into energy.
    """
    return _integ_wind_installed_capacity()


_integ_wind_installed_capacity = Integ(
    lambda: installation_of_wind_capacity_rate() - wind_capacity_aging_rate(),
    lambda: init_wic(),
    "_integ_wind_installed_capacity",
)


@component.add(
    name="Wind Infrastructure Adjustment",
    units="m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_capacity_aging_rate": 1,
        "desired_wind_installed_capacity": 1,
        "time_to_adjust_wind_infrastructure": 1,
        "wind_installed_capacity": 1,
    },
)
def wind_infrastructure_adjustment():
    """
    Adjustment of Wind Infrastructure to the desired level over a specified adjustment time and accounting for constant infrastructure decrease due to aging process.
    """
    return (
        wind_capacity_aging_rate()
        + (desired_wind_installed_capacity() - wind_installed_capacity())
        / time_to_adjust_wind_infrastructure()
    )


@component.add(
    name="Wind Aging Time", units="Year", comp_type="Constant", comp_subtype="Normal"
)
def wind_aging_time():
    """
    Average wind energy production capacity aging time.
    """
    return 20


@component.add(
    name="Solar Capacity Aging Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def solar_capacity_aging_time():
    """
    Average solar energy production capacity aging time.
    """
    return 20


@component.add(
    name="Forest Protected Land Change",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_fplclv3": 1},
)
def forest_protected_land_change():
    """
    Changes in area of forest land indicated as protected.
    """
    return outflow_fplclv3()


@component.add(
    name="Expected Grassland Meat Yield",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_egmeya": 1},
)
def expected_grassland_meat_yield():
    return outflow_egmeya()


@component.add(
    name="Grassland Meat Yield",
    units="Ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_meat_yield": 1,
        "effect_of_input_neutral_technology_change_on_agricultural_land_fertility": 1,
        "effect_of_climate_change_on_agricultural_yield": 1,
        "effect_of_carbon_concentration_on_agricultural_yield": 1,
        "effect_of_fertilizer_on_yield": 1,
        "effect_of_water_withdrawal_on_agriculture_land_fertility": 1,
    },
)
def grassland_meat_yield():
    """
    Tons of meat per ha of grassland.The data for this variable is calculated based on the total production of pasture-based animal products (bovine meat, butter, cheese, animal fat, milk, mutton and goat meat) divided by the total pasture land.
    """
    return (
        reference_meat_yield()
        * effect_of_input_neutral_technology_change_on_agricultural_land_fertility()
        * effect_of_climate_change_on_agricultural_yield()
        * effect_of_carbon_concentration_on_agricultural_yield()
        * float(effect_of_fertilizer_on_yield().loc["PasMeat"])
        * effect_of_water_withdrawal_on_agriculture_land_fertility()
    )


@component.add(
    name="Crop yield for each category",
    units="Ton/(ha*Year)",
    subscripts=["PlantFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_expected_crop_yield": 1,
        "effect_of_input_neutral_technology_change_on_agricultural_land_fertility": 1,
        "effect_of_climate_change_on_agricultural_yield": 1,
        "effect_of_carbon_concentration_on_agricultural_yield": 1,
        "effect_of_water_withdrawal_on_agriculture_land_fertility": 1,
    },
)
def crop_yield_for_each_category():
    return (
        average_expected_crop_yield()
        * effect_of_input_neutral_technology_change_on_agricultural_land_fertility()
        * effect_of_climate_change_on_agricultural_yield()
        * effect_of_carbon_concentration_on_agricultural_yield()
        * effect_of_water_withdrawal_on_agriculture_land_fertility()
    )


@component.add(
    name="Effect of Input Neutral Technology Change on Agricultural Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"l_gdp_agritech": 1, "k_gdp_agritech": 1, "relative_gwp_per_capita": 1},
)
def effect_of_input_neutral_technology_change_on_agricultural_land_fertility():
    """
    Impact of technological advancement on agricultural land fertility. 1+Reference Input Neutral TC in Agriculture Variation*(LN(Relative GWP per Capita+Delay in GWP for agriculture technology impact ))
    """
    return l_gdp_agritech() - float(
        np.exp(-k_gdp_agritech() * relative_gwp_per_capita())
    )


@component.add(
    name="Forest to Agriculture Land Allocation Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "fat_var_s": 1,
        "_smooth_forest_to_agriculture_land_allocation_time": 1,
    },
    other_deps={
        "_smooth_forest_to_agriculture_land_allocation_time": {
            "initial": {
                "forest_to_agriculture_land_allocation_time_variation": 1,
                "fat_var_s": 1,
                "l_var_t": 1,
                "time": 1,
            },
            "step": {
                "forest_to_agriculture_land_allocation_time_variation": 1,
                "fat_var_s": 1,
                "l_var_t": 1,
                "time": 1,
                "ssp_land_use_change_variation_time": 1,
            },
        }
    },
)
def forest_to_agriculture_land_allocation_time():
    """
    Average time which natural transformation of Forest to Agriculture Land would take.130
    """
    return fat_var_s() + _smooth_forest_to_agriculture_land_allocation_time()


_smooth_forest_to_agriculture_land_allocation_time = Smooth(
    lambda: step(
        __data["time"],
        forest_to_agriculture_land_allocation_time_variation() - fat_var_s(),
        2020 + l_var_t(),
    ),
    lambda: ssp_land_use_change_variation_time(),
    lambda: step(
        __data["time"],
        forest_to_agriculture_land_allocation_time_variation() - fat_var_s(),
        2020 + l_var_t(),
    ),
    lambda: 1,
    "_smooth_forest_to_agriculture_land_allocation_time",
)


@component.add(
    name="Reference Input Neutral TC in Agriculture",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"tc_var_s": 1, "_smooth_reference_input_neutral_tc_in_agriculture": 1},
    other_deps={
        "_smooth_reference_input_neutral_tc_in_agriculture": {
            "initial": {
                "reference_input_neutral_tc_in_agriculture_variation": 1,
                "tc_var_s": 1,
                "l_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_input_neutral_tc_in_agriculture_variation": 1,
                "tc_var_s": 1,
                "l_var_t": 1,
                "time": 1,
                "ssp_land_use_change_variation_time": 1,
            },
        }
    },
)
def reference_input_neutral_tc_in_agriculture():
    """
    Reference variable representing technological advancement and its positive impact on agricultural land fertility in year 1900. Equal to 1 in Felicjan's formulation. ---- In Brians's GDP dependent in formulation, it is 0.3
    """
    return tc_var_s() + _smooth_reference_input_neutral_tc_in_agriculture()


_smooth_reference_input_neutral_tc_in_agriculture = Smooth(
    lambda: step(
        __data["time"],
        reference_input_neutral_tc_in_agriculture_variation() - tc_var_s(),
        2020 + l_var_t(),
    ),
    lambda: ssp_land_use_change_variation_time(),
    lambda: step(
        __data["time"],
        reference_input_neutral_tc_in_agriculture_variation() - tc_var_s(),
        2020 + l_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_input_neutral_tc_in_agriculture",
)


@component.add(
    name="Reference meat yield",
    units="Ton/ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_meat_yield():
    """
    MY Var S+SMOOTH(STEP(Reference meat yield Variation-MY Var S, 2020+L Var T),SSP Land Use Change Variation Time)
    """
    return 0.1877


@component.add(
    name="Other to Forest Land Allocation Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_to_forest_land_allocation_time_variation": 1, "time": 1},
)
def other_to_forest_land_allocation_time():
    """
    Average time which natural transformation of Other to Forest Land would take.
    """
    return 40 + step(
        __data["time"], other_to_forest_land_allocation_time_variation() - 40, 2020
    )


@component.add(
    name="Effect of GDP on Cropland Management Practices Elasticity",
    units="(Year*Year*Person*Person)/($*$)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_cropland_management_practices_elasticity_variation": 1,
        "time": 1,
    },
)
def effect_of_gdp_on_cropland_management_practices_elasticity():
    """
    Elasticity of impact of GDP on cropland management practices.
    """
    return 2.2e-08 + step(
        __data["time"],
        effect_of_gdp_on_cropland_management_practices_elasticity_variation() - 2.2e-08,
        2020,
    )


@component.add(
    name="Effect of GDP on Forest Land Fertility Elasticity",
    units="(Year*Year*Person*Person)/($*$)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_forest_land_fertility_elasticity_variation": 1,
        "time": 1,
    },
)
def effect_of_gdp_on_forest_land_fertility_elasticity():
    """
    Elasticity of impact of GDP on forest land management practices.
    """
    return 9e-08 + step(
        __data["time"],
        effect_of_gdp_on_forest_land_fertility_elasticity_variation() - 7e-08,
        2020,
    )


@component.add(
    name="Agriculture to Urban Land Allocation Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agriculture_to_urban_land_allocation_time_variation": 1, "time": 1},
)
def agriculture_to_urban_land_allocation_time():
    """
    Average time which natural transformation of Agriculture to Urban and Industrial Land would take.
    """
    return 5 + step(
        __data["time"], agriculture_to_urban_land_allocation_time_variation() - 5, 2020
    )


@component.add(
    name="Forest to Urban Land Allocation Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_to_urban_land_allocation_time_variation": 1, "time": 1},
)
def forest_to_urban_land_allocation_time():
    """
    Average time which natural transformation of Forest to Urban and Industrial Land would take.
    """
    return 10 + step(
        __data["time"], forest_to_urban_land_allocation_time_variation() - 10, 2020
    )


@component.add(
    name="Agriculture to Forest Land Allocation Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agriculture_to_forest_land_allocation_time_variation": 1, "time": 1},
)
def agriculture_to_forest_land_allocation_time():
    """
    Average time which natural transformation of Agriculture to Forest Land would take.
    """
    return 150 + step(
        __data["time"],
        agriculture_to_forest_land_allocation_time_variation() - 150,
        2020,
    )


@component.add(
    name="Forest Land Fraction Harvested excluding Protected Area",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land_fraction_harvested_excluding_protected_area_variation": 1,
        "time": 1,
    },
)
def forest_land_fraction_harvested_excluding_protected_area():
    """
    Fraction of Forest dedicated to be harvested.
    """
    return 0.5 + step(
        __data["time"],
        forest_land_fraction_harvested_excluding_protected_area_variation() - 0.5,
        2020,
    )


@component.add(
    name="Effect of Carbon Concentration on Agricultural Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"distortion_function_c": 1},
)
def effect_of_carbon_concentration_on_agricultural_yield():
    """
    Impact of carbon concentration on cropland fertility. L C on Yield / (1 + EXP(-k C on Yield * (C Concentration Ratio - x0 C on Yield)) )
    """
    return distortion_function_c()


@component.add(
    name="Effect of Climate Change on Agricultural Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"distorted_effect_of_t_on_yield": 1, "time": 1},
)
def effect_of_climate_change_on_agricultural_yield():
    """
    Impact of climate change risk on cropland fertility. L T on Yield / (1 + EXP(-k T on Yield * (Temperature Change from Preindustrial - x0 T on Yield)) )
    """
    return 1 + step(__data["time"], distorted_effect_of_t_on_yield() - 1, 2020)


@component.add(
    name="Nominal Energy Agriculture Land Productivity",
    units="Biomass ton/(ha*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"nominal_energy_agriculture_land_productivity_variation": 1, "time": 1},
)
def nominal_energy_agriculture_land_productivity():
    """
    Reference annual amount of energy crops biomass yield from unit energy crops land area.
    """
    return 12.5 + step(
        __data["time"],
        nominal_energy_agriculture_land_productivity_variation() - 12.5,
        2020,
    )


@component.add(
    name="Production rate of pasture based food",
    units="Ton/Year",
    subscripts=["AnimalFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "grassland_allocated_for_food_production": 2,
        "grassland_allocation_fraction": 2,
        "grassland_meat_yield": 1,
        "food_demand_in_tonnes": 2,
        "grassland_milk_yield": 1,
    },
)
def production_rate_of_pasture_based_food():
    """
    Total animal food production due to animal food land availability and animal food land yield.
    """
    value = xr.DataArray(
        np.nan, {"AnimalFood": _subscript_dict["AnimalFood"]}, ["AnimalFood"]
    )
    value.loc[["PasMeat"]] = float(
        np.minimum(
            grassland_allocated_for_food_production()
            * float(grassland_allocation_fraction().loc["PasMeat"])
            * grassland_meat_yield(),
            float(food_demand_in_tonnes().loc["PasMeat"]),
        )
    )
    value.loc[["Dairy"]] = float(
        np.minimum(
            grassland_allocated_for_food_production()
            * float(grassland_allocation_fraction().loc["Dairy"])
            * grassland_milk_yield(),
            float(food_demand_in_tonnes().loc["Dairy"]),
        )
    )
    return value


@component.add(
    name="Cropland Yield",
    units="Ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area_harvested": 2, "crop_yield_for_each_category": 1},
)
def cropland_yield():
    return sum(
        area_harvested().rename({"PlantFood": "PlantFood!"})
        * crop_yield_for_each_category().rename({"PlantFood": "PlantFood!"}),
        dim=["PlantFood!"],
    ) / sum(area_harvested().rename({"PlantFood": "PlantFood!"}), dim=["PlantFood!"])


@component.add(
    name="Agriculture Land Energy Yield",
    units="Biomass ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "nominal_energy_agriculture_land_productivity": 1,
        "effect_of_carbon_concentration_on_agricultural_yield": 1,
        "effect_of_climate_change_on_agricultural_yield": 1,
        "effect_of_input_neutral_technology_change_on_agricultural_land_fertility": 1,
        "effect_of_water_withdrawal_on_agriculture_land_fertility": 1,
        "effect_of_management_practices_on_agriculture_land_fertility": 1,
    },
)
def agriculture_land_energy_yield():
    """
    Yield from a unit energy crops land area.
    """
    return (
        nominal_energy_agriculture_land_productivity()
        * effect_of_carbon_concentration_on_agricultural_yield()
        * effect_of_climate_change_on_agricultural_yield()
        * effect_of_input_neutral_technology_change_on_agricultural_land_fertility()
        * effect_of_water_withdrawal_on_agriculture_land_fertility()
        * effect_of_management_practices_on_agriculture_land_fertility()
    )


@component.add(
    name="Grassland Needed",
    units="ha",
    subscripts=["AnimalFood"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "food_demand_in_tonnes": 2,
        "expected_grassland_meat_yield": 1,
        "expected_grassland_milk_yield": 1,
    },
)
def grassland_needed():
    value = xr.DataArray(
        np.nan, {"AnimalFood": _subscript_dict["AnimalFood"]}, ["AnimalFood"]
    )
    value.loc[["PasMeat"]] = (
        float(food_demand_in_tonnes().loc["PasMeat"]) / expected_grassland_meat_yield()
    )
    value.loc[["Dairy"]] = (
        float(food_demand_in_tonnes().loc["Dairy"]) / expected_grassland_milk_yield()
    )
    return value


@component.add(
    name="Vegetal Food supply kcal capita day",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_supply_of_vegetal_calories": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def vegetal_food_supply_kcal_capita_day():
    """
    Average amount of vegetal food measured in calories available for each person per day. Source of historical data: http://faostat.fao.org
    """
    return total_supply_of_vegetal_calories() / (
        population() * days_in_year() * kcal_to_mkcal()
    )


@component.add(
    name="Animal Food Supply kcal capita day",
    units="kcal/(Person*Day)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_supply_of_animal_calories": 1,
        "population": 1,
        "kcal_to_mkcal": 1,
        "days_in_year": 1,
    },
)
def animal_food_supply_kcal_capita_day():
    """
    Average amount of animal food measured in calories available for each person per day. Source of historical data: http://faostat.fao.org
    """
    return total_supply_of_animal_calories() / (
        population() * days_in_year() * kcal_to_mkcal()
    )


@component.add(
    name="Permanent meadows and pastures",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "meadows_and_pastures_percentage_of_agriculture_land": 1,
    },
)
def permanent_meadows_and_pastures():
    """
    Area of permanent meadows and pastures land.
    """
    return agricultural_land() * meadows_and_pastures_percentage_of_agriculture_land()


@component.add(
    name="Agricultural Land",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_agricultural_land": 1},
    other_deps={
        "_integ_agricultural_land": {
            "initial": {"init_agricultural_land": 1},
            "step": {
                "agricultural_land_erosion_rate": 1,
                "forestation_from_agricultural_land": 1,
                "agricultural_land_conversion_rate_to_urban_land": 1,
                "deforestation_to_agricultural_land": 1,
                "agricultural_land_development_rate": 1,
            },
        }
    },
)
def agricultural_land():
    """
    Total Agriculture Land.
    """
    return _integ_agricultural_land()


_integ_agricultural_land = Integ(
    lambda: -agricultural_land_erosion_rate()
    - forestation_from_agricultural_land()
    - agricultural_land_conversion_rate_to_urban_land()
    + deforestation_to_agricultural_land()
    + agricultural_land_development_rate(),
    lambda: init_agricultural_land(),
    "_integ_agricultural_land",
)


@component.add(
    name="Agricultural Land Conversion Rate to Urban Land",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "urban_and_industrial_land_discrepancy": 1,
        "fraction_of_urban_land_conversion_from_agriculture": 1,
        "agriculture_to_urban_land_allocation_time": 2,
        "agricultural_land": 1,
        "agriculture_protected_land": 1,
    },
)
def agricultural_land_conversion_rate_to_urban_land():
    """
    Transformation process of Agriculture Land into Urban and Industrial Land.
    """
    return float(
        np.minimum(
            urban_and_industrial_land_discrepancy()
            * fraction_of_urban_land_conversion_from_agriculture()
            / agriculture_to_urban_land_allocation_time(),
            (agricultural_land() - agriculture_protected_land())
            / agriculture_to_urban_land_allocation_time(),
        )
    )


@component.add(
    name="Agricultural Land Erosion Rate",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land": 1, "agricultural_land_erosion_fraction": 1},
)
def agricultural_land_erosion_rate():
    """
    Process of transformation between Agriculture and Other Land.
    """
    return agricultural_land() * agricultural_land_erosion_fraction()


@component.add(
    name="Permanent crops",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "permanent_crops_percentage_of_agriculture_land": 1,
    },
)
def permanent_crops():
    """
    Area of permanent crops land.
    """
    return agricultural_land() * permanent_crops_percentage_of_agriculture_land()


@component.add(
    name="Forestation from Agricultural Land",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "agriculture_protected_land": 1,
        "time_step": 1,
        "fraction_of_forest_land_conversion_from_agriculture": 1,
        "forest_land_discrepancy": 1,
        "agriculture_to_forest_land_allocation_time": 1,
    },
)
def forestation_from_agricultural_land():
    """
    Process of transformation between Forest and Agriculture Land.
    """
    return float(
        np.minimum(
            (agricultural_land() - agriculture_protected_land()) / time_step(),
            forest_land_discrepancy()
            * fraction_of_forest_land_conversion_from_agriculture()
            / agriculture_to_forest_land_allocation_time(),
        )
    )


@component.add(
    name="Total Land",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "agricultural_land": 1,
        "forest_land": 1,
        "other_land": 1,
        "urban_and_industrial_land": 1,
    },
)
def total_land():
    """
    Total considered land.
    """
    return (
        agricultural_land() + forest_land() + other_land() + urban_and_industrial_land()
    )


@component.add(
    name="Other Land",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_other_land": 1},
    other_deps={
        "_integ_other_land": {
            "initial": {"init_other_land": 1},
            "step": {
                "agricultural_land_erosion_rate": 1,
                "agricultural_land_development_rate": 1,
                "forestation_from_other_land": 1,
            },
        }
    },
)
def other_land():
    """
    Land not classified as Agricultural area, Forest area or Urban and Industrial Land.
    """
    return _integ_other_land()


_integ_other_land = Integ(
    lambda: agricultural_land_erosion_rate()
    - agricultural_land_development_rate()
    - forestation_from_other_land(),
    lambda: init_other_land(),
    "_integ_other_land",
)


@component.add(
    name="Deforestation to Urban Land",
    units="ha/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "urban_and_industrial_land_discrepancy": 1,
        "fraction_of_urban_land_conversion_from_agriculture": 1,
        "forest_to_urban_land_allocation_time": 2,
        "forest_land": 1,
        "forest_protected_land": 1,
    },
)
def deforestation_to_urban_land():
    """
    Transformation process of Forest into Urban and Industrial Land.
    """
    return float(
        np.minimum(
            urban_and_industrial_land_discrepancy()
            * (1 - fraction_of_urban_land_conversion_from_agriculture())
            / forest_to_urban_land_allocation_time(),
            (forest_land() - forest_protected_land())
            / forest_to_urban_land_allocation_time(),
        )
    )


@component.add(
    name="Arable Land",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_land": 1, "arable_percentage_of_agriculture_land": 1},
)
def arable_land():
    """
    Area of arable land.
    """
    return agricultural_land() * arable_percentage_of_agriculture_land()


@component.add(
    name="Forest Land",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_forest_land": 1},
    other_deps={
        "_integ_forest_land": {
            "initial": {"init_forest_land": 1},
            "step": {
                "forestation_from_agricultural_land": 1,
                "forestation_from_other_land": 1,
                "deforestation_to_agricultural_land": 1,
                "deforestation_to_urban_land": 1,
            },
        }
    },
)
def forest_land():
    """
    Total Forest Land.
    """
    return _integ_forest_land()


_integ_forest_land = Integ(
    lambda: forestation_from_agricultural_land()
    + forestation_from_other_land()
    - deforestation_to_agricultural_land()
    - deforestation_to_urban_land(),
    lambda: init_forest_land(),
    "_integ_forest_land",
)


@component.add(
    name="Urban and Industrial Land per Capita",
    units="ha/Person",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_urban_land_requirement": 1,
        "normal_urban_and_industrial_land_per_capita": 1,
    },
)
def urban_and_industrial_land_per_capita():
    """
    Actual available area of Urban and Industrial Land per capita assuming equal land distribution between the total population.
    """
    return (
        effect_of_gdp_on_urban_land_requirement()
        * normal_urban_and_industrial_land_per_capita()
    )


@component.add(
    name="Effect of GDP on Cropland Management Practices Increment",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable8_cropland_mp": 1},
)
def effect_of_gdp_on_cropland_management_practices_increment():
    """
    Increment of impact of GDP on cropland management practices.
    """
    return variable8_cropland_mp()


@component.add(
    name="Effect of GDP on Forest Management Practices Increment",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable7_forest_mp": 1},
)
def effect_of_gdp_on_forest_management_practices_increment():
    """
    Increment of impact of GDP on forest land management practices.
    """
    return variable7_forest_mp()


@component.add(
    name="Effect of Management Practices on Agriculture Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_cropland_management_practices_increment": 1,
        "smoothed_gwp_per_capita": 2,
        "effect_of_gdp_on_cropland_management_practices_elasticity": 1,
    },
)
def effect_of_management_practices_on_agriculture_land_fertility():
    """
    Impact of agricultural land management practices on cropland fertility.
    """
    return 1 + effect_of_gdp_on_cropland_management_practices_increment() * (
        1
        - float(
            np.exp(
                -effect_of_gdp_on_cropland_management_practices_elasticity()
                * smoothed_gwp_per_capita()
                * smoothed_gwp_per_capita()
            )
        )
    )


@component.add(
    name="Effect of Management Practices on Forest Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_gdp_on_forest_management_practices_increment": 1,
        "gwp_per_capita": 2,
        "effect_of_gdp_on_forest_land_fertility_elasticity": 1,
    },
)
def effect_of_management_practices_on_forest_land_fertility():
    """
    Impact of forest land management practices on forest land fertility.
    """
    return 1 + effect_of_gdp_on_forest_management_practices_increment() * (
        1
        - float(
            np.exp(
                -effect_of_gdp_on_forest_land_fertility_elasticity()
                * gwp_per_capita()
                * gwp_per_capita()
            )
        )
    )


@component.add(
    name="Target Deforestation Time Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scenario_target": 1, "time": 1},
)
def target_deforestation_time_factor():
    """
    WWF Scenario variable. Further development required.
    """
    return scenario_target() * ramp(__data["time"], 100, 2019, 2020)


@component.add(
    name="Effect of Climate Change on Forest Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "climate_impact_on_forest_land_fertility_scale": 1,
        "climate_impact_on_forest_land_fertility_reference_temperature": 1,
        "temperature_change_from_preindustrial": 1,
        "climate_impact_on_forest_land_fertility_nonlinearity": 1,
    },
)
def effect_of_climate_change_on_forest_land_fertility():
    """
    Impact of climate change risk on forest land fertility.
    """
    return (
        1
        - climate_impact_on_forest_land_fertility_scale()
        * (
            temperature_change_from_preindustrial()
            / climate_impact_on_forest_land_fertility_reference_temperature()
        )
        ** climate_impact_on_forest_land_fertility_nonlinearity()
    )


@component.add(
    name="Total Daily Calorie Supply per Capita",
    units="kcal/Person/Day",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "animal_food_supply_kcal_capita_day": 1,
        "vegetal_food_supply_kcal_capita_day": 1,
    },
)
def total_daily_calorie_supply_per_capita():
    """
    Total average amount of food measured in calories available for each person per day. Source of projection data: GLOBIOM model, IIASA.
    """
    return animal_food_supply_kcal_capita_day() + vegetal_food_supply_kcal_capita_day()


@component.add(
    name="Target Delayed Scenario Ramp Change",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def target_delayed_scenario_ramp_change():
    """
    WWF Scenario variable. Further development required.
    """
    return -0.09


@component.add(
    name="Half Measures Scenario Ramp Time Change",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def half_measures_scenario_ramp_time_change():
    """
    WWF Scenario variable. Further development required.
    """
    return 1


@component.add(
    name="Half Measures Scenario Ramp Change",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def half_measures_scenario_ramp_change():
    """
    WWF Scenario variable. Further development required.
    """
    return -0.0215


@component.add(
    name="Target Scenario Ramp Change",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def target_scenario_ramp_change():
    """
    WWF Scenario variable. Further development required.
    """
    return -0.0673


@component.add(
    name="Zero Net Deforestation and Forest Degradation Scenarios",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"target": 1, "target_delayed": 1, "half_measures": 1},
)
def zero_net_deforestation_and_forest_degradation_scenarios():
    """
    WWF Scenario variable. Further development required.
    """
    return target() * target_delayed() * half_measures()


@component.add(
    name="Target Delayed",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scenario_target_delayed": 2,
        "target_delayed_scenario_ramp_change": 1,
        "time": 1,
    },
)
def target_delayed():
    """
    WWF Scenario variable. Further development required.
    """
    return (1 - scenario_target_delayed()) * 1 + scenario_target_delayed() * (
        1 + ramp(__data["time"], target_delayed_scenario_ramp_change(), 2020, 2030)
    )


@component.add(
    name="Target",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scenario_target": 2, "target_scenario_ramp_change": 1, "time": 1},
)
def target():
    """
    WWF Scenario variable. Further development required.
    """
    return (1 - scenario_target()) * 1 + scenario_target() * (
        1 + ramp(__data["time"], target_scenario_ramp_change(), 2010, 2020)
    )


@component.add(
    name="SCENARIO Half Measures",
    units="Dmnl",
    limits=(0.0, 1.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def scenario_half_measures():
    """
    WWF Scenario variable. Further development required.
    """
    return 0


@component.add(
    name="Target Delayed Deforestation Time Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"scenario_target_delayed": 1, "time": 1},
)
def target_delayed_deforestation_time_factor():
    """
    WWF Scenario variable. Further development required.
    """
    return scenario_target_delayed() * ramp(__data["time"], 100, 2025, 2030)


@component.add(
    name="SCENARIO Target",
    units="Dmnl",
    limits=(0.0, 1.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def scenario_target():
    """
    WWF Scenario variable. Further development required.
    """
    return 0


@component.add(
    name="SCENARIO Target Delayed",
    units="Dmnl",
    limits=(0.0, 1.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def scenario_target_delayed():
    """
    WWF Scenario variable. Further development required.
    """
    return 0


@component.add(
    name="Half Measures",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scenario_half_measures": 2,
        "time": 1,
        "half_measures_scenario_ramp_change": 1,
    },
)
def half_measures():
    """
    WWF Scenario variable. Further development required.
    """
    return (1 - scenario_half_measures()) * 1 + scenario_half_measures() * (
        1 + ramp(__data["time"], half_measures_scenario_ramp_change(), 2010, 2020)
    )


@component.add(
    name="Half Measures Deforestation Time Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scenario_half_measures": 1,
        "half_measures_scenario_ramp_time_change": 1,
        "time": 1,
    },
)
def half_measures_deforestation_time_factor():
    """
    WWF Scenario variable. Further development required.
    """
    return scenario_half_measures() * ramp(
        __data["time"], half_measures_scenario_ramp_time_change(), 2019, 2020
    )


@component.add(
    name="Fertilization Related Practices",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effect_of_input_neutral_technology_change_on_agricultural_land_fertility": 1,
        "effect_of_management_practices_on_agriculture_land_fertility": 1,
    },
)
def fertilization_related_practices():
    """
    Variable representing extent of technical advancement and management practices related to fertilization.
    """
    return (
        effect_of_input_neutral_technology_change_on_agricultural_land_fertility()
        * effect_of_management_practices_on_agriculture_land_fertility()
    )


@component.add(
    name="Permanent Crops Percentage of Agriculture Land",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def permanent_crops_percentage_of_agriculture_land():
    """
    Percentage of agricultural land constituting the permanent crops land.
    """
    return 0.05


@component.add(
    name="Arable Percentage of Agriculture Land",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def arable_percentage_of_agriculture_land():
    """
    Percentage of agricultural land constituting the arable land.
    """
    return 0.287


@component.add(
    name="Meadows and Pastures Percentage of Agriculture Land",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def meadows_and_pastures_percentage_of_agriculture_land():
    """
    Percentage of agricultural land constituting the meadows and pastures land.
    """
    return 0.689


@component.add(
    name="INIT Agricultural Land",
    units="ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_agricultural_land():
    """
    The area of agriculture land for year 1900.4.4e+009
    """
    return 4400000000.0


@component.add(
    name="INIT Forest Land", units="ha", comp_type="Constant", comp_subtype="Normal"
)
def init_forest_land():
    """
    The area of forest land for year 1900. : 4.41e+013 (Felicjan) Calibrated: 5.14e+013 m2, 5.14e+09 ha
    """
    return 4400000000.0


@component.add(
    name="Days in Year", units="Days/Year", comp_type="Constant", comp_subtype="Normal"
)
def days_in_year():
    """
    The number of days per year.
    """
    return 365


@component.add(
    name="Input Neutral Technology Change in Forest",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"input_neutral_technology_change_in_forest_factor": 1},
)
def input_neutral_technology_change_in_forest():
    """
    Change in technological advancement related to forest land fertility.
    """
    return input_neutral_technology_change_in_forest_factor()


@component.add(
    name="Input Neutral Technology Change in Forest Factor",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def input_neutral_technology_change_in_forest_factor():
    """
    Factor change of technological advancement related to forest land fertility.
    """
    return 0.001


@component.add(
    name="Max Forest Protected Land",
    units="ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_forest_protected_land():
    """
    Maximum area of forest land that can become protected.: 3.5e+009
    """
    return 500000000.0


@component.add(
    name="Forest Protected Land Change Ratio",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_protected_land_change_ratio():
    """
    Ratio at which the gap between current and max forest protected land is closed.
    """
    return 0.1


@component.add(
    name="Time to Adjust Forest Protected Land",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_adjust_forest_protected_land():
    """
    Average time required to establish land protection.
    """
    return 2


@component.add(
    name="Current to Max Forest Protected Land",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_protected_land_change_ratio": 1,
        "max_forest_protected_land": 1,
        "forest_protected_land": 1,
    },
)
def current_to_max_forest_protected_land():
    """
    Gap being closed between current and max forest protected land.
    """
    return forest_protected_land_change_ratio() * (
        1 - forest_protected_land() / max_forest_protected_land()
    )


@component.add(
    name="INIT Forest Protected Land",
    units="ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_forest_protected_land():
    """
    Area of forest land indicated as protected in year 1900.
    """
    return 282254


@component.add(
    name="Forest Protected Land",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_forest_protected_land": 1},
    other_deps={
        "_integ_forest_protected_land": {
            "initial": {"init_forest_protected_land": 1},
            "step": {"forest_protected_land_change": 1},
        }
    },
)
def forest_protected_land():
    """
    Area of forest land indicated as protected. Source of historical data: http://www.fao.org/docrep/003/x4108e/X4108E11.htm# P3941_174357
    """
    return _integ_forest_protected_land()


_integ_forest_protected_land = Integ(
    lambda: forest_protected_land_change(),
    lambda: init_forest_protected_land(),
    "_integ_forest_protected_land",
)


@component.add(
    name="Climate Impact on Forest Land Fertility Scale",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_impact_on_forest_land_fertility_scale():
    """
    Increment of climate impact on forest land fertility.
    """
    return 0.013


@component.add(
    name="Effect of Input Neutral Technology Change on Forest Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "input_neutral_forest_technology": 1,
        "init_input_neutral_tc_in_forest": 1,
    },
)
def effect_of_input_neutral_technology_change_on_forest_land_fertility():
    """
    Impact of technological advancement on forest land fertility.
    """
    return input_neutral_forest_technology() / init_input_neutral_tc_in_forest()


@component.add(
    name="INIT Input Neutral TC in Forest",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_input_neutral_tc_in_forest():
    """
    Reference variable representing technological advancement and its positive impact on forest land fertility in year 1900.
    """
    return 1


@component.add(
    name="Forest Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "normal_forest_land_fertility": 1,
        "effect_of_climate_change_on_forest_land_fertility": 1,
        "effect_of_management_practices_on_forest_land_fertility": 1,
        "effect_of_co2_concentration_on_forest_land_fertility": 1,
        "effect_of_biodiversity_on_forest_land_fertility": 1,
        "effect_of_input_neutral_technology_change_on_forest_land_fertility": 1,
    },
)
def forest_land_fertility():
    """
    Multiplier inidcating forest land fertility i.e. how many times the nominal forest land yield has changed since the reference value in year 1900.
    """
    return (
        normal_forest_land_fertility()
        * effect_of_climate_change_on_forest_land_fertility()
        * effect_of_management_practices_on_forest_land_fertility()
        * effect_of_co2_concentration_on_forest_land_fertility()
        * effect_of_biodiversity_on_forest_land_fertility()
        * effect_of_input_neutral_technology_change_on_forest_land_fertility()
    )


@component.add(
    name="Input Neutral Forest Technology",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_input_neutral_forest_technology": 1},
    other_deps={
        "_integ_input_neutral_forest_technology": {
            "initial": {"init_input_neutral_tc_in_forest": 1},
            "step": {"input_neutral_technology_change_in_forest": 1},
        }
    },
)
def input_neutral_forest_technology():
    """
    Exogenous variable representing technological advancement and its positive impact on forest land fertility.
    """
    return _integ_input_neutral_forest_technology()


_integ_input_neutral_forest_technology = Integ(
    lambda: input_neutral_technology_change_in_forest(),
    lambda: init_input_neutral_tc_in_forest(),
    "_integ_input_neutral_forest_technology",
)


@component.add(
    name="Min Impact of Biodiversity on Forest Land Fertility",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_impact_of_biodiversity_on_forest_land_fertility():
    """
    Min impact of mean species abundance on forest land fertility.
    """
    return 0.1


@component.add(
    name="Max Impact of Biodiversity on Forest Land Fertility",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_impact_of_biodiversity_on_forest_land_fertility():
    """
    Max impact of mean species abundance on forest land fertility.
    """
    return 1


@component.add(
    name="Effect of Biodiversity on Forest Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_impact_of_biodiversity_on_forest_land_fertility": 2,
        "mean_species_abundance": 1,
        "max_impact_of_biodiversity_on_forest_land_fertility": 1,
        "init_species_abundance": 1,
    },
)
def effect_of_biodiversity_on_forest_land_fertility():
    """
    Impact of mean species abundance on forest land fertility. Scaled between minimal and maximal impact. Relative level is the value of mean species abundance in year 1900.
    """
    return min_impact_of_biodiversity_on_forest_land_fertility() + (
        max_impact_of_biodiversity_on_forest_land_fertility()
        - min_impact_of_biodiversity_on_forest_land_fertility()
    ) * (mean_species_abundance() / init_species_abundance())


@component.add(
    name="Climate Impact on Forest Land Fertility Nonlinearity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_impact_on_forest_land_fertility_nonlinearity():
    """
    Elasticity of climate impact on forest land fertility.
    """
    return 2


@component.add(
    name="Climate Impact on Forest Land Fertility Reference Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_impact_on_forest_land_fertility_reference_temperature():
    """
    Reference temperature against which the average temerature is compared in calculation of impact of climate change on forest land fertility.
    """
    return 3


@component.add(
    name="Effect of Water Withdrawal on Agriculture Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"agricultural_water_withdrawal_fulfillment_rate": 1},
)
def effect_of_water_withdrawal_on_agriculture_land_fertility():
    """
    Impact of water availability on cropland fertility.
    """
    return agricultural_water_withdrawal_fulfillment_rate()


@component.add(
    name="Max Effect of CO2 Concentration on Forest Land Fertility",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_effect_of_co2_concentration_on_forest_land_fertility():
    """
    Max impact of carbon concentration on forest land fertility.
    """
    return 1


@component.add(
    name="Elasticity of CO2 Concentration on Forest Land Fertility",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def elasticity_of_co2_concentration_on_forest_land_fertility():
    """
    Elasticity of impact of carbon concentration on forest land fertility.
    """
    return 1


@component.add(
    name="Effect of CO2 Concentration on Forest Land Fertility",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_effect_of_co2_concentration_on_forest_land_fertility": 2,
        "min_effect_of_co2_concentration_on_forest_land_fertility": 1,
        "elasticity_of_co2_concentration_on_forest_land_fertility": 1,
        "c_concentration_ratio": 2,
    },
)
def effect_of_co2_concentration_on_forest_land_fertility():
    """
    Impact of carbon concentration on forest land fertility. Scaled between minimal and maximal impact.
    """
    return max_effect_of_co2_concentration_on_forest_land_fertility() + (
        min_effect_of_co2_concentration_on_forest_land_fertility()
        - max_effect_of_co2_concentration_on_forest_land_fertility()
    ) * (
        (c_concentration_ratio() - 1)
        / (
            (c_concentration_ratio() - 1)
            + elasticity_of_co2_concentration_on_forest_land_fertility()
        )
    )


@component.add(
    name="Min Effect of CO2 Concentration on Forest Land Fertility",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_effect_of_co2_concentration_on_forest_land_fertility():
    """
    Min impact of carbon concentration on forest land fertility.
    """
    return 2


@component.add(
    name="Normal Forest Land Fertility",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_forest_land_fertility():
    """
    Reference value of forest land fertility in year 1900.
    """
    return 1


@component.add(
    name="INIT Other Land", units="ha", comp_type="Constant", comp_subtype="Normal"
)
def init_other_land():
    """
    The area of other land for year 1900.
    """
    return 4100000000.0


@component.add(
    name="Harvest Available Forest Land",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land_fraction_harvested_excluding_protected_area": 1,
        "forest_land": 1,
        "forest_protected_land": 1,
    },
)
def harvest_available_forest_land():
    """
    Actual area of Forest available to be harvested.
    """
    return forest_land_fraction_harvested_excluding_protected_area() * float(
        np.maximum(0, forest_land() - forest_protected_land())
    )


@component.add(
    name="Forest Protected Land constant",
    units="m*m",
    comp_type="Constant",
    comp_subtype="Normal",
)
def forest_protected_land_constant():
    """
    Area of Forest Land not transformable into other kind of lands.
    """
    return 4786320000000.0


@component.add(
    name="Forest Land Yield",
    units="Biomass ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land_fertility": 1,
        "nominal_energy_forest_land_productivity": 1,
    },
)
def forest_land_yield():
    """
    Actual annual amount of forest biomass production from unit forest land area for given Forest Land Fertility.
    """
    return forest_land_fertility() * nominal_energy_forest_land_productivity()


@component.add(
    name="Nominal Energy Forest Land Productivity",
    units="Biomass ton/(Year*ha)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def nominal_energy_forest_land_productivity():
    """
    Reference annual amount of forest biomass production from unit forest land area.
    """
    return 50


@component.add(
    name="Sqr m to ha", units="ha/(m*m)", comp_type="Constant", comp_subtype="Normal"
)
def sqr_m_to_ha():
    """
    Coefficient to convert sqr meters into ha.
    """
    return 0.0001


@component.add(
    name="Agriculture Protected Land",
    units="ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def agriculture_protected_land():
    """
    Area of Agriculture Land not transformable into other kind of lands.
    """
    return 1466830000.0


@component.add(
    name="Other Protected Land", units="ha", comp_type="Constant", comp_subtype="Normal"
)
def other_protected_land():
    """
    Area of Other Land not transformable into other kind of lands.
    """
    return 500000000.0


@component.add(
    name="INIT Urban and Industrial Land",
    units="ha",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_urban_and_industrial_land():
    """
    The area of urban and industrial land for year 1900.
    """
    return 4000000.0


@component.add(
    name="Urban and Industrial Land",
    units="ha",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_urban_and_industrial_land": 1},
    other_deps={
        "_integ_urban_and_industrial_land": {
            "initial": {"init_urban_and_industrial_land": 1},
            "step": {
                "agricultural_land_conversion_rate_to_urban_land": 1,
                "deforestation_to_urban_land": 1,
            },
        }
    },
)
def urban_and_industrial_land():
    """
    Total Urban and Industrial Land.
    """
    return _integ_urban_and_industrial_land()


_integ_urban_and_industrial_land = Integ(
    lambda: agricultural_land_conversion_rate_to_urban_land()
    + deforestation_to_urban_land(),
    lambda: init_urban_and_industrial_land(),
    "_integ_urban_and_industrial_land",
)


@component.add(
    name="Total Crops Biomass Demand",
    units="Biomass ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_demand": 1,
        "market_share_biomass_crops": 1,
        "biomass_conversion_efficiency": 1,
    },
)
def total_crops_biomass_demand():
    """
    Total demand for energy crops accounting for biomass energy market share and reference technology development.
    """
    return (
        energy_demand() * market_share_biomass_crops() / biomass_conversion_efficiency()
    )


@component.add(
    name="Total Forest Biomass Demand",
    units="Biomass ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_demand": 1,
        "market_share_biomass_forest": 1,
        "biomass_conversion_efficiency": 1,
    },
)
def total_forest_biomass_demand():
    """
    Total demand for forest biomass accounting for forest biomass energy market share and reference technology development.
    """
    return (
        energy_demand()
        * market_share_biomass_forest()
        / biomass_conversion_efficiency()
    )


@component.add(
    name="Potential Biomass Production",
    units="Biomass ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land_yield": 1,
        "harvest_available_forest_land": 1,
        "biomass_production_processing_loss": 1,
    },
)
def potential_biomass_production():
    """
    Potential Biomass Production for given area to be harvested, actual yield from ha and excluding forest biomass production processing losses.
    """
    return (
        forest_land_yield()
        * harvest_available_forest_land()
        * (1 - biomass_production_processing_loss())
    )


@component.add(
    name="Forest Biomass Production",
    units="Biomass ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_forest_biomass_demand": 1,
        "harvest_available_forest_land": 1,
        "forest_land_energy_yield": 1,
        "biomass_production_processing_loss": 1,
    },
)
def forest_biomass_production():
    """
    Total biomass production from forest.
    """
    return float(
        np.minimum(
            total_forest_biomass_demand(),
            harvest_available_forest_land()
            * forest_land_energy_yield()
            * (1 - biomass_production_processing_loss()),
        )
    )


@component.add(
    name="Forest Land Energy Yield",
    units="Biomass ton/(Year*ha)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_land_yield": 1,
        "effect_of_trees_maturing_on_yield": 1,
        "effect_of_trees_aging_on_yield": 1,
    },
)
def forest_land_energy_yield():
    """
    Forest Land Energy Yield accounting for reference forest biomass production and effect of trees age.
    """
    return (
        forest_land_yield()
        * effect_of_trees_maturing_on_yield()
        * effect_of_trees_aging_on_yield()
    )


@component.add(
    name="Forest Land Needed to be Harvested",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_forest_biomass_demand": 1,
        "biomass_production_processing_loss": 1,
        "forest_land_energy_yield": 1,
    },
)
def forest_land_needed_to_be_harvested():
    """
    Total area of Forest needed for biomass production purposes accounting for total demand for forest biomass, average forest land yield and average losses in forest biomass production process.
    """
    return (
        total_forest_biomass_demand() / (1 - biomass_production_processing_loss())
    ) / forest_land_energy_yield()


@component.add(
    name="Actual Forest Land Harvested",
    units="ha",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "forest_biomass_production": 1,
        "biomass_production_processing_loss": 1,
        "forest_land_energy_yield": 1,
    },
)
def actual_forest_land_harvested():
    """
    Forest biomass production expressed in terms of forest land harvested excluding forest biomass production processing loss.
    """
    return (
        forest_biomass_production() / (1 - biomass_production_processing_loss())
    ) / forest_land_energy_yield()


@component.add(
    name="Desired Production Fraction",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_forest_biomass_demand": 1, "potential_biomass_production": 1},
)
def desired_production_fraction():
    """
    Ratio of demand for forest biomass to potential production.
    """
    return total_forest_biomass_demand() / potential_biomass_production()


@component.add(
    name="Effect of Trees Aging on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_production_fraction": 1, "table_for_etay": 1},
)
def effect_of_trees_aging_on_yield():
    """
    Parameter accounting for decreased forest biomass production from aging tress.
    """
    return table_for_etay(desired_production_fraction())


@component.add(
    name="Effect of Trees Maturing on Yield",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_production_fraction": 1, "table_for_etmy": 1},
)
def effect_of_trees_maturing_on_yield():
    """
    Parameter accounting for increased forest biomass production from mature trees.
    """
    return table_for_etmy(desired_production_fraction())


@component.add(
    name="Table for ETAY",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_etay"},
)
def table_for_etay(x, final_subs=None):
    """
    Table for Effect of Trees Aging on Yield.
    """
    return _hardcodedlookup_table_for_etay(x, final_subs)


_hardcodedlookup_table_for_etay = HardcodedLookups(
    [0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
    [1.0, 1.0, 0.98, 0.9, 0.7, 0.4, 0.15, 0.001],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_etay",
)


@component.add(
    name="Table for ETMY",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_etmy"},
)
def table_for_etmy(x, final_subs=None):
    """
    Table for Effect of Trees Maturing on Yield.
    """
    return _hardcodedlookup_table_for_etmy(x, final_subs)


_hardcodedlookup_table_for_etmy = HardcodedLookups(
    [0.0, 0.1, 0.2, 0.3, 0.4, 1.0],
    [0.15, 0.45, 0.75, 0.95, 1.0, 1.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_etmy",
)


@component.add(
    name="Biomass Production Processing Loss",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biomass_production_processing_loss():
    """
    Average percentage of total forest biomass production lost due to processing.
    """
    return 0.1


@component.add(
    name="Increase in Solar Installation Technology Ratio",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_isitrlv3": 1},
)
def increase_in_solar_installation_technology_ratio():
    """
    Increase in Solar Installation Technology Ratio due to investments in solar energy installation capacity.
    """
    return outflow_isitrlv3()


@component.add(
    name="Increase in Solar Energy Technology Ratio",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_isetlv3": 1},
)
def increase_in_solar_energy_technology_ratio():
    """
    Increase in Solar Energy Technology Ratio due to investments in solar conversion efficiency technology and their productivity.
    """
    return outflow_isetlv3()


@component.add(
    name="Solar Available Area",
    units="m*m",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"sa_var_s": 1, "_smooth_solar_available_area": 1},
    other_deps={
        "_smooth_solar_available_area": {
            "initial": {
                "solar_available_area_variation": 1,
                "sa_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "solar_available_area_variation": 1,
                "sa_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def solar_available_area():
    """
    Total area available for solar energy production capacities.
    """
    return sa_var_s() + _smooth_solar_available_area()


_smooth_solar_available_area = Smooth(
    lambda: step(
        __data["time"], solar_available_area_variation() - sa_var_s(), 2020 + e_var_t()
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"], solar_available_area_variation() - sa_var_s(), 2020 + e_var_t()
    ),
    lambda: 1,
    "_smooth_solar_available_area",
)


@component.add(
    name="Solar Installation Technology Development Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_installation_technology_development_time_variation": 1,
        "time": 1,
    },
)
def solar_installation_technology_development_time():
    """
    Average time required to turn investments into concrete solar energy production capacity. Since the simulation starts in 1900 it is a significant time.
    """
    return 100 + step(
        __data["time"],
        renewable_installation_technology_development_time_variation() - 100,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Solar Energy Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_renewable_energy_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_solar_energy_technology():
    """
    Effectivenes of resources dedicated to solar conversion efficiency technology development.
    """
    return 1e-09 + step(
        __data["time"],
        effectiveness_of_investment_in_renewable_energy_technology_variation() - 1e-09,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Solar Installation Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_renewable_installation_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_solar_installation_technology():
    """
    Effectiveness of resources dedicated to solar energy capacity efficiency technology development.
    """
    return 1e-10 + step(
        __data["time"],
        effectiveness_of_investment_in_renewable_installation_technology_variation()
        - 1e-10,
        2020,
    )


@component.add(
    name="Solar Energy Technology Development Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"renewable_energy_technology_development_time_variation": 1, "time": 1},
)
def solar_energy_technology_development_time():
    """
    Average time required to turn investments into concrete solar conversion efficiency technology developments. Since the simulation starts in 1900 it is a significant time.
    """
    return 50 + step(
        __data["time"],
        renewable_energy_technology_development_time_variation() - 50,
        2020,
    )


@component.add(
    name="Fraction for Solar Learning Curve Strength",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_for_wind_and_solar_learning_curve_strength_variation": 1,
        "time": 1,
    },
)
def fraction_for_solar_learning_curve_strength():
    """
    Fraction for Solar Learning Curve Strength indicating by what percentage the solar energy cost will drop for each doubling of solar installed capacity.
    """
    return 0.2 + step(
        __data["time"],
        fraction_for_wind_and_solar_learning_curve_strength_variation() - 0.2,
        2020,
    )


@component.add(
    name="Solar Final Investment",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"renewable_final_investment_fraction_variation": 1, "time": 1},
)
def solar_final_investment():
    """
    Eventual average level of investments in solar energy technology.
    """
    return 0.03 + step(
        __data["time"], renewable_final_investment_fraction_variation() - 0.03, 2020
    )


@component.add(
    name="Effect of Solar Energy Demand and Supply on Price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_solar_demand": 1,
        "possible_solar_energy_production": 1,
        "sensitivity_of_solar_energy_price_to_supply_and_demand": 1,
    },
)
def effect_of_solar_energy_demand_and_supply_on_price():
    """
    Effect of Solar Demand and Supply ratio on actual solar energy price.
    """
    return (
        total_solar_demand() / possible_solar_energy_production()
    ) ** sensitivity_of_solar_energy_price_to_supply_and_demand()


@component.add(
    name="Solar Energy Production Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"possible_solar_energy_production": 1, "total_solar_demand": 1},
)
def solar_energy_production_rate():
    """
    Total solar energy production per year accounting for demand and potential production due to available production capability and technical developments.
    """
    return float(np.minimum(possible_solar_energy_production(), total_solar_demand()))


@component.add(
    name="Efficiency of Solar Installed Capacity",
    units="Mtoe/(Year*m*m)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"possible_solar_energy_production": 1, "solar_installed_capacity": 1},
)
def efficiency_of_solar_installed_capacity():
    """
    Total production efficiency of Solar Installed Capacity for given weather conditions and technology developments.
    """
    return possible_solar_energy_production() / solar_installed_capacity()


@component.add(
    name="Solar Energy Demand to Supply Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_solar_demand": 1, "possible_solar_energy_production": 1},
)
def solar_energy_demand_to_supply_ratio():
    """
    Solar Energy Demand to Supply Ratio.
    """
    return total_solar_demand() / possible_solar_energy_production()


@component.add(
    name="Reference Cost of Solar Energy Production",
    units="$/((m*m)*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable14_solar_cost": 1},
)
def reference_cost_of_solar_energy_production():
    """
    Reference cost of unit solar energy production per year.
    """
    return variable14_solar_cost()


@component.add(
    name="Possible Solar Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_conversion_efficiency_factor": 1,
        "sun_radiation": 1,
        "solar_installed_capacity": 1,
        "time_fl": 1,
        "solar_conversion_efficiency": 1,
        "kwh_into_mtoe": 1,
    },
)
def possible_solar_energy_production():
    """
    Potential solar energy production per year due to available production capability, weather conditions and technical developments.
    """
    return (
        solar_conversion_efficiency_factor()
        * sun_radiation()
        * solar_installed_capacity()
        * time_fl()
        * solar_conversion_efficiency()
        * kwh_into_mtoe()
    )


@component.add(
    name="Productivity of Investment in Solar Capacity Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_space_on_capacity_installation": 1,
        "solar_installation_efficiency": 1,
    },
)
def productivity_of_investment_in_solar_capacity_installation():
    """
    Productivity of solar capacity installation taking into account the level of available capacities and technology development state.
    """
    return impact_of_space_on_capacity_installation() * solar_installation_efficiency()


@component.add(
    name="INIT Unit Cost of Solar Capacity Installation",
    units="$/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_unit_cost_of_solar_capacity_installation():
    """
    Initial unit cost per unit solar capacity installation.
    """
    return 2000000000.0


@component.add(
    name="Solar Infrastructure Adjustment",
    units="m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_capacity_aging_rate": 1,
        "desired_solar_installed_capacity": 1,
        "solar_installed_capacity": 1,
        "time_to_adjust_solar_infrastructure": 1,
    },
)
def solar_infrastructure_adjustment():
    """
    Adjustment of Solar Infrastructure to the desired level over a specified adjustment time and accounting for constant infrastructure decrease due to aging process.
    """
    return (
        solar_capacity_aging_rate()
        + (desired_solar_installed_capacity() - solar_installed_capacity())
        / time_to_adjust_solar_infrastructure()
    )


@component.add(
    name="Impact of Space on Capacity Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_installed_capacity": 1, "solar_available_area": 1},
)
def impact_of_space_on_capacity_installation():
    """
    Ratio of currently installed solar capacity to total possible.
    """
    return float(np.maximum(0, 1 - solar_installed_capacity() / solar_available_area()))


@component.add(
    name="Time to Adjust Solar Infrastructure",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_adjust_solar_infrastructure():
    """
    Time to adjust Solar Infrastructure to the desired level.
    """
    return 5


@component.add(
    name="Investment in Solar Capacity",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installation_of_solar_capacity_rate": 1,
        "unit_cost_of_solar_capacity_installation": 1,
        "efficiency_of_solar_installed_capacity": 1,
        "solar_capacity_aging_time": 1,
    },
)
def investment_in_solar_capacity():
    """
    Amount of resources dedicated to solar energy capacity development.
    """
    return (
        installation_of_solar_capacity_rate()
        * unit_cost_of_solar_capacity_installation()
        * efficiency_of_solar_installed_capacity()
        * solar_capacity_aging_time()
    )


@component.add(
    name="Solar Energy Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicated_solar_energy_price": 1,
        "effect_of_solar_energy_demand_and_supply_on_price": 1,
    },
)
def solar_energy_price():
    """
    Actual solar energy price accounting for indicated solar energy price and effect of demand and supply.
    """
    return (
        indicated_solar_energy_price()
        * effect_of_solar_energy_demand_and_supply_on_price()
    )


@component.add(
    name="Cost of Solar Energy",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_cost_of_solar_capacity_installation": 1,
        "unit_cost_of_solar_energy_production": 1,
    },
)
def cost_of_solar_energy():
    """
    Cost of solar energy production assuming an impact of learning curve.
    """
    return (
        unit_cost_of_solar_capacity_installation()
        + unit_cost_of_solar_energy_production()
    )


@component.add(
    name="Production to Installation Ratio",
    units="Mtoe/(m*m*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_production": 1, "solar_installed_capacity": 1},
)
def production_to_installation_ratio():
    """
    Ratio of solar energy production to available production capacity.
    """
    return solar_energy_production() / solar_installed_capacity()


@component.add(
    name="Unit Cost of Solar Capacity Installation",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "init_unit_cost_of_solar_capacity_installation": 1,
        "impact_of_learning_on_solar_unit_cost_of_technology_pc": 1,
    },
)
def unit_cost_of_solar_capacity_installation():
    """
    Unit Cost of Solar Capacity Installation. Determined by Productivity of Investment in Solar Capacity Installation.
    """
    return (
        init_unit_cost_of_solar_capacity_installation()
        * impact_of_learning_on_solar_unit_cost_of_technology_pc()
    )


@component.add(
    name="Impact of Learning on Solar Unit Cost of Technology PC",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_installed_capacity": 1,
        "init_sic": 1,
        "solar_learning_curve_strength": 1,
    },
)
def impact_of_learning_on_solar_unit_cost_of_technology_pc():
    """
    Impact of learning curve on solar energy cost.
    """
    return (solar_installed_capacity() / init_sic()) ** solar_learning_curve_strength()


@component.add(
    name="Unit Cost of Solar Energy Production",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_cost_of_solar_energy_production": 1,
        "production_to_installation_ratio": 1,
    },
)
def unit_cost_of_solar_energy_production():
    """
    Unit cost of solar capacity installation per energy unit.
    """
    return (
        reference_cost_of_solar_energy_production() / production_to_installation_ratio()
    )


@component.add(
    name="Installation of Solar Capacity Rate",
    units="m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_solar_capacity_installation": 1,
        "solar_infrastructure_adjustment": 1,
    },
)
def installation_of_solar_capacity_rate():
    """
    Rate of new solar capacity installation.
    """
    return (
        productivity_of_investment_in_solar_capacity_installation()
        * solar_infrastructure_adjustment()
    )


@component.add(
    name="Solar Initial Investment",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def solar_initial_investment():
    """
    Initial level of fractional investments in solar energy technology.
    """
    return 0


@component.add(
    name="Solar Investment Fraction Slope",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_final_investment": 1,
        "solar_initial_investment": 1,
        "ramp_investment_period": 1,
    },
)
def solar_investment_fraction_slope():
    """
    Intensity of increase in investments in solar energy technology.
    """
    return (
        float(np.abs(solar_final_investment() - solar_initial_investment()))
        / ramp_investment_period()
    )


@component.add(
    name="Investment in Solar Energy Efficiency",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_solar_energy_technology": 1,
        "fraction_invested_in_solar_energy_installation": 1,
    },
)
def investment_in_solar_energy_efficiency():
    """
    Total investments in solar conversion efficiency technology.
    """
    return investment_in_solar_energy_technology() * (
        1 - fraction_invested_in_solar_energy_installation()
    )


@component.add(
    name="Solar Investment Fraction Finish",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_time": 1, "ramp_investment_period": 1},
)
def solar_investment_fraction_finish():
    """
    End of fractional investments in solar energy technology.
    """
    return initial_time() + ramp_investment_period()


@component.add(
    name="Solar Investment Fraction Start",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_time": 1},
)
def solar_investment_fraction_start():
    """
    Start of investments in solar energy technology.
    """
    return initial_time()


@component.add(
    name="Fraction Invested in Solar Energy Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_installation_efficiency": 1, "table_for_fisei": 1},
)
def fraction_invested_in_solar_energy_installation():
    """
    Fraction of investments in solar energy technology dedicated to capacity.
    """
    return table_for_fisei(solar_installation_efficiency())


@component.add(
    name="Table for FISEI",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_fisei"},
)
def table_for_fisei(x, final_subs=None):
    """
    Table determining order by which technology investments are dedicated to energy and installation efficiency. For small Solar Installation Efficiency, in order to secure sufficient production capacity, more investments are directed to infrastructure. Once the Solar Installation Efficiency increases the investments are redirected to solar conversion efficiency technologies.
    """
    return _hardcodedlookup_table_for_fisei(x, final_subs)


_hardcodedlookup_table_for_fisei = HardcodedLookups(
    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
    [0.8, 0.8, 0.7, 0.5, 0.2, 0.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_fisei",
)


@component.add(
    name="Investment in Solar Energy Installation",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_solar_energy_technology": 1,
        "fraction_invested_in_solar_energy_installation": 1,
    },
)
def investment_in_solar_energy_installation():
    """
    Total investments in solar energy capacity.
    """
    return (
        investment_in_solar_energy_technology()
        * fraction_invested_in_solar_energy_installation()
    )


@component.add(name="MAXSIE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxsie():
    """
    Maximal value of Solar Installation Efficiency factor.
    """
    return 1


@component.add(
    name="Solar Installation Technology Ratio",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_solar_installation_technology_ratio": 1},
    other_deps={
        "_integ_solar_installation_technology_ratio": {
            "initial": {"init_sitrn": 1},
            "step": {"increase_in_solar_installation_technology_ratio": 1},
        }
    },
)
def solar_installation_technology_ratio():
    """
    Solar Installation Technology Ratio increased due to investments in solar energy capacity installation efficiency.
    """
    return _integ_solar_installation_technology_ratio()


_integ_solar_installation_technology_ratio = Integ(
    lambda: increase_in_solar_installation_technology_ratio(),
    lambda: init_sitrn(),
    "_integ_solar_installation_technology_ratio",
)


@component.add(
    name="INIT SITRN", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_sitrn():
    """
    Initial Solar Installation Technology Ratio.
    """
    return 0


@component.add(
    name="Solar Installation Efficiency",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"minsie": 2, "maxsie": 1, "solar_installation_technology_ratio": 2},
)
def solar_installation_efficiency():
    """
    Parameter indicating solar energy capacity installation efficiency at the current state of technical developments.
    """
    return minsie() + (maxsie() - minsie()) * (
        solar_installation_technology_ratio()
        / (solar_installation_technology_ratio() + 1)
    )


@component.add(name="MINSIE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minsie():
    """
    Minimal and initial value of Solar Installation Efficiency factor.
    """
    return 0.01


@component.add(
    name="Total Solar Demand GW",
    units="GW/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_solar_demand": 1, "kwh_into_mtoe_peak_hour": 1, "kw_into_gw": 1},
)
def total_solar_demand_gw():
    """
    Total demand for solar energy measured in GW.
    """
    return total_solar_demand() / kwh_into_mtoe_peak_hour() / kw_into_gw()


@component.add(
    name="Time FL",
    units="Hour/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"weather_factor": 1, "hours_per_year": 1},
)
def time_fl():
    """
    Average time of sun availability.
    """
    return weather_factor() * hours_per_year()


@component.add(
    name="Total Solar Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "market_share_solar": 1},
)
def total_solar_demand():
    """
    Total demand for solar energy.
    """
    return energy_demand() * market_share_solar()


@component.add(
    name="Solar Energy Price per kWh",
    units="$/(kW*Hour)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_price": 1, "kwh_into_mtoe": 1},
)
def solar_energy_price_per_kwh():
    """
    Actual solar energy price accounting for indicated solar energy price and effect of demand and supply measured in dollars per kWh.
    """
    return solar_energy_price() * kwh_into_mtoe()


@component.add(
    name="Max Power Point",
    units="W",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_conversion_efficiency": 1,
        "standard_test_conditions": 1,
        "solar_installed_capacity": 1,
    },
)
def max_power_point():
    """
    Max Power Point measured at Standard Test Conditions for installed solar energy production capacity and current solar conversion efficiency.
    """
    return (
        solar_conversion_efficiency()
        * standard_test_conditions()
        * solar_installed_capacity()
    )


@component.add(
    name="Standard Test Conditions",
    units="W/(m*m)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def standard_test_conditions():
    """
    Standard Test Conditions assuming irradiance of 1000 W/(m*m) to calculate Max Power Point.
    """
    return 1000


@component.add(
    name="Max Power Point GW",
    units="GW",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"max_power_point": 1, "w_into_gw": 1},
)
def max_power_point_gw():
    """
    Solar Max Power Point measured in GW.
    """
    return max_power_point() / w_into_gw()


@component.add(
    name="Solar Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_production_rate": 1},
)
def solar_energy_production():
    """
    Total solar energy production per year.
    """
    return solar_energy_production_rate()


@component.add(
    name="Sensitivity of Solar Energy Price to Supply and Demand",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_solar_energy_price_to_supply_and_demand():
    """
    Sensitivity of Solar Energy Price to Supply and Demand ratio.
    """
    return 0


@component.add(
    name="Indicated Solar Energy Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cost_of_solar_energy": 1, "desired_solar_energy_gross_margin": 1},
)
def indicated_solar_energy_price():
    """
    Indicated solar energy price accounting for unit cost and gross margin.
    """
    return cost_of_solar_energy() * (1 + desired_solar_energy_gross_margin())


@component.add(
    name="Solar Energy Technology Ratio",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_solar_energy_technology_ratio": 1},
    other_deps={
        "_integ_solar_energy_technology_ratio": {
            "initial": {"init_setrn": 1},
            "step": {"increase_in_solar_energy_technology_ratio": 1},
        }
    },
)
def solar_energy_technology_ratio():
    """
    Solar Energy Technology Ratio increased due to investments in solar conversion efficiency.
    """
    return _integ_solar_energy_technology_ratio()


_integ_solar_energy_technology_ratio = Integ(
    lambda: increase_in_solar_energy_technology_ratio(),
    lambda: init_setrn(),
    "_integ_solar_energy_technology_ratio",
)


@component.add(
    name="Desired Solar Energy Gross Margin",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def desired_solar_energy_gross_margin():
    """
    Desired Gross Margin per unit of solar energy.
    """
    return 0.2


@component.add(
    name="Desired Solar Installed Capacity",
    units="m*m",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_solar_demand": 1, "efficiency_of_solar_installed_capacity": 1},
)
def desired_solar_installed_capacity():
    """
    Desired Solar Installed Capacity accounting for Total Solar Demand and Efficiency of Solar Installed Capacity.
    """
    return total_solar_demand() / efficiency_of_solar_installed_capacity()


@component.add(
    name="Fraction of Revenue Invested in Solar Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_investment_fraction_slope": 1,
        "solar_investment_fraction_start": 1,
        "solar_investment_fraction_finish": 1,
        "time": 1,
    },
)
def fraction_of_revenue_invested_in_solar_technology():
    """
    Parameter to take into account historical increase of the solar energy significance and over time greater resources dedicated to the technology development.
    """
    return ramp(
        __data["time"],
        solar_investment_fraction_slope(),
        solar_investment_fraction_start(),
        solar_investment_fraction_finish(),
    )


@component.add(name="MINSCE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minsce():
    """
    Minimal and initial efficiency of solar radiation conversion.
    """
    return 0.13


@component.add(
    name="INIT SETRN", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_setrn():
    """
    Initial Solar Energy Technology Ratio.
    """
    return 0


@component.add(
    name="Solar Conversion Efficiency",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"minsce": 2, "maxsce": 1, "solar_energy_technology_ratio": 2},
)
def solar_conversion_efficiency():
    """
    Parameter indicating efficiency of solar radiation conversion at the current state of technical developments.
    """
    return minsce() + (maxsce() - minsce()) * (
        solar_energy_technology_ratio() / (solar_energy_technology_ratio() + 1)
    )


@component.add(
    name="Investment in Solar Energy Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_revenue_invested_in_solar_technology": 1,
        "solar_energy_revenue": 1,
    },
)
def investment_in_solar_energy_technology():
    """
    Investments in development of solar conversion efficiency technology and production capability.
    """
    return fraction_of_revenue_invested_in_solar_technology() * solar_energy_revenue()


@component.add(name="MAXSCE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxsce():
    """
    Maximal efficiency of solar radiation conversion.
    """
    return 0.4


@component.add(
    name="Cumulative Solar Energy Produced",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_solar_energy_produced": 1},
    other_deps={
        "_integ_cumulative_solar_energy_produced": {
            "initial": {"init_cumulative_solar_produced": 1},
            "step": {"solar_energy_production": 1},
        }
    },
)
def cumulative_solar_energy_produced():
    """
    Cumulative solar energy that has been produced.
    """
    return _integ_cumulative_solar_energy_produced()


_integ_cumulative_solar_energy_produced = Integ(
    lambda: solar_energy_production(),
    lambda: init_cumulative_solar_produced(),
    "_integ_cumulative_solar_energy_produced",
)


@component.add(
    name="Solar Energy Revenue",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_production": 1, "solar_energy_price": 1},
)
def solar_energy_revenue():
    """
    Total revenue in solar energy market.
    """
    return solar_energy_production() * solar_energy_price()


@component.add(
    name="Solar Installed Capacity",
    units="m*m",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_solar_installed_capacity": 1},
    other_deps={
        "_integ_solar_installed_capacity": {
            "initial": {"init_sic": 1},
            "step": {
                "installation_of_solar_capacity_rate": 1,
                "solar_capacity_aging_rate": 1,
            },
        }
    },
)
def solar_installed_capacity():
    """
    Installed capacity to transform solar radiation into energy.
    """
    return _integ_solar_installed_capacity()


_integ_solar_installed_capacity = Integ(
    lambda: installation_of_solar_capacity_rate() - solar_capacity_aging_rate(),
    lambda: init_sic(),
    "_integ_solar_installed_capacity",
)


@component.add(
    name="Sun Radiation", units="kW/(m*m)", comp_type="Constant", comp_subtype="Normal"
)
def sun_radiation():
    """
    Average sun radiation in kW per sqr meter.
    """
    return 0.5


@component.add(
    name="Solar Capacity Aging Rate",
    units="m*m/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_installed_capacity": 1, "solar_capacity_aging_time": 1},
)
def solar_capacity_aging_rate():
    """
    Aging rate of solar energy production capacities.
    """
    return solar_installed_capacity() / solar_capacity_aging_time()


@component.add(
    name="Solar Learning Curve Strength",
    units="1",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_for_solar_learning_curve_strength": 1},
)
def solar_learning_curve_strength():
    """
    Strength of learning curve with which the solar energy costs are influenced.
    """
    return float(np.log(1 - fraction_for_solar_learning_curve_strength())) / float(
        np.log(2)
    )


@component.add(
    name="Weather Factor", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def weather_factor():
    """
    Percentage of total hours per year when solar energy can be produced.
    """
    return 0.1


@component.add(
    name="INIT SIC", units="m*m", comp_type="Constant", comp_subtype="Normal"
)
def init_sic():
    """
    Initial installed capacity to transform sun radiation into energy.
    """
    return 400


@component.add(
    name="Increase in Biomass Installation Technology Ratio",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ibitrlv3": 1},
)
def increase_in_biomass_installation_technology_ratio():
    """
    Increase in Biomass Installation Technology Ratio due to investments in biomass energy capacity.
    """
    return outflow_ibitrlv3()


@component.add(
    name="Increase in Biomass Energy Technology Ratio",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_ibetrlv3": 1},
)
def increase_in_biomass_energy_technology_ratio():
    """
    Increase in Biomass Energy Technology Ratio due to investments in biomass energy efficiency technology and their productivity.
    """
    return outflow_ibetrlv3()


@component.add(
    name="Fraction for Biomass Learning Curve Strength",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_for_biomass_learning_curve_strength_variation": 1, "time": 1},
)
def fraction_for_biomass_learning_curve_strength():
    """
    Fraction for Biomass Learning Curve Strength indicating by what percentage the biomass energy cost will drop for each doubling of biomass installed capacity.
    """
    return 0.01 + step(
        __data["time"],
        fraction_for_biomass_learning_curve_strength_variation() - 0.01,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Biomass Installation Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_renewable_installation_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_biomass_installation_technology():
    """
    Effectiveness of resources dedicated to biomass energy capacity efficiency technology development.
    """
    return 1e-10 + step(
        __data["time"],
        effectiveness_of_investment_in_renewable_installation_technology_variation()
        - 1e-10,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Biomass Energy Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_renewable_energy_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_biomass_energy_technology():
    """
    Effectiveness of resources dedicated to biomass energy efficiency technology development.
    """
    return 1e-09 + step(
        __data["time"],
        effectiveness_of_investment_in_renewable_energy_technology_variation() - 1e-09,
        2020,
    )


@component.add(
    name="Biomass Installation Technology Development Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "renewable_installation_technology_development_time_variation": 1,
        "time": 1,
    },
)
def biomass_installation_technology_development_time():
    """
    Average time required to turn investments into concrete biomass energy production capacity. Since the simulation starts in 1900 it is a significant time.
    """
    return 100 + step(
        __data["time"],
        renewable_installation_technology_development_time_variation() - 100,
        2020,
    )


@component.add(
    name="Biomass Energy Technology Development Time",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"renewable_energy_technology_development_time_variation": 1, "time": 1},
)
def biomass_energy_technology_development_time():
    """
    Average time required to turn investments into concrete biomass energy efficiency technology developments. Since the simulation starts in 1900 it is a significant time.
    """
    return 50 + step(
        __data["time"],
        renewable_energy_technology_development_time_variation() - 50,
        2020,
    )


@component.add(
    name="Biomass Final Investment",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"renewable_final_investment_fraction_variation": 1, "time": 1},
)
def biomass_final_investment():
    """
    Eventual average level of investments in biomass energy technology.
    """
    return 0.03 + step(
        __data["time"], renewable_final_investment_fraction_variation() - 0.03, 2020
    )


@component.add(
    name="Biomass Production",
    units="Biomass ton/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"forest_biomass_production": 1, "energy_crops_production": 1},
)
def biomass_production():
    """
    Total biomass production from forest and energy crops.
    """
    return forest_biomass_production() + energy_crops_production()


@component.add(
    name="Reference Cost of Biomass Energy Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable13_biomas_cost": 1},
)
def reference_cost_of_biomass_energy_production():
    """
    Reference cost of unit biomass energy production per year.
    """
    return variable13_biomas_cost()


@component.add(
    name="Biomass Conversion Efficiency",
    units="Mtoe/Biomass ton",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable1_biomass": 1},
)
def biomass_conversion_efficiency():
    """
    Reference Biomass Conversion Efficiency indicating the greatest possibility of turning biomass into energy.
    """
    return variable1_biomass()


@component.add(
    name="INIT Unit Cost of Biomass Capacity Installation",
    units="$/Mtoe",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_unit_cost_of_biomass_capacity_installation():
    """
    Initial unit cost per unit biomass capacity installation.
    """
    return 2000000.0


@component.add(
    name="Time to Adjust Biomass Infrastructure",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_adjust_biomass_infrastructure():
    """
    Time to adjust Biomass Infrastructure to the desired level.
    """
    return 5


@component.add(
    name="Investment in Biomass Capacity",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "installation_of_biomass_capacity_rate": 1,
        "unit_cost_of_biomass_capacity_installation": 1,
        "efficiency_of_biomass_installed_capacity": 1,
        "biomass_capacity_aging_time": 1,
    },
)
def investment_in_biomass_capacity():
    """
    Amount of resources dedicated to biomass capacity development.
    """
    return (
        installation_of_biomass_capacity_rate()
        * unit_cost_of_biomass_capacity_installation()
        * efficiency_of_biomass_installed_capacity()
        * biomass_capacity_aging_time()
    )


@component.add(
    name="Biomass Energy Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicated_biomass_energy_price": 1,
        "effect_of_biomass_energy_demand_and_supply_on_price": 1,
    },
)
def biomass_energy_price():
    """
    Actual biomass energy price accounting for indicated biomass energy price and effect of demand and supply.
    """
    return (
        indicated_biomass_energy_price()
        * effect_of_biomass_energy_demand_and_supply_on_price()
    )


@component.add(
    name="Unit Cost of Biomass Energy Production",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_cost_of_biomass_energy_production": 1,
        "biomass_production_to_installation_ratio": 1,
    },
)
def unit_cost_of_biomass_energy_production():
    """
    Unit cost of biomass capacity installation per energy unit.
    """
    return (
        reference_cost_of_biomass_energy_production()
        / biomass_production_to_installation_ratio()
    )


@component.add(
    name="Productivity of Investment in Biomass Capacity Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_installed_capacity_ratio": 1,
        "biomass_installation_efficiency": 1,
    },
)
def productivity_of_investment_in_biomass_capacity_installation():
    """
    Productivity of biomass capacity installation taking into account the level of available capacities and technology development state.
    """
    return biomass_energy_installed_capacity_ratio() * biomass_installation_efficiency()


@component.add(
    name="Installation of Biomass Capacity Rate",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_infrastructure_adjustment": 1,
        "productivity_of_investment_in_biomass_capacity_installation": 1,
    },
)
def installation_of_biomass_capacity_rate():
    """
    Rate of new biomass capacity installation.
    """
    return float(
        np.maximum(
            0,
            biomass_infrastructure_adjustment()
            * productivity_of_investment_in_biomass_capacity_installation(),
        )
    )


@component.add(
    name="Unit Cost of Biomass Capacity Installation",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "init_unit_cost_of_biomass_capacity_installation": 1,
        "impact_of_learning_on_biomass_unit_cost_of_technology": 1,
    },
)
def unit_cost_of_biomass_capacity_installation():
    """
    Unit Cost of Biomass Capacity Installation. Determined by Productivity of Investment in Biomass Capacity Installation.
    """
    return (
        init_unit_cost_of_biomass_capacity_installation()
        * impact_of_learning_on_biomass_unit_cost_of_technology()
    )


@component.add(
    name="Cost of Biomass Energy",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "unit_cost_of_biomass_capacity_installation": 1,
        "unit_cost_of_biomass_energy_production": 1,
    },
)
def cost_of_biomass_energy():
    """
    Cost of biomass energy production assuming an impact of learning curve.
    """
    return (
        unit_cost_of_biomass_capacity_installation()
        + unit_cost_of_biomass_energy_production()
    )


@component.add(
    name="Total Biomass Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "market_share_biomass": 1},
)
def total_biomass_demand():
    """
    Total demand for energy from biomass.
    """
    return energy_demand() * market_share_biomass()


@component.add(
    name="Potential Biomass Energy Production from Resources",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_production": 1,
        "biomass_conversion_efficiency": 1,
        "biomass_capacity_factor": 1,
    },
)
def potential_biomass_energy_production_from_resources():
    """
    Potential biomass energy production per year due to available resources and technical developments.
    """
    return (
        biomass_production()
        * biomass_conversion_efficiency()
        * biomass_capacity_factor()
    )


@component.add(
    name="Biomass Learning Curve Strength",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_for_biomass_learning_curve_strength": 1},
)
def biomass_learning_curve_strength():
    """
    Strength of biomass learning curve with which the biomass energy costs are influenced..
    """
    return float(np.log(1 - fraction_for_biomass_learning_curve_strength())) / float(
        np.log(2)
    )


@component.add(
    name="Reference Biomass Energy Installed Capacity",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_biomass_energy_installed_capacity():
    """
    Reference biomass capacity.
    """
    return 500000000000.0


@component.add(
    name="Impact of Learning on Biomass Unit Cost of Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_installed_capacity": 1,
        "init_bic": 1,
        "biomass_learning_curve_strength": 1,
    },
)
def impact_of_learning_on_biomass_unit_cost_of_technology():
    """
    Impact of learning curve on biomass energy cost.
    """
    return (
        biomass_energy_installed_capacity() / init_bic()
    ) ** biomass_learning_curve_strength()


@component.add(
    name="Biomass Energy Installed Capacity Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_installed_capacity": 1,
        "reference_biomass_energy_installed_capacity": 1,
    },
)
def biomass_energy_installed_capacity_ratio():
    """
    Ratio of installed biomass energy production capacities to reference capacity.
    """
    return float(
        np.maximum(
            0,
            1
            - biomass_energy_installed_capacity()
            / reference_biomass_energy_installed_capacity(),
        )
    )


@component.add(
    name="Biomass Energy Production Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"potential_biomass_energy_production": 1, "total_biomass_demand": 1},
)
def biomass_energy_production_rate():
    """
    Total biomass energy production per year accounting for demand and potential production due to available resources, production capability and technical developments.
    """
    return float(
        np.minimum(potential_biomass_energy_production(), total_biomass_demand())
    )


@component.add(
    name="Potential Biomass Energy Production from Infrastructure",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_installed_capacity": 1,
        "average_annual_production_per_capacity": 1,
    },
)
def potential_biomass_energy_production_from_infrastructure():
    """
    Potential biomass energy production per year due to available production capability.
    """
    return (
        biomass_energy_installed_capacity() * average_annual_production_per_capacity()
    )


@component.add(
    name="Potential Biomass Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_biomass_energy_production_from_infrastructure": 1,
        "potential_biomass_energy_production_from_resources": 1,
    },
)
def potential_biomass_energy_production():
    """
    Potential biomass energy production per year due to available resources, production capability and technical developments.
    """
    return float(
        np.minimum(
            potential_biomass_energy_production_from_infrastructure(),
            potential_biomass_energy_production_from_resources(),
        )
    )


@component.add(
    name="Effect of Biomass Energy Demand and Supply on Price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_biomass_demand": 1,
        "potential_biomass_energy_production": 1,
        "sensitivity_of_biomass_energy_price_to_supply_and_demand": 1,
    },
)
def effect_of_biomass_energy_demand_and_supply_on_price():
    """
    Effect of Biomass Demand and Supply ratio on actual biomass energy price.
    """
    return (
        total_biomass_demand() / potential_biomass_energy_production()
    ) ** sensitivity_of_biomass_energy_price_to_supply_and_demand()


@component.add(
    name="Biomass Energy Demand to Supply Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_biomass_demand": 1, "potential_biomass_energy_production": 1},
)
def biomass_energy_demand_to_supply_ratio():
    """
    Biomass Energy Demand to Supply Ratio.
    """
    return total_biomass_demand() / potential_biomass_energy_production()


@component.add(
    name="Investment in Biomass Energy Installation",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_biomass_energy_technology": 1,
        "fraction_invested_in_biomass_energy_installation": 1,
    },
)
def investment_in_biomass_energy_installation():
    """
    Total investments in biomass energy capacity.
    """
    return (
        investment_in_biomass_energy_technology()
        * fraction_invested_in_biomass_energy_installation()
    )


@component.add(
    name="Investment in Biomass Energy Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_revenue_invested_in_biomass_technology": 1,
        "biomass_energy_revenue": 1,
    },
)
def investment_in_biomass_energy_technology():
    """
    Investments in development of biomass energy efficiency technology and production capability.
    """
    return (
        fraction_of_revenue_invested_in_biomass_technology() * biomass_energy_revenue()
    )


@component.add(
    name="Biomass Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_energy_production_rate": 1},
)
def biomass_energy_production():
    """
    Total biomass energy production per year.
    """
    return biomass_energy_production_rate()


@component.add(
    name="Table for FIBEI",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_fibei"},
)
def table_for_fibei(x, final_subs=None):
    """
    Table determining order by which technology investments are dedicated to energy and installation efficiency. For small Biomass Installation Efficiency, in order to secure sufficient production capacity, more investments are directed to infrastructure. Once the Biomass Installation Efficiency increases the investments are redirected to energy efficiency technologies.
    """
    return _hardcodedlookup_table_for_fibei(x, final_subs)


_hardcodedlookup_table_for_fibei = HardcodedLookups(
    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
    [0.8, 0.8, 0.7, 0.5, 0.2, 0.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_fibei",
)


@component.add(
    name="Biomass Energy Technology Ratio",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_biomass_energy_technology_ratio": 1},
    other_deps={
        "_integ_biomass_energy_technology_ratio": {
            "initial": {"init_betrn": 1},
            "step": {"increase_in_biomass_energy_technology_ratio": 1},
        }
    },
)
def biomass_energy_technology_ratio():
    """
    Biomass Energy Technology Ratio increased due to investments in biomass energy efficiency.
    """
    return _integ_biomass_energy_technology_ratio()


_integ_biomass_energy_technology_ratio = Integ(
    lambda: increase_in_biomass_energy_technology_ratio(),
    lambda: init_betrn(),
    "_integ_biomass_energy_technology_ratio",
)


@component.add(
    name="Biomass Infrastructure Adjustment",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_capacity_aging_rate": 1,
        "desired_biomass_installed_capacity": 1,
        "time_to_adjust_biomass_infrastructure": 1,
        "biomass_energy_installed_capacity": 1,
    },
)
def biomass_infrastructure_adjustment():
    """
    Adjustment of Biomass Infrastructure to the desired level over a specified adjustment time and accounting for constant infrastructure decrease due to aging process.
    """
    return (
        biomass_capacity_aging_rate()
        + (desired_biomass_installed_capacity() - biomass_energy_installed_capacity())
        / time_to_adjust_biomass_infrastructure()
    )


@component.add(
    name="Average Annual Production per Capacity",
    units="Mtoe/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def average_annual_production_per_capacity():
    """
    Average annual energy production per unit of biomass installed capacity.
    """
    return 0.116


@component.add(name="MAXBCF", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxbcf():
    """
    Maximal possible value of Biomass Capacity Factor.
    """
    return 1


@component.add(name="MAXBIE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxbie():
    """
    Maximal value of Biomass Installation Efficiency factor.
    """
    return 1


@component.add(
    name="INIT BIC", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_bic():
    """
    Initial installed capacity to transform biomass into energy.
    """
    return 40


@component.add(name="MINBCF", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minbcf():
    """
    Minimal and initial value of Biomass Capacity Factor.
    """
    return 0.4


@component.add(name="MINBIE", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minbie():
    """
    Minimal and initial value of Biomass Installation Efficiency factor.
    """
    return 0.5


@component.add(
    name="Biomass Investment Fraction Finish",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_time": 1, "ramp_investment_period": 1},
)
def biomass_investment_fraction_finish():
    """
    End of fractional investments in biomass energy technology.
    """
    return initial_time() + ramp_investment_period()


@component.add(
    name="Biomass Investment Fraction Start",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_time": 1},
)
def biomass_investment_fraction_start():
    """
    Start of investments in biomass energy technology.
    """
    return initial_time()


@component.add(
    name="INIT BETRN", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_betrn():
    """
    Initial Biomass Energy Technology Ratio.
    """
    return 0


@component.add(
    name="Biomass Capacity Aging Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biomass_capacity_aging_time():
    """
    Average biomass energy production capacity aging time.
    """
    return 20


@component.add(
    name="Biomass Capacity Aging Rate",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_energy_installed_capacity": 1,
        "biomass_capacity_aging_time": 1,
    },
)
def biomass_capacity_aging_rate():
    """
    Aging rate of biomass energy production capacities.
    """
    return biomass_energy_installed_capacity() / biomass_capacity_aging_time()


@component.add(
    name="Biomass Capacity Factor",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"minbcf": 2, "biomass_energy_technology_ratio": 2, "maxbcf": 1},
)
def biomass_capacity_factor():
    """
    Parameter indicating what fraction of Biomass Conversion Efficiency it is possible to realize with the current state of technical developments.
    """
    return minbcf() + (maxbcf() - minbcf()) * (
        biomass_energy_technology_ratio() / (biomass_energy_technology_ratio() + 1)
    )


@component.add(
    name="Efficiency of Biomass Installed Capacity",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_biomass_energy_production_from_infrastructure": 1,
        "biomass_energy_installed_capacity": 1,
    },
)
def efficiency_of_biomass_installed_capacity():
    """
    Total production efficiency of Biomass Installed Capacity.
    """
    return zidz(
        potential_biomass_energy_production_from_infrastructure(),
        biomass_energy_installed_capacity(),
    )


@component.add(
    name="Biomass Installation Technology Ratio",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_biomass_installation_technology_ratio": 1},
    other_deps={
        "_integ_biomass_installation_technology_ratio": {
            "initial": {"init_bitrn": 1},
            "step": {"increase_in_biomass_installation_technology_ratio": 1},
        }
    },
)
def biomass_installation_technology_ratio():
    """
    Biomass Installation Technology Ratio increased due to investments in biomass energy capacity efficiency.
    """
    return _integ_biomass_installation_technology_ratio()


_integ_biomass_installation_technology_ratio = Integ(
    lambda: increase_in_biomass_installation_technology_ratio(),
    lambda: init_bitrn(),
    "_integ_biomass_installation_technology_ratio",
)


@component.add(
    name="Biomass Energy Revenue",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_energy_production": 1, "biomass_energy_price": 1},
)
def biomass_energy_revenue():
    """
    Total revenue in biomass energy market.
    """
    return biomass_energy_production() * biomass_energy_price()


@component.add(
    name="Desired Biomass Installed Capacity",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_biomass_demand": 1,
        "efficiency_of_biomass_installed_capacity": 1,
    },
)
def desired_biomass_installed_capacity():
    """
    Desired Biomass Installed Capacity accounting for Total Biomass Demand and Efficiency of Biomass Installed Capacity.
    """
    return total_biomass_demand() / efficiency_of_biomass_installed_capacity()


@component.add(
    name="Fraction Invested in Biomass Energy Installation",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_installation_efficiency": 1, "table_for_fibei": 1},
)
def fraction_invested_in_biomass_energy_installation():
    """
    Fraction of investments in biomass energy technology dedicated to capacity.
    """
    return table_for_fibei(biomass_installation_efficiency())


@component.add(
    name="Biomass Investment Fraction Slope",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_final_investment": 1,
        "biomass_initial_investment": 1,
        "ramp_investment_period": 1,
    },
)
def biomass_investment_fraction_slope():
    """
    Intensity of increase in investments in biomass energy technology.
    """
    return (
        float(np.abs(biomass_final_investment() - biomass_initial_investment()))
        / ramp_investment_period()
    )


@component.add(
    name="Biomass Initial Investment",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def biomass_initial_investment():
    """
    Initial level of fractional investments in biomass energy technology.
    """
    return 0


@component.add(
    name="Biomass Installation Efficiency",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"minbie": 2, "biomass_installation_technology_ratio": 2, "maxbie": 1},
)
def biomass_installation_efficiency():
    """
    Parameter indicating biomass energy capacity installation efficiency at the current state of technical developments.
    """
    return minbie() + (maxbie() - minbie()) * (
        biomass_installation_technology_ratio()
        / (biomass_installation_technology_ratio() + 1)
    )


@component.add(
    name="Indicated Biomass Energy Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"cost_of_biomass_energy": 1, "desired_biomass_energy_gross_margin": 1},
)
def indicated_biomass_energy_price():
    """
    Indicated biomass energy price accounting for unit cost and gross margin.
    """
    return cost_of_biomass_energy() * (1 + desired_biomass_energy_gross_margin())


@component.add(
    name="Cumulative Biomass Energy Produced",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_biomass_energy_produced": 1},
    other_deps={
        "_integ_cumulative_biomass_energy_produced": {
            "initial": {"init_cumulative_biomass_produced": 1},
            "step": {"biomass_energy_production": 1},
        }
    },
)
def cumulative_biomass_energy_produced():
    """
    Cumulative biomass energy that has been produced.
    """
    return _integ_cumulative_biomass_energy_produced()


_integ_cumulative_biomass_energy_produced = Integ(
    lambda: biomass_energy_production(),
    lambda: init_cumulative_biomass_produced(),
    "_integ_cumulative_biomass_energy_produced",
)


@component.add(
    name="Desired Biomass Energy Gross Margin",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def desired_biomass_energy_gross_margin():
    """
    Desired Gross Margin per unit of biomass energy.
    """
    return 0.2


@component.add(
    name="Fraction of Revenue Invested in Biomass Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_investment_fraction_slope": 1,
        "biomass_investment_fraction_start": 1,
        "biomass_investment_fraction_finish": 1,
        "time": 1,
    },
)
def fraction_of_revenue_invested_in_biomass_technology():
    """
    Parameter to take into account historical increase of the biomass energy significance and over time greater resources dedicated to the technology development.
    """
    return ramp(
        __data["time"],
        biomass_investment_fraction_slope(),
        biomass_investment_fraction_start(),
        biomass_investment_fraction_finish(),
    )


@component.add(
    name="Biomass Energy Installed Capacity",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_biomass_energy_installed_capacity": 1},
    other_deps={
        "_integ_biomass_energy_installed_capacity": {
            "initial": {"init_bic": 1},
            "step": {
                "installation_of_biomass_capacity_rate": 1,
                "biomass_capacity_aging_rate": 1,
            },
        }
    },
)
def biomass_energy_installed_capacity():
    """
    Installed capacity to transform biomass into energy.
    """
    return _integ_biomass_energy_installed_capacity()


_integ_biomass_energy_installed_capacity = Integ(
    lambda: installation_of_biomass_capacity_rate() - biomass_capacity_aging_rate(),
    lambda: init_bic(),
    "_integ_biomass_energy_installed_capacity",
)


@component.add(
    name="Sensitivity of Biomass Energy Price to Supply and Demand",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def sensitivity_of_biomass_energy_price_to_supply_and_demand():
    """
    Sensitivity of Biomass Energy Price to Supply and Demand ratio.
    """
    return 0


@component.add(
    name="INIT BITRN", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_bitrn():
    """
    Initial Biomass Installation Technology Ratio.
    """
    return 0


@component.add(
    name="Investment in Biomass Energy Efficiency",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_biomass_energy_technology": 1,
        "fraction_invested_in_biomass_energy_installation": 1,
    },
)
def investment_in_biomass_energy_efficiency():
    """
    Total investments in biomass energy efficiency technology.
    """
    return investment_in_biomass_energy_technology() * (
        1 - fraction_invested_in_biomass_energy_installation()
    )


@component.add(
    name="Biomass Production to Installation Ratio",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_energy_production": 1, "biomass_energy_installed_capacity": 1},
)
def biomass_production_to_installation_ratio():
    """
    Ratio of biomass energy production to available production capacity.
    """
    return biomass_energy_production() / biomass_energy_installed_capacity()


@component.add(
    name="N2O Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "n2o_radiative_forcing_history": 1,
        "n2o_radiative_forcing_rcp60": 1,
        "n2o_radiative_forcing_rcp85": 1,
        "n2o_radiative_forcing_rcp19": 1,
        "n2o_radiative_forcing_rcp26": 1,
        "n2o_radiative_forcing_rcp45": 1,
        "n2o_radiative_forcing_rcp34": 1,
        "rcp_scenario": 5,
    },
)
def n2o_radiative_forcing():
    """
    Radiative forcing from N2O in the atmosphere.
    """
    return if_then_else(
        time() <= 2010,
        lambda: n2o_radiative_forcing_history(),
        lambda: if_then_else(
            rcp_scenario() == 0,
            lambda: n2o_radiative_forcing_rcp19(),
            lambda: if_then_else(
                rcp_scenario() == 1,
                lambda: n2o_radiative_forcing_rcp26(),
                lambda: if_then_else(
                    rcp_scenario() == 2,
                    lambda: n2o_radiative_forcing_rcp34(),
                    lambda: if_then_else(
                        rcp_scenario() == 3,
                        lambda: n2o_radiative_forcing_rcp45(),
                        lambda: if_then_else(
                            rcp_scenario() == 4,
                            lambda: n2o_radiative_forcing_rcp60(),
                            lambda: n2o_radiative_forcing_rcp85(),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Other Forcings",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ch4_radiative_forcing": 1,
        "n2o_radiative_forcing": 1,
        "f_gases_radiative_forcing": 1,
        "other_anthropogenic_radiative_forcing": 1,
    },
)
def other_forcings():
    """
    Radiative forcing from factors other than CO2 in the atmosphere.
    """
    return (
        ch4_radiative_forcing()
        + n2o_radiative_forcing()
        + f_gases_radiative_forcing()
        + other_anthropogenic_radiative_forcing()
    )


@component.add(
    name="HFC Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "hfc_radiative_forcing_history": 1,
        "hfc_radiative_forcing_minicam_rcp45": 1,
        "hfc_radiative_forcing_message_rcp85": 1,
        "hfc_radiative_forcing_aim_rcp7": 1,
        "hfc_radiative_forcing_aim_rcp60": 1,
        "hfc_radiative_forcing_image_rcp26": 1,
        "rcp_scenario": 4,
    },
)
def hfc_radiative_forcing():
    """
    Radiative forcing from HFC in the atmosphere.
    """
    return if_then_else(
        time() < 2005,
        lambda: hfc_radiative_forcing_history(),
        lambda: if_then_else(
            rcp_scenario() == 1,
            lambda: hfc_radiative_forcing_image_rcp26(),
            lambda: if_then_else(
                rcp_scenario() == 2,
                lambda: hfc_radiative_forcing_minicam_rcp45(),
                lambda: if_then_else(
                    rcp_scenario() == 3,
                    lambda: hfc_radiative_forcing_aim_rcp60(),
                    lambda: if_then_else(
                        rcp_scenario() == 4,
                        lambda: hfc_radiative_forcing_message_rcp85(),
                        lambda: hfc_radiative_forcing_aim_rcp7(),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="CH4 Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "ch4_radiative_forcing_history": 1,
        "ch4_radiative_forcing_rcp60": 1,
        "rcp_scenario": 5,
        "ch4_radiative_forcing_rcp26": 1,
        "ch4_radiative_forcing_rcp34": 1,
        "ch4_radiative_forcing_rcp45": 1,
        "ch4_radiative_forcing_rcp19": 1,
        "ch4_radiative_forcing_rcp85": 1,
    },
)
def ch4_radiative_forcing():
    """
    Radiative forcing from CH4 in the atmosphere.
    """
    return if_then_else(
        time() <= 2010,
        lambda: ch4_radiative_forcing_history(),
        lambda: if_then_else(
            rcp_scenario() == 0,
            lambda: ch4_radiative_forcing_rcp19(),
            lambda: if_then_else(
                rcp_scenario() == 1,
                lambda: ch4_radiative_forcing_rcp26(),
                lambda: if_then_else(
                    rcp_scenario() == 2,
                    lambda: ch4_radiative_forcing_rcp34(),
                    lambda: if_then_else(
                        rcp_scenario() == 3,
                        lambda: ch4_radiative_forcing_rcp45(),
                        lambda: if_then_else(
                            rcp_scenario() == 4,
                            lambda: ch4_radiative_forcing_rcp60(),
                            lambda: ch4_radiative_forcing_rcp85(),
                        ),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Other Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "other_radiative_forcing_history": 1,
        "other_radiative_forcing_message_rcp85": 1,
        "other_radiative_forcing_aim_rcp60": 1,
        "other_radiative_forcing_minicam_rcp45": 1,
        "other_radiative_forcing_aim_rcp7": 1,
        "rcp_scenario": 4,
        "other_radiative_forcing_image_rcp26": 1,
    },
)
def other_radiative_forcing():
    """
    Radiative forcing from other factors than CO2, CH4, N2O and HFC in the atmosphere.
    """
    return if_then_else(
        time() < 2000,
        lambda: other_radiative_forcing_history(),
        lambda: if_then_else(
            rcp_scenario() == 1,
            lambda: other_radiative_forcing_image_rcp26(),
            lambda: if_then_else(
                rcp_scenario() == 2,
                lambda: other_radiative_forcing_minicam_rcp45(),
                lambda: if_then_else(
                    rcp_scenario() == 3,
                    lambda: other_radiative_forcing_aim_rcp60(),
                    lambda: if_then_else(
                        rcp_scenario() == 4,
                        lambda: other_radiative_forcing_message_rcp85(),
                        lambda: other_radiative_forcing_aim_rcp7(),
                    ),
                ),
            ),
        ),
    )


@component.add(
    name="Temperature Change from Preindustrial",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_in_atmosphere_and_upper_ocean": 1,
        "atmospheric_and_upper_ocean_heat_capacity": 1,
    },
)
def temperature_change_from_preindustrial():
    """
    Temperature of the Atmosphere and Upper Ocean and how it has changed from preindustrial period.
    """
    return (
        heat_in_atmosphere_and_upper_ocean()
        / atmospheric_and_upper_ocean_heat_capacity()
    )


@component.add(
    name="R",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"c_in_atmosphere": 1, "preindustrial_c_in_atmosphere": 1},
)
def r():
    """
    Ratio of the current carbon in atmosphere to its preindustrial content.
    """
    return c_in_atmosphere() / preindustrial_c_in_atmosphere()


@component.add(
    name='"2xCO2 Forcing"',
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_radiative_forcing_coefficient": 1},
)
def nvs_2xco2_forcing():
    """
    Radiative forcing at 2x CO2 equivalent.
    """
    return co2_radiative_forcing_coefficient() * float(np.log(2))


@component.add(
    name="INIT Deep Ocean 1 Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_deep_ocean_1_temperature():
    """
    Initial value of temperature in the first layer of deep ocean.
    """
    return 0


@component.add(
    name="INIT Deep Ocean 2 Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_deep_ocean_2_temperature():
    """
    Initial value of temperature in the second layer of deep ocean.
    """
    return 0


@component.add(
    name="INIT Deep Ocean 3 Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_deep_ocean_3_temperature():
    """
    Initial value of temperature in the third layer of deep ocean.
    """
    return 0


@component.add(
    name="INIT Deep Ocean 4 Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_deep_ocean_4_temperature():
    """
    Initial value of temperature in the fourth layer of deep ocean.
    """
    return 0


@component.add(
    name="CH4 Radiative Forcing RCP45",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_ch4_radiative_forcing_ssp2_rcp45": 1,
    },
)
def ch4_radiative_forcing_rcp45():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 4.5).
    """
    return table_ch4_radiative_forcing_ssp2_rcp45(time() * dimensionless_time())


@component.add(
    name="TABLE Other Radiative Forcing MESSAGE RCP85",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_radiative_forcing_message_rcp85"
    },
)
def table_other_radiative_forcing_message_rcp85(x, final_subs=None):
    """
    Data series for future projections of other factors radiative forcing by MESSAGE (RCP 8.5).
    """
    return _hardcodedlookup_table_other_radiative_forcing_message_rcp85(x, final_subs)


_hardcodedlookup_table_other_radiative_forcing_message_rcp85 = HardcodedLookups(
    [
        2000.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [
        -0.781,
        -0.696,
        -0.648,
        -0.573,
        -0.452,
        -0.341,
        -0.274,
        -0.226,
        -0.189,
        -0.121,
        -0.088,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_radiative_forcing_message_rcp85",
)


@component.add(
    name="Lower Layer Volume Vu 4",
    units="Meter*Meter*Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area": 1, "land_area_fraction": 1, "layer_depth_4": 1},
)
def lower_layer_volume_vu_4():
    """
    Water equivalent volume of the fourth layer of deep ocean.
    """
    return area() * (1 - land_area_fraction()) * layer_depth_4()


@component.add(
    name="Mass Heat Capacity",
    units="J/kg/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mass_heat_capacity():
    """
    Specific heat of water, i.e., amount of heat in Joules per kg water required to raise the temperature by one C degree.
    """
    return 4186


@component.add(
    name="Total Radiative Forcing MiniCAM RCP45",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def total_radiative_forcing_minicam_rcp45():
    """
    Future projections of total radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MiniCAM (RCP 4.5).
    """
    return 0


@component.add(
    name="RCP Scenario",
    units="Dmnl",
    limits=(1.0, 4.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def rcp_scenario():
    """
    Trigger for Representative Concentration Pathways scenarios. RCP Scenario=0, RCP1.9 RCP Scenario=1,RCP2.6, RCP Scenario=2,RCP3.4, RCP Scenario=3, RCP 4.5, RCP Scenario=4, RCP 6, RCP Scenario=5, RCP 8.5
    """
    return 3


@component.add(
    name="Deep Ocean 2 Heat Capacity",
    units="Year*W/(Meter*Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lower_layer_volume_vu_2": 1, "volumetric_heat_capacity": 1, "area": 1},
)
def deep_ocean_2_heat_capacity():
    """
    Volumetric heat capacity for the second layer of the deep ocean.
    """
    return lower_layer_volume_vu_2() * volumetric_heat_capacity() / area()


@component.add(
    name="Deep Ocean 3 Heat Capacity",
    units="Year*W/(Meter*Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lower_layer_volume_vu_3": 1, "volumetric_heat_capacity": 1, "area": 1},
)
def deep_ocean_3_heat_capacity():
    """
    Volumetric heat capacity for the third layer of the deep ocean.
    """
    return lower_layer_volume_vu_3() * volumetric_heat_capacity() / area()


@component.add(
    name="Deep Ocean 4 Heat Capacity",
    units="Year*W/(Meter*Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lower_layer_volume_vu_4": 1, "volumetric_heat_capacity": 1, "area": 1},
)
def deep_ocean_4_heat_capacity():
    """
    Volumetric heat capacity for the fourth layer of the deep ocean.
    """
    return lower_layer_volume_vu_4() * volumetric_heat_capacity() / area()


@component.add(
    name="Equilibrium Temperature",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_radiative_forcing": 1, "climate_feedback_parameter": 1},
)
def equilibrium_temperature():
    """
    Ratio of Radiative Forcing to the Climate Feedback Parameter
    """
    return co2_radiative_forcing() / (climate_feedback_parameter() * float(np.log(2)))


@component.add(
    name="sec per Year", units="sec/Year", comp_type="Constant", comp_subtype="Normal"
)
def sec_per_year():
    """
    Conversion from year to sec.
    """
    return 31536000.0


@component.add(
    name="Relative Deep 3 Ocean Temperature",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"heat_in_deep_ocean_3": 1, "deep_ocean_3_heat_capacity": 1},
)
def relative_deep_3_ocean_temperature():
    """
    Temperature of the third layer of the deep ocean.
    """
    return heat_in_deep_ocean_3() / deep_ocean_3_heat_capacity()


@component.add(
    name="Relative Deep 4 Ocean Temperature",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"heat_in_deep_ocean_4": 1, "deep_ocean_4_heat_capacity": 1},
)
def relative_deep_4_ocean_temperature():
    """
    Temperature of the fourth layer of the deep ocean.
    """
    return heat_in_deep_ocean_4() / deep_ocean_4_heat_capacity()


@component.add(
    name="Heat Transfer Coefficient 3",
    units="W/(Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_transfer_rate": 1,
        "mean_depth_of_adjacent_2_3_layers": 1,
        "eddy_diff_coeff_mean_2_3": 1,
        "heat_diffusion_covar": 2,
        "eddy_diff_coeff_2_3": 1,
    },
)
def heat_transfer_coefficient_3():
    """
    The ratio of the actual to the mean of the heat transfer coefficient, which controls the movement of heat through the climate sector.
    """
    return (heat_transfer_rate() * mean_depth_of_adjacent_2_3_layers()) * (
        heat_diffusion_covar() * (eddy_diff_coeff_2_3() / eddy_diff_coeff_mean_2_3())
        + (1 - heat_diffusion_covar())
    )


@component.add(
    name="Heat Transfer Coefficient 4",
    units="W/(Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_transfer_rate": 1,
        "mean_depth_of_adjacent_3_4_layers": 1,
        "eddy_diff_coeff_mean_3_4": 1,
        "heat_diffusion_covar": 2,
        "eddy_diff_coeff_3_4": 1,
    },
)
def heat_transfer_coefficient_4():
    """
    The ratio of the actual to the mean of the heat transfer coefficient, which controls the movement of heat through the climate sector.
    """
    return (heat_transfer_rate() * mean_depth_of_adjacent_3_4_layers()) * (
        heat_diffusion_covar() * (eddy_diff_coeff_3_4() / eddy_diff_coeff_mean_3_4())
        + (1 - heat_diffusion_covar())
    )


@component.add(
    name="Climate Sensitivity to 2xCO2",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def climate_sensitivity_to_2xco2():
    """
    Equilibrium temperature change in response to a 2xCO2 equivalent change in radiative forcing. Deterministic = 3, Low=2, High =4.5.
    """
    return 3


@component.add(
    name="CO2 Radiative Forcing Coefficient",
    units="W/(m*m)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def co2_radiative_forcing_coefficient():
    """
    Coefficient to calculate forcing due to atmospheric gas using first-order approximation expression for carbon dioxide.
    """
    return 5.35


@component.add(
    name="CO2 Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "co2_radiative_forcing_coefficient": 1,
        "preindustrial_c_in_atmosphere": 1,
        "c_in_atmosphere": 1,
    },
)
def co2_radiative_forcing():
    """
    Radiative forcing from CO2 in the atmosphere. Source of Historical Data: IIASA RCP Database https://tntcat.iiasa.ac.at:8743/RcpDb/dsd?Action=htmlpage&page=welcome
    """
    return co2_radiative_forcing_coefficient() * float(
        np.log(c_in_atmosphere() / preindustrial_c_in_atmosphere())
    )


@component.add(
    name="CO2 Radiative Forcing AIM RCP60",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def co2_radiative_forcing_aim_rcp60():
    """
    Future projections of CO2 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by AIM (RCP 6.0).
    """
    return 0


@component.add(
    name="CO2 Radiative Forcing IMAGE RCP26",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def co2_radiative_forcing_image_rcp26():
    """
    Future projections of CO2 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by IMAGE (RCP 2.6).
    """
    return 0


@component.add(
    name="CO2 Radiative Forcing MESSAGE RCP85",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def co2_radiative_forcing_message_rcp85():
    """
    Future projections of CO2 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return 0


@component.add(
    name="CO2 Radiative Forcing MiniCAM RCP45",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def co2_radiative_forcing_minicam_rcp45():
    """
    Future projections of CO2 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MiniCAM (RCP 4.5).
    """
    return 0


@component.add(
    name="J per W Year",
    units="Je22/Watt/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def j_per_w_year():
    """
    Convertion from watts*year to Joules*1e22.
    """
    return 365 * 24 * 60 * 60 / 1e22


@component.add(
    name="Land Area Fraction", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def land_area_fraction():
    """
    Fraction of global surface area that is land.
    """
    return 0.292


@component.add(
    name="Heat to 700m J",
    units="Je22",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_to_700m": 1,
        "j_per_w_year": 1,
        "land_area_fraction": 1,
        "area": 1,
        "offset_700m_heat": 1,
    },
)
def heat_to_700m_j():
    """
    Heat to 700 m in Joules*1e22 for the area covered by water. Source of Historical Data: NOAA – Ocean heat content anomalies; http://www.nodc.noaa.gov/OC5/3M_HEAT_CONTENT/ Levitus S., J. I. Antonov, T. P. Boyer, R. A. Locarnini, H. E. Garcia, and A. V. Mishonov, 2009. Global ocean heat content 1955-2008 in light of recently revealed instrumentation problems GRL, 36, L07608, doi:10.1029/2008GL037155.
    """
    return (
        heat_to_700m() * j_per_w_year() * (area() * (1 - land_area_fraction()))
        + offset_700m_heat()
    )


@component.add(
    name="Land Thickness", units="Meter", comp_type="Constant", comp_subtype="Normal"
)
def land_thickness():
    """
    Effective land area heat capacity, expressed as equivalent water layer thickness.
    """
    return 8.4


@component.add(
    name="Relative Deep 1 Ocean Temperature",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"heat_in_deep_ocean_1": 1, "deep_ocean_1_heat_capacity": 1},
)
def relative_deep_1_ocean_temperature():
    """
    Temperature of the first layer of the deep ocean.
    """
    return heat_in_deep_ocean_1() / deep_ocean_1_heat_capacity()


@component.add(
    name="Relative Deep 2 Ocean Temperature",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"heat_in_deep_ocean_2": 1, "deep_ocean_2_heat_capacity": 1},
)
def relative_deep_2_ocean_temperature():
    """
    Temperature of the second layer of the deep ocean.
    """
    return heat_in_deep_ocean_2() / deep_ocean_2_heat_capacity()


@component.add(
    name="TABLE N2O Radiative Forcing SSP2 RCP60",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp60"
    },
)
def table_n2o_radiative_forcing_ssp2_rcp60(x, final_subs=None):
    """
    Data series for future projections of N2O radiative forcing by MESSAGE-GLOBIOM (SSP2 RCP 6.0).
    """
    return _hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp60(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp60 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.167804,
        0.191189,
        0.214542,
        0.237486,
        0.258855,
        0.278363,
        0.296147,
        0.311316,
        0.324115,
        0.335382,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp60",
)


@component.add(
    name="CH4 Radiative Forcing RCP60",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_ch4_radiative_forcing_ssp2_rcp60": 1,
    },
)
def ch4_radiative_forcing_rcp60():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 6.0).
    """
    return table_ch4_radiative_forcing_ssp2_rcp60(time() * dimensionless_time())


@component.add(
    name="CH4 Radiative Forcing History",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "dimensionless_time": 1, "table_ch4_radiative_forcing": 1},
)
def ch4_radiative_forcing_history():
    """
    Historical data for radiative forcing from CH4 in the atmosphere.
    """
    return table_ch4_radiative_forcing(time() * dimensionless_time())


@component.add(
    name="Area", units="Meter*Meter", comp_type="Constant", comp_subtype="Normal"
)
def area():
    """
    Global surface area.
    """
    return 510000000000000.0


@component.add(
    name="Atmospheric and Upper Ocean Heat Capacity",
    units="Year*W/(Meter*Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"upper_layer_volume_vu": 1, "volumetric_heat_capacity": 1, "area": 1},
)
def atmospheric_and_upper_ocean_heat_capacity():
    """
    Volumetric heat capacity for the land, atmosphere, and, upper ocean layer.
    """
    return upper_layer_volume_vu() * volumetric_heat_capacity() / area()


@component.add(
    name="Lower Layer Volume Vu 2",
    units="Meter*Meter*Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area": 1, "land_area_fraction": 1, "layer_depth_2": 1},
)
def lower_layer_volume_vu_2():
    """
    Water equivalent volume of the second layer of deep ocean.
    """
    return area() * (1 - land_area_fraction()) * layer_depth_2()


@component.add(
    name="Lower Layer Volume Vu 3",
    units="Meter*Meter*Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area": 1, "land_area_fraction": 1, "layer_depth_3": 1},
)
def lower_layer_volume_vu_3():
    """
    Water equivalent volume of the third layer of deep ocean.
    """
    return area() * (1 - land_area_fraction()) * layer_depth_3()


@component.add(
    name="HFC Radiative Forcing MESSAGE RCP85",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_hfc_radiative_forcing_message_rcp85": 1,
    },
)
def hfc_radiative_forcing_message_rcp85():
    """
    Future projections of CO2 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_hfc_radiative_forcing_message_rcp85(time() * dimensionless_time())


@component.add(
    name="HFC Radiative Forcing MiniCAM RCP45",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_hfc_radiative_forcing_minicam_rcp45": 1,
    },
)
def hfc_radiative_forcing_minicam_rcp45():
    """
    Future projections of HFC radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MiniCAM (RCP 4.5).
    """
    return table_hfc_radiative_forcing_minicam_rcp45(time() * dimensionless_time())


@component.add(
    name="Total Radiative Forcing MESSAGE RCP85",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def total_radiative_forcing_message_rcp85():
    """
    Future projections of total radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return 0


@component.add(
    name="Deep Ocean 1 Heat Capacity",
    units="Year*W/(Meter*Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"lower_layer_volume_vu_1": 1, "volumetric_heat_capacity": 1, "area": 1},
)
def deep_ocean_1_heat_capacity():
    """
    Volumetric heat capacity for the first layer of the deep ocean.
    """
    return lower_layer_volume_vu_1() * volumetric_heat_capacity() / area()


@component.add(
    name="Offset 700m Heat", units="Je22", comp_type="Constant", comp_subtype="Normal"
)
def offset_700m_heat():
    """
    Calibration offset.
    """
    return -16


@component.add(
    name="TABLE HFC Radiative Forcing IMAGE RCP26",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_hfc_radiative_forcing_image_rcp26"
    },
)
def table_hfc_radiative_forcing_image_rcp26(x, final_subs=None):
    """
    Data series for future projections of HFC radiative forcing by IMAGE (RCP 2.6).
    """
    return _hardcodedlookup_table_hfc_radiative_forcing_image_rcp26(x, final_subs)


_hardcodedlookup_table_hfc_radiative_forcing_image_rcp26 = HardcodedLookups(
    [
        2005.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [0.34, 0.344, 0.346, 0.329, 0.301, 0.273, 0.253, 0.243, 0.236, 0.229, 0.22],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_hfc_radiative_forcing_image_rcp26",
)


@component.add(
    name="Upper Layer Volume Vu",
    units="Meter*Meter*Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "area": 1,
        "mixed_layer_depth": 1,
        "land_thickness": 1,
        "land_area_fraction": 2,
    },
)
def upper_layer_volume_vu():
    """
    Water equivalent volume of the upper box, which is a weighted combination of land, atmosphere,and upper ocean volumes.
    """
    return area() * (
        land_area_fraction() * land_thickness()
        + (1 - land_area_fraction()) * mixed_layer_depth()
    )


@component.add(
    name="TABLE N2O Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing"},
)
def table_n2o_radiative_forcing(x, final_subs=None):
    """
    Data series for historical data of N2O radiative forcing.
    """
    return _hardcodedlookup_table_n2o_radiative_forcing(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing = HardcodedLookups(
    [
        1900.0,
        1910.0,
        1920.0,
        1930.0,
        1940.0,
        1950.0,
        1960.0,
        1970.0,
        1980.0,
        1990.0,
        2000.0,
        2005.0,
        2010.0,
    ],
    [
        0.025,
        0.029,
        0.036,
        0.043,
        0.048,
        0.056,
        0.064,
        0.077,
        0.098,
        0.124,
        0.145,
        0.155711,
        0.167804,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing",
)


@component.add(
    name="N2O Radiative Forcing RCP85",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_n2o_radiative_forcing_ssp2_rcp85": 1,
    },
)
def n2o_radiative_forcing_rcp85():
    """
    Future projections of N2O radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_n2o_radiative_forcing_ssp2_rcp85(time() * dimensionless_time())


@component.add(
    name="N2O Radiative Forcing RCP45",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_n2o_radiative_forcing_ssp2_rcp45": 1,
    },
)
def n2o_radiative_forcing_rcp45():
    """
    Future projections of N2O radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 4.5).
    """
    return table_n2o_radiative_forcing_ssp2_rcp45(time() * dimensionless_time())


@component.add(
    name="Heat Transfer Coefficient 2",
    units="W/(Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_transfer_rate": 1,
        "mean_depth_of_adjacent_1_2_layers": 1,
        "eddy_diff_coeff_1_2": 1,
        "heat_diffusion_covar": 2,
        "eddy_diff_coeff_mean_1_2": 1,
    },
)
def heat_transfer_coefficient_2():
    """
    The ratio of the actual to the mean of the heat transfer coefficient, which controls the movement of heat through the climate sector.
    """
    return (heat_transfer_rate() * mean_depth_of_adjacent_1_2_layers()) * (
        heat_diffusion_covar() * (eddy_diff_coeff_1_2() / eddy_diff_coeff_mean_1_2())
        + (1 - heat_diffusion_covar())
    )


@component.add(
    name="TABLE N2O Radiative Forcing SSP2 RCP85",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp85"
    },
)
def table_n2o_radiative_forcing_ssp2_rcp85(x, final_subs=None):
    """
    Data series for future projections of N2O radiative forcing by MESSAGE-GLOBIOM (SSP2 RCP 8.5).
    """
    return _hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp85(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp85 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.167804,
        0.191292,
        0.215286,
        0.239765,
        0.263741,
        0.286982,
        0.30948,
        0.331141,
        0.352599,
        0.374267,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp85",
)


@component.add(
    name="CH4 Radiative Forcing RCP26",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_ch4_radiative_forcing_ssp2_rcp26": 1,
    },
)
def ch4_radiative_forcing_rcp26():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 2.6).
    """
    return table_ch4_radiative_forcing_ssp2_rcp26(time() * dimensionless_time())


@component.add(
    name="Heat Diffusion Covar",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def heat_diffusion_covar():
    """
    Heat transfer coefficient parameter.
    """
    return 1


@component.add(
    name="Density", units="kg/(m*m*m)", comp_type="Constant", comp_subtype="Normal"
)
def density():
    """
    Density of water, i.e., mass per volume of water.
    """
    return 1000


@component.add(
    name="TABLE CH4 Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing"},
)
def table_ch4_radiative_forcing(x, final_subs=None):
    """
    Data series for historical data of CH4 radiative forcing. Pre-2000 From AR5, 2005 AND 2010 from the SSP database, SSP2 Message-GLOBIOM (marker).
    """
    return _hardcodedlookup_table_ch4_radiative_forcing(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing = HardcodedLookups(
    [
        1900.0,
        1910.0,
        1920.0,
        1930.0,
        1940.0,
        1950.0,
        1960.0,
        1970.0,
        1980.0,
        1990.0,
        2000.0,
        2005.0,
        2010.0,
    ],
    [
        0.097,
        0.121,
        0.15,
        0.179,
        0.205,
        0.233,
        0.28,
        0.342,
        0.409,
        0.465,
        0.485,
        0.562305,
        0.588276,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing",
)


@component.add(
    name="TABLE CH4 Radiative Forcing SSP2 RCP60",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp60"
    },
)
def table_ch4_radiative_forcing_ssp2_rcp60(x, final_subs=None):
    """
    Data series for future projections of CH4 radiative forcing by MESSAGE-GLOBIOM (RCP 6.0).
    """
    return _hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp60(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp60 = HardcodedLookups(
    [2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.621315,
        0.636997,
        0.6457,
        0.637477,
        0.614447,
        0.590103,
        0.56345,
        0.535615,
        0.507884,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp60",
)


@component.add(
    name="TABLE CH4 Radiative Forcing SSP2 RCP26",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp26"
    },
)
def table_ch4_radiative_forcing_ssp2_rcp26(x, final_subs=None):
    """
    Data series for future projections of CH4 radiative forcing by Message-GLOBIOM (SSP2 marker model) in RCP 2.6.
    """
    return _hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp26(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp26 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.588276,
        0.617437,
        0.60655,
        0.559263,
        0.496306,
        0.449361,
        0.420164,
        0.395895,
        0.366439,
        0.33553,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp26",
)


@component.add(
    name="Feedback Cooling",
    units="Watt/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "temperature_change_from_preindustrial": 1,
        "climate_feedback_parameter": 1,
    },
)
def feedback_cooling():
    """
    Feedback cooling of atmosphere/upper ocean system due to blackbody radiation.
    """
    return temperature_change_from_preindustrial() * climate_feedback_parameter()


@component.add(
    name="TABLE CH4 Radiative Forcing SSP2 RCP45",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp45"
    },
)
def table_ch4_radiative_forcing_ssp2_rcp45(x, final_subs=None):
    """
    Data series for future projections of CH4 radiative forcing by MESSAGE-GLOBIOM in SSP2 RCP 4.5.
    """
    return _hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp45(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp45 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.588276,
        0.619873,
        0.627489,
        0.614632,
        0.578009,
        0.532435,
        0.499299,
        0.477175,
        0.46059,
        0.449891,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp45",
)


@component.add(
    name="TABLE HFC Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_hfc_radiative_forcing"},
)
def table_hfc_radiative_forcing(x, final_subs=None):
    """
    Data series for historical data of HFC radiative forcing.
    """
    return _hardcodedlookup_table_hfc_radiative_forcing(x, final_subs)


_hardcodedlookup_table_hfc_radiative_forcing = HardcodedLookups(
    [
        1900.0,
        1910.0,
        1920.0,
        1930.0,
        1940.0,
        1950.0,
        1960.0,
        1970.0,
        1980.0,
        1990.0,
        2000.0,
        2005.0,
    ],
    [0.001, 0.001, 0.001, 0.002, 0.003, 0.008, 0.022, 0.069, 0.174, 0.288, 0.332, 0.34],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_hfc_radiative_forcing",
)


@component.add(
    name="TABLE HFC Radiative Forcing AIM RCP60",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_hfc_radiative_forcing_aim_rcp60"},
)
def table_hfc_radiative_forcing_aim_rcp60(x, final_subs=None):
    """
    Data series for future projections of HFC radiative forcing by AIM (RCP 6.0).
    """
    return _hardcodedlookup_table_hfc_radiative_forcing_aim_rcp60(x, final_subs)


_hardcodedlookup_table_hfc_radiative_forcing_aim_rcp60 = HardcodedLookups(
    [
        2005.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [0.34, 0.344, 0.346, 0.339, 0.316, 0.272, 0.236, 0.211, 0.194, 0.18, 0.168],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_hfc_radiative_forcing_aim_rcp60",
)


@component.add(
    name="Dimensionless Time",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def dimensionless_time():
    """
    Parameter to make table data dimensionless.
    """
    return 1


@component.add(
    name="TABLE HFC Radiative Forcing MESSAGE RCP85",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_hfc_radiative_forcing_message_rcp85"
    },
)
def table_hfc_radiative_forcing_message_rcp85(x, final_subs=None):
    """
    Data series for future projections of HFC radiative forcing by MESSAGE (RCP 8.5).
    """
    return _hardcodedlookup_table_hfc_radiative_forcing_message_rcp85(x, final_subs)


_hardcodedlookup_table_hfc_radiative_forcing_message_rcp85 = HardcodedLookups(
    [
        2005.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [0.34, 0.345, 0.36, 0.371, 0.366, 0.339, 0.316, 0.303, 0.297, 0.294, 0.294],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_hfc_radiative_forcing_message_rcp85",
)


@component.add(
    name="TABLE HFC Radiative Forcing MiniCAM RCP45",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_hfc_radiative_forcing_minicam_rcp45"
    },
)
def table_hfc_radiative_forcing_minicam_rcp45(x, final_subs=None):
    """
    Data series for future projections of HFC radiative forcing by MiniCAM (RCP 4.5).
    """
    return _hardcodedlookup_table_hfc_radiative_forcing_minicam_rcp45(x, final_subs)


_hardcodedlookup_table_hfc_radiative_forcing_minicam_rcp45 = HardcodedLookups(
    [
        2005.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [0.34, 0.344, 0.348, 0.344, 0.323, 0.279, 0.242, 0.215, 0.197, 0.188, 0.183],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_hfc_radiative_forcing_minicam_rcp45",
)


@component.add(
    name="N2O Radiative Forcing RCP26",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_n2o_radiative_forcing_ssp2_rcp26": 1,
    },
)
def n2o_radiative_forcing_rcp26():
    """
    Future projections of N2O radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 2.6).
    """
    return table_n2o_radiative_forcing_ssp2_rcp26(time() * dimensionless_time())


@component.add(
    name="Watt per J s", units="W/(J/sec)", comp_type="Constant", comp_subtype="Normal"
)
def watt_per_j_s():
    """
    Conversion from J/s to watts.
    """
    return 1


@component.add(
    name="Heat Transfer Coefficient 1",
    units="W/(Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_transfer_rate": 1,
        "mean_depth_of_adjacent_m_1_layers": 1,
        "eddy_diff_coeff_m_1": 1,
        "heat_diffusion_covar": 2,
        "eddy_diff_coeff_mean_m_1": 1,
    },
)
def heat_transfer_coefficient_1():
    """
    The ratio of the actual to the mean of the heat transfer coefficient, which controls the movement of heat through the climate sector.
    """
    return (heat_transfer_rate() * mean_depth_of_adjacent_m_1_layers()) * (
        heat_diffusion_covar() * (eddy_diff_coeff_m_1() / eddy_diff_coeff_mean_m_1())
        + (1 - heat_diffusion_covar())
    )


@component.add(
    name="TABLE N2O Radiative Forcing SSP2 RCP26",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp26"
    },
)
def table_n2o_radiative_forcing_ssp2_rcp26(x, final_subs=None):
    """
    Data series for future projections of N2O radiative forcing by MESSAGE-GLOBIOM (RCP 2.6).
    """
    return _hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp26(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp26 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.167804,
        0.190994,
        0.213422,
        0.233756,
        0.249976,
        0.262045,
        0.270751,
        0.275577,
        0.277001,
        0.27603,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp26",
)


@component.add(
    name="Climate Feedback Parameter",
    units="Watt/(Meter*Meter)/DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"nvs_2xco2_forcing": 1, "climate_sensitivity_to_2xco2": 1},
)
def climate_feedback_parameter():
    """
    Determines feedback effect from temperature increase.
    """
    return nvs_2xco2_forcing() / climate_sensitivity_to_2xco2()


@component.add(
    name="Heat Transfer Rate",
    units="Watt/(Meter*Meter)/DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def heat_transfer_rate():
    """
    Rate of heat transfer between the surface and deep ocean.
    """
    return 1.23


@component.add(
    name="CH4 Radiative Forcing RCP85",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_ch4_radiative_forcing_ssp2_rcp85": 1,
    },
)
def ch4_radiative_forcing_rcp85():
    """
    Future projections of CH4 radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_ch4_radiative_forcing_ssp2_rcp85(time() * dimensionless_time())


@component.add(
    name="TABLE Other Radiative Forcing AIM RCP60",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_radiative_forcing_aim_rcp60"
    },
)
def table_other_radiative_forcing_aim_rcp60(x, final_subs=None):
    """
    Data series for future projections of other factors radiative forcing by AIM (RCP 6.0).
    """
    return _hardcodedlookup_table_other_radiative_forcing_aim_rcp60(x, final_subs)


_hardcodedlookup_table_other_radiative_forcing_aim_rcp60 = HardcodedLookups(
    [
        2000.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [
        -0.781,
        -0.751,
        -0.671,
        -0.573,
        -0.575,
        -0.521,
        -0.509,
        -0.386,
        -0.32,
        -0.322,
        -0.328,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_radiative_forcing_aim_rcp60",
)


@component.add(
    name="TABLE Other Radiative Forcing IMAGE RCP26",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_radiative_forcing_image_rcp26"
    },
)
def table_other_radiative_forcing_image_rcp26(x, final_subs=None):
    """
    Data series for future projections of other factors radiative forcing by IMAGE (RCP 2.6).
    """
    return _hardcodedlookup_table_other_radiative_forcing_image_rcp26(x, final_subs)


_hardcodedlookup_table_other_radiative_forcing_image_rcp26 = HardcodedLookups(
    [
        2000.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [
        -0.781,
        -0.717,
        -0.577,
        -0.489,
        -0.427,
        -0.413,
        -0.432,
        -0.418,
        -0.382,
        -0.353,
        -0.323,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_radiative_forcing_image_rcp26",
)


@component.add(
    name="TABLE Other Radiative Forcing MiniCAM RCP45",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_other_radiative_forcing_minicam_rcp45"
    },
)
def table_other_radiative_forcing_minicam_rcp45(x, final_subs=None):
    """
    Data series for future projections of other factors radiative forcing by MiniCAM (RCP 4.5).
    """
    return _hardcodedlookup_table_other_radiative_forcing_minicam_rcp45(x, final_subs)


_hardcodedlookup_table_other_radiative_forcing_minicam_rcp45 = HardcodedLookups(
    [
        2000.0,
        2010.0,
        2020.0,
        2030.0,
        2040.0,
        2050.0,
        2060.0,
        2070.0,
        2080.0,
        2090.0,
        2100.0,
    ],
    [
        -0.781,
        -0.713,
        -0.605,
        -0.518,
        -0.431,
        -0.344,
        -0.296,
        -0.257,
        -0.226,
        -0.227,
        -0.224,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_radiative_forcing_minicam_rcp45",
)


@component.add(
    name="Total Radiative Forcing AIM RCP60",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def total_radiative_forcing_aim_rcp60():
    """
    Future projections of total radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by AIM (RCP 6.0).
    """
    return 0


@component.add(
    name="Total Radiative Forcing IMAGE RCP26",
    units="W/(Meter*Meter)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def total_radiative_forcing_image_rcp26():
    """
    Future projections of total radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by IMAGE (RCP 2.6).
    """
    return 0


@component.add(
    name="Heat to 2000m J",
    units="Je22",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_to_2000m": 1,
        "j_per_w_year": 1,
        "land_area_fraction": 1,
        "area": 1,
    },
)
def heat_to_2000m_j():
    """
    Heat to 2000m in Joules*1e22 for the area covered by water.
    """
    return heat_to_2000m() * j_per_w_year() * (area() * (1 - land_area_fraction()))


@component.add(
    name="Heat to 700m",
    units="Year*W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "heat_in_atmosphere_and_upper_ocean": 1,
        "land_area_fraction": 1,
        "heat_in_deep_ocean_1": 1,
        "heat_in_deep_ocean_2": 1,
    },
)
def heat_to_700m():
    """
    Sum of the heat in the atmosphere and upper ocean and that in the top two layers of the deep ocean. Assumes default layer thicknesses, i.e., 100 m for the mixed ocean and 300 m each for layers 1 and 2.
    """
    return (
        heat_in_atmosphere_and_upper_ocean() * (1 - land_area_fraction())
        + heat_in_deep_ocean_1()
        + heat_in_deep_ocean_2()
    )


@component.add(
    name="TABLE N2O Radiative Forcing SSP2 RCP45",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp45"
    },
)
def table_n2o_radiative_forcing_ssp2_rcp45(x, final_subs=None):
    """
    Data series for future projections of N2O radiative forcing by MESSAGE-GLOBIOM (SSP2 RCP 4.5).
    """
    return _hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp45(x, final_subs)


_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp45 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.167804,
        0.191135,
        0.21432,
        0.236786,
        0.257099,
        0.274837,
        0.289969,
        0.301271,
        0.308584,
        0.312947,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_n2o_radiative_forcing_ssp2_rcp45",
)


@component.add(
    name="TABLE Other Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_other_radiative_forcing"},
)
def table_other_radiative_forcing(x, final_subs=None):
    """
    Data series for historical data of other factors radiative forcing.
    """
    return _hardcodedlookup_table_other_radiative_forcing(x, final_subs)


_hardcodedlookup_table_other_radiative_forcing = HardcodedLookups(
    [
        1900.0,
        1910.0,
        1920.0,
        1930.0,
        1940.0,
        1950.0,
        1960.0,
        1970.0,
        1980.0,
        1990.0,
        2000.0,
        2005.0,
    ],
    [
        -0.234,
        -0.282,
        -0.287,
        -0.301,
        -0.301,
        -0.369,
        -0.461,
        -0.523,
        -0.618,
        -0.681,
        -0.781,
        -0.766,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_other_radiative_forcing",
)


@component.add(
    name="N2O Radiative Forcing RCP60",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_n2o_radiative_forcing_ssp2_rcp60": 1,
    },
)
def n2o_radiative_forcing_rcp60():
    """
    Future projections of N2O radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE-GLOBIOM (RCP 6.0).
    """
    return table_n2o_radiative_forcing_ssp2_rcp60(time() * dimensionless_time())


@component.add(
    name="N2O Radiative Forcing History",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "dimensionless_time": 1, "table_n2o_radiative_forcing": 1},
)
def n2o_radiative_forcing_history():
    """
    Historical data for radiative forcing from N2O in the atmosphere.
    """
    return table_n2o_radiative_forcing(time() * dimensionless_time())


@component.add(
    name="INIT Atmospheric and Upper Ocean Temperature",
    units="DegreesC",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_atmospheric_and_upper_ocean_temperature():
    """
    Initial value of Atmospheric and Upper Ocean Temperature.
    """
    return 0


@component.add(
    name="Heat Transfer 4",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_deep_3_ocean_temperature": 1,
        "relative_deep_4_ocean_temperature": 1,
        "heat_transfer_coefficient_4": 1,
        "mean_depth_of_adjacent_3_4_layers": 1,
    },
)
def heat_transfer_4():
    """
    Heat transfer from the third to the fourth layer of the deep ocean.
    """
    return (
        (relative_deep_3_ocean_temperature() - relative_deep_4_ocean_temperature())
        * heat_transfer_coefficient_4()
        / mean_depth_of_adjacent_3_4_layers()
    )


@component.add(
    name="Heat in Deep Ocean 4",
    units="Year*Watt/(Meter*Meter)",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_heat_in_deep_ocean_4": 1},
    other_deps={
        "_integ_heat_in_deep_ocean_4": {
            "initial": {
                "init_deep_ocean_4_temperature": 1,
                "deep_ocean_4_heat_capacity": 1,
            },
            "step": {"heat_transfer_4": 1},
        }
    },
)
def heat_in_deep_ocean_4():
    """
    Heat content of the fourth layer of the deep ocean.
    """
    return _integ_heat_in_deep_ocean_4()


_integ_heat_in_deep_ocean_4 = Integ(
    lambda: heat_transfer_4(),
    lambda: init_deep_ocean_4_temperature() * deep_ocean_4_heat_capacity(),
    "_integ_heat_in_deep_ocean_4",
)


@component.add(
    name="Other Radiative Forcing MiniCAM RCP45",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_radiative_forcing_minicam_rcp45": 1,
    },
)
def other_radiative_forcing_minicam_rcp45():
    """
    Future projections of other radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MiniCAM (RCP 4.5).
    """
    return table_other_radiative_forcing_minicam_rcp45(time() * dimensionless_time())


@component.add(
    name="Heat in Deep Ocean 2",
    units="Year*Watt/(Meter*Meter)",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_heat_in_deep_ocean_2": 1},
    other_deps={
        "_integ_heat_in_deep_ocean_2": {
            "initial": {
                "init_deep_ocean_2_temperature": 1,
                "deep_ocean_2_heat_capacity": 1,
            },
            "step": {"heat_transfer_2": 1, "heat_transfer_3": 1},
        }
    },
)
def heat_in_deep_ocean_2():
    """
    Heat content of the second layer of the deep ocean.
    """
    return _integ_heat_in_deep_ocean_2()


_integ_heat_in_deep_ocean_2 = Integ(
    lambda: heat_transfer_2() - heat_transfer_3(),
    lambda: init_deep_ocean_2_temperature() * deep_ocean_2_heat_capacity(),
    "_integ_heat_in_deep_ocean_2",
)


@component.add(
    name="Heat in Deep Ocean 3",
    units="Year*Watt/(Meter*Meter)",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_heat_in_deep_ocean_3": 1},
    other_deps={
        "_integ_heat_in_deep_ocean_3": {
            "initial": {
                "init_deep_ocean_3_temperature": 1,
                "deep_ocean_3_heat_capacity": 1,
            },
            "step": {"heat_transfer_3": 1, "heat_transfer_4": 1},
        }
    },
)
def heat_in_deep_ocean_3():
    """
    Heat content of the third layer of the deep ocean.
    """
    return _integ_heat_in_deep_ocean_3()


_integ_heat_in_deep_ocean_3 = Integ(
    lambda: heat_transfer_3() - heat_transfer_4(),
    lambda: init_deep_ocean_3_temperature() * deep_ocean_3_heat_capacity(),
    "_integ_heat_in_deep_ocean_3",
)


@component.add(
    name="Heat in Atmosphere and Upper Ocean",
    units="Year*Watt/(Meter*Meter)",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_heat_in_atmosphere_and_upper_ocean": 1},
    other_deps={
        "_integ_heat_in_atmosphere_and_upper_ocean": {
            "initial": {
                "init_atmospheric_and_upper_ocean_temperature": 1,
                "atmospheric_and_upper_ocean_heat_capacity": 1,
            },
            "step": {
                "effective_radiative_forcing": 1,
                "feedback_cooling": 1,
                "heat_transfer_1": 1,
            },
        }
    },
)
def heat_in_atmosphere_and_upper_ocean():
    """
    Temperature of the atmosphere and the mixed ocean layer.
    """
    return _integ_heat_in_atmosphere_and_upper_ocean()


_integ_heat_in_atmosphere_and_upper_ocean = Integ(
    lambda: effective_radiative_forcing() - feedback_cooling() - heat_transfer_1(),
    lambda: init_atmospheric_and_upper_ocean_temperature()
    * atmospheric_and_upper_ocean_heat_capacity(),
    "_integ_heat_in_atmosphere_and_upper_ocean",
)


@component.add(
    name="Heat in Deep Ocean 1",
    units="Year*Watt/(Meter*Meter)",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_heat_in_deep_ocean_1": 1},
    other_deps={
        "_integ_heat_in_deep_ocean_1": {
            "initial": {
                "init_deep_ocean_1_temperature": 1,
                "deep_ocean_1_heat_capacity": 1,
            },
            "step": {"heat_transfer_1": 1, "heat_transfer_2": 1},
        }
    },
)
def heat_in_deep_ocean_1():
    """
    Heat content of the first layer of the deep ocean.
    """
    return _integ_heat_in_deep_ocean_1()


_integ_heat_in_deep_ocean_1 = Integ(
    lambda: heat_transfer_1() - heat_transfer_2(),
    lambda: init_deep_ocean_1_temperature() * deep_ocean_1_heat_capacity(),
    "_integ_heat_in_deep_ocean_1",
)


@component.add(
    name="Heat Transfer 2",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_deep_1_ocean_temperature": 1,
        "relative_deep_2_ocean_temperature": 1,
        "heat_transfer_coefficient_2": 1,
        "mean_depth_of_adjacent_1_2_layers": 1,
    },
)
def heat_transfer_2():
    """
    Heat transfer from the first to the second layer of the deep ocean.
    """
    return (
        (relative_deep_1_ocean_temperature() - relative_deep_2_ocean_temperature())
        * heat_transfer_coefficient_2()
        / mean_depth_of_adjacent_1_2_layers()
    )


@component.add(
    name="Heat Transfer 3",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_deep_2_ocean_temperature": 1,
        "relative_deep_3_ocean_temperature": 1,
        "heat_transfer_coefficient_3": 1,
        "mean_depth_of_adjacent_2_3_layers": 1,
    },
)
def heat_transfer_3():
    """
    Heat transfer from the second to the third layer of the deep ocean.
    """
    return (
        (relative_deep_2_ocean_temperature() - relative_deep_3_ocean_temperature())
        * heat_transfer_coefficient_3()
        / mean_depth_of_adjacent_2_3_layers()
    )


@component.add(
    name="Other Radiative Forcing MESSAGE RCP85",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_radiative_forcing_message_rcp85": 1,
    },
)
def other_radiative_forcing_message_rcp85():
    """
    Future projections of other radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by MESSAGE (RCP 8.5).
    """
    return table_other_radiative_forcing_message_rcp85(time() * dimensionless_time())


@component.add(
    name="Heat to 2000m",
    units="Year*W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"heat_to_700m": 1, "heat_in_deep_ocean_3": 1},
)
def heat_to_2000m():
    """
    Heat to 2000m in deep ocean. Assumes default layer thicknesses, i.e., 100 m for the mixed ocean, 300 m each for layers 1 and 2, and 1300 m for layer 3.
    """
    return heat_to_700m() + heat_in_deep_ocean_3()


@component.add(
    name="TABLE CH4 Radiative Forcing SSP2 RCP85",
    units="W/(Meter*Meter)",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={
        "__lookup__": "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp85"
    },
)
def table_ch4_radiative_forcing_ssp2_rcp85(x, final_subs=None):
    """
    Data series for future projections of CH4 radiative forcing by MESSAGE-GLOBIOM (RCP 8.5).
    """
    return _hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp85(x, final_subs)


_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp85 = HardcodedLookups(
    [2010.0, 2020.0, 2030.0, 2040.0, 2050.0, 2060.0, 2070.0, 2080.0, 2090.0, 2100.0],
    [
        0.588276,
        0.624748,
        0.647046,
        0.664906,
        0.676129,
        0.685959,
        0.695531,
        0.699882,
        0.698119,
        0.688933,
    ],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_ch4_radiative_forcing_ssp2_rcp85",
)


@component.add(
    name="HFC Radiative Forcing History",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "dimensionless_time": 1, "table_hfc_radiative_forcing": 1},
)
def hfc_radiative_forcing_history():
    """
    Historical data for radiative forcing from HFC in the atmosphere.
    """
    return table_hfc_radiative_forcing(time() * dimensionless_time())


@component.add(
    name="Other Radiative Forcing IMAGE RCP26",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_radiative_forcing_image_rcp26": 1,
    },
)
def other_radiative_forcing_image_rcp26():
    """
    Future projections of other radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by IMAGE (RCP 2.6).
    """
    return table_other_radiative_forcing_image_rcp26(time() * dimensionless_time())


@component.add(
    name="Heat Transfer 1",
    units="Watt/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "temperature_change_from_preindustrial": 1,
        "relative_deep_1_ocean_temperature": 1,
        "heat_transfer_coefficient_1": 1,
        "mean_depth_of_adjacent_m_1_layers": 1,
    },
)
def heat_transfer_1():
    """
    Heat transfer from the atmosphere & upper ocean to the first layer of the deep ocean.
    """
    return (
        (temperature_change_from_preindustrial() - relative_deep_1_ocean_temperature())
        * heat_transfer_coefficient_1()
        / mean_depth_of_adjacent_m_1_layers()
    )


@component.add(
    name="HFC Radiative Forcing AIM RCP60",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_hfc_radiative_forcing_aim_rcp60": 1,
    },
)
def hfc_radiative_forcing_aim_rcp60():
    """
    Future projections of HFC radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by AIM (RCP 6.0).
    """
    return table_hfc_radiative_forcing_aim_rcp60(time() * dimensionless_time())


@component.add(
    name="Temperature Anomalies HadCRUT4 v Preindustrial",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"temperature_change_from_preindustrial": 1},
)
def temperature_anomalies_hadcrut4_v_preindustrial():
    """
    Historical values of temperature anomalies of the Atmosphere and Upper Ocean as by HadCRUT4. Source: Met Office Hadley Centre http://www.metoffice.gov.uk/hadobs/hadcrut4/data/versions/HadCRUT.4.1.1.0_r elease_notes.html
    """
    return temperature_change_from_preindustrial()


@component.add(
    name="HFC Radiative Forcing IMAGE RCP26",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_hfc_radiative_forcing_image_rcp26": 1,
    },
)
def hfc_radiative_forcing_image_rcp26():
    """
    Future projections of HFC radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by IMAGE (RCP 2.6).
    """
    return table_hfc_radiative_forcing_image_rcp26(time() * dimensionless_time())


@component.add(
    name="Temperature Anomalies GISS v Preindustrial",
    units="DegreesC",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"temperature_change_from_preindustrial": 1},
)
def temperature_anomalies_giss_v_preindustrial():
    """
    Historical values of temperature anomalies of the Atmosphere and Upper Ocean as by GISS. Source: NASA Goddard Institute for Space Studies, http://data.giss.nasa.gov/gistemp/graphs_v3/
    """
    return temperature_change_from_preindustrial()


@component.add(
    name="Total Radiative Forcing",
    units="W/(m*m)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_radiative_forcing": 1, "other_forcings": 1},
)
def total_radiative_forcing():
    """
    Radiative forcing from various factors in the atmosphere. Source of Historical Data: IIASA RCP Database https://tntcat.iiasa.ac.at:8743/RcpDb/dsd?Action=htmlpage&page=welcome
    """
    return co2_radiative_forcing() + other_forcings()


@component.add(
    name="Lower Layer Volume Vu 1",
    units="Meter*Meter*Meter",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"area": 1, "land_area_fraction": 1, "layer_depth_1": 1},
)
def lower_layer_volume_vu_1():
    """
    Water equivalent volume of the first layer of deep ocean.
    """
    return area() * (1 - land_area_fraction()) * layer_depth_1()


@component.add(
    name="Other Radiative Forcing AIM RCP60",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "dimensionless_time": 1,
        "table_other_radiative_forcing_aim_rcp60": 1,
    },
)
def other_radiative_forcing_aim_rcp60():
    """
    Future projections of other radiative forcing from Representative Concentration Pathways prepared for the Fifth Assessment Report of the United Nations Intergovernmental Panel on Climate Change by AIM (RCP 6.0).
    """
    return table_other_radiative_forcing_aim_rcp60(time() * dimensionless_time())


@component.add(
    name="Other Radiative Forcing History",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "dimensionless_time": 1, "table_other_radiative_forcing": 1},
)
def other_radiative_forcing_history():
    """
    Historical data for radiative forcing from other factors in the atmosphere.
    """
    return table_other_radiative_forcing(time() * dimensionless_time())


@component.add(
    name="Effective Radiative Forcing",
    units="W/(Meter*Meter)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_radiative_forcing": 1},
)
def effective_radiative_forcing():
    """
    Total radiative forcing from various factors in the atmosphere.
    """
    return total_radiative_forcing()


@component.add(
    name="Volumetric Heat Capacity",
    units="Year*W/(Meter*Meter*Meter*DegreesC)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mass_heat_capacity": 1,
        "watt_per_j_s": 1,
        "sec_per_year": 1,
        "density": 1,
    },
)
def volumetric_heat_capacity():
    """
    Volumetric heat capacity of water, i.e., amount of heat in watt*year required to raise 1 cubic meter of water by one degree C.
    """
    return mass_heat_capacity() * watt_per_j_s() / sec_per_year() * density()


@component.add(
    name="Energy Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand_per_capita": 1, "population": 1},
)
def energy_demand():
    """
    Total world demand for energy determined by population and energy demand per capita. Source of historical data: International Energy Agency – Key World Energy Statistics 2007
    """
    return energy_demand_per_capita() * population()


@component.add(
    name="Reference Change in Market Share Coal",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcf_var_s": 1, "_smooth_reference_change_in_market_share_coal": 1},
    other_deps={
        "_smooth_reference_change_in_market_share_coal": {
            "initial": {
                "reference_change_in_fossil_fuel_market_share_variation": 1,
                "rcf_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_change_in_fossil_fuel_market_share_variation": 1,
                "rcf_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def reference_change_in_market_share_coal():
    """
    Reference change in coal energy market share due to price competitiveness.
    """
    return rcf_var_s() + _smooth_reference_change_in_market_share_coal()


_smooth_reference_change_in_market_share_coal = Smooth(
    lambda: step(
        __data["time"],
        reference_change_in_fossil_fuel_market_share_variation() - rcf_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        reference_change_in_fossil_fuel_market_share_variation() - rcf_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_change_in_market_share_coal",
)


@component.add(
    name="Reference Change in Market Share Wind",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcmw_var_s": 1, "_smooth_reference_change_in_market_share_wind": 1},
    other_deps={
        "_smooth_reference_change_in_market_share_wind": {
            "initial": {
                "reference_change_in_market_share_wind_variation": 1,
                "rcmw_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_change_in_market_share_wind_variation": 1,
                "rcmw_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def reference_change_in_market_share_wind():
    """
    Reference change in wind energy market share due to price competitiveness.
    """
    return rcmw_var_s() + _smooth_reference_change_in_market_share_wind()


_smooth_reference_change_in_market_share_wind = Smooth(
    lambda: step(
        __data["time"],
        reference_change_in_market_share_wind_variation() - rcmw_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        reference_change_in_market_share_wind_variation() - rcmw_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_change_in_market_share_wind",
)


@component.add(
    name="Reference Change in Market Share Biomass",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcbi_var_s": 1, "_smooth_reference_change_in_market_share_biomass": 1},
    other_deps={
        "_smooth_reference_change_in_market_share_biomass": {
            "initial": {
                "reference_change_in_market_share_biomass_variation": 1,
                "rcbi_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_change_in_market_share_biomass_variation": 1,
                "rcbi_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def reference_change_in_market_share_biomass():
    """
    Reference change in biomass energy market share due to price competitiveness.
    """
    return rcbi_var_s() + _smooth_reference_change_in_market_share_biomass()


_smooth_reference_change_in_market_share_biomass = Smooth(
    lambda: step(
        __data["time"],
        reference_change_in_market_share_biomass_variation() - rcbi_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        reference_change_in_market_share_biomass_variation() - rcbi_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_change_in_market_share_biomass",
)


@component.add(
    name="Reference Change in Market Share Solar",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcms_var_s": 1, "_smooth_reference_change_in_market_share_solar": 1},
    other_deps={
        "_smooth_reference_change_in_market_share_solar": {
            "initial": {
                "reference_change_in_market_share_solar_variation": 1,
                "rcms_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_change_in_market_share_solar_variation": 1,
                "rcms_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def reference_change_in_market_share_solar():
    """
    Reference change in solar energy market share due to price competitiveness.
    """
    return rcms_var_s() + _smooth_reference_change_in_market_share_solar()


_smooth_reference_change_in_market_share_solar = Smooth(
    lambda: step(
        __data["time"],
        reference_change_in_market_share_solar_variation() - rcms_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        reference_change_in_market_share_solar_variation() - rcms_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_change_in_market_share_solar",
)


@component.add(
    name="Price Elasticity of Demand Coal",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"pec_var_s": 1, "_smooth_price_elasticity_of_demand_coal": 1},
    other_deps={
        "_smooth_price_elasticity_of_demand_coal": {
            "initial": {
                "price_elasticity_of_demand_coal_variation": 1,
                "pec_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "price_elasticity_of_demand_coal_variation": 1,
                "pec_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def price_elasticity_of_demand_coal():
    """
    Coal energy price elasticity of demand.
    """
    return pec_var_s() + _smooth_price_elasticity_of_demand_coal()


_smooth_price_elasticity_of_demand_coal = Smooth(
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_coal_variation() - pec_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_coal_variation() - pec_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_price_elasticity_of_demand_coal",
)


@component.add(
    name="Price Elasticity of Demand Oil",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"peo_var_s": 1, "_smooth_price_elasticity_of_demand_oil": 1},
    other_deps={
        "_smooth_price_elasticity_of_demand_oil": {
            "initial": {
                "price_elasticity_of_demand_oil_variation": 1,
                "peo_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "price_elasticity_of_demand_oil_variation": 1,
                "peo_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def price_elasticity_of_demand_oil():
    """
    Oil energy price elasticity of demand.
    """
    return peo_var_s() + _smooth_price_elasticity_of_demand_oil()


_smooth_price_elasticity_of_demand_oil = Smooth(
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_oil_variation() - peo_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_oil_variation() - peo_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_price_elasticity_of_demand_oil",
)


@component.add(
    name="Price Elasticity of Demand Solar",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"pew_var_s": 1, "_smooth_price_elasticity_of_demand_solar": 1},
    other_deps={
        "_smooth_price_elasticity_of_demand_solar": {
            "initial": {
                "price_elasticity_of_demand_wind_and_solar_variation": 1,
                "pew_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "price_elasticity_of_demand_wind_and_solar_variation": 1,
                "pew_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def price_elasticity_of_demand_solar():
    """
    Solar energy price elasticity of demand.
    """
    return pew_var_s() + _smooth_price_elasticity_of_demand_solar()


_smooth_price_elasticity_of_demand_solar = Smooth(
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_wind_and_solar_variation() - pew_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_wind_and_solar_variation() - pew_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_price_elasticity_of_demand_solar",
)


@component.add(
    name="Price Elasticity of Demand Wind",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"pew_var_s": 1, "_smooth_price_elasticity_of_demand_wind": 1},
    other_deps={
        "_smooth_price_elasticity_of_demand_wind": {
            "initial": {
                "price_elasticity_of_demand_wind_and_solar_variation": 1,
                "pew_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "price_elasticity_of_demand_wind_and_solar_variation": 1,
                "pew_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def price_elasticity_of_demand_wind():
    """
    Wind energy price elasticity of demand.
    """
    return pew_var_s() + _smooth_price_elasticity_of_demand_wind()


_smooth_price_elasticity_of_demand_wind = Smooth(
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_wind_and_solar_variation() - pew_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_wind_and_solar_variation() - pew_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_price_elasticity_of_demand_wind",
)


@component.add(
    name="Reference Change in Market Share Gas",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcf_var_s": 1, "_smooth_reference_change_in_market_share_gas": 1},
    other_deps={
        "_smooth_reference_change_in_market_share_gas": {
            "initial": {
                "reference_change_in_fossil_fuel_market_share_variation": 1,
                "rcf_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_change_in_fossil_fuel_market_share_variation": 1,
                "rcf_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def reference_change_in_market_share_gas():
    """
    Reference change in gas energy market share due to price competitiveness.
    """
    return rcf_var_s() + _smooth_reference_change_in_market_share_gas()


_smooth_reference_change_in_market_share_gas = Smooth(
    lambda: step(
        __data["time"],
        reference_change_in_fossil_fuel_market_share_variation() - rcf_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        reference_change_in_fossil_fuel_market_share_variation() - rcf_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_change_in_market_share_gas",
)


@component.add(
    name="Reference Change in Market Share Oil",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"rcf_var_s": 1, "_smooth_reference_change_in_market_share_oil": 1},
    other_deps={
        "_smooth_reference_change_in_market_share_oil": {
            "initial": {
                "reference_change_in_fossil_fuel_market_share_variation": 1,
                "rcf_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "reference_change_in_fossil_fuel_market_share_variation": 1,
                "rcf_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def reference_change_in_market_share_oil():
    """
    Reference change in oil energy market share due to price competitiveness.
    """
    return rcf_var_s() + _smooth_reference_change_in_market_share_oil()


_smooth_reference_change_in_market_share_oil = Smooth(
    lambda: step(
        __data["time"],
        reference_change_in_fossil_fuel_market_share_variation() - rcf_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        reference_change_in_fossil_fuel_market_share_variation() - rcf_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_reference_change_in_market_share_oil",
)


@component.add(
    name="Max Energy Demand per Capita",
    units="Mtoe/(Year*Person)",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"me_var_s": 1, "_smooth_max_energy_demand_per_capita": 1},
    other_deps={
        "_smooth_max_energy_demand_per_capita": {
            "initial": {
                "max_energy_demand_per_capita_variation": 1,
                "me_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "max_energy_demand_per_capita_variation": 1,
                "me_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def max_energy_demand_per_capita():
    """
    Maximal reference Energy Demand per Capita.
    """
    return me_var_s() + _smooth_max_energy_demand_per_capita()


_smooth_max_energy_demand_per_capita = Smooth(
    lambda: step(
        __data["time"],
        max_energy_demand_per_capita_variation() - me_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        max_energy_demand_per_capita_variation() - me_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_max_energy_demand_per_capita",
)


@component.add(
    name="Price Elasticity of Demand Biomass",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"peb_var_s": 1, "_smooth_price_elasticity_of_demand_biomass": 1},
    other_deps={
        "_smooth_price_elasticity_of_demand_biomass": {
            "initial": {
                "price_elasticity_of_demand_biomass_variation": 1,
                "peb_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "price_elasticity_of_demand_biomass_variation": 1,
                "peb_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def price_elasticity_of_demand_biomass():
    """
    Biomass energy price elasticity of demand.
    """
    return peb_var_s() + _smooth_price_elasticity_of_demand_biomass()


_smooth_price_elasticity_of_demand_biomass = Smooth(
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_biomass_variation() - peb_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        price_elasticity_of_demand_biomass_variation() - peb_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_price_elasticity_of_demand_biomass",
)


@component.add(
    name="Ramp Investment Period",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fraction_of_revenue_invested_in_solar_technology_ramp_investment_period_variation": 1,
        "time": 1,
    },
)
def ramp_investment_period():
    """
    Period of fractional investments in new energy technologies.
    """
    return 100 + step(
        __data["time"],
        fraction_of_revenue_invested_in_solar_technology_ramp_investment_period_variation()
        - 100,
        2020,
    )


@component.add(
    name="Impact of GWP on Energy Demand per Capita",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "impact_of_gwp_per_capita_on_energy_demand_inflection": 2,
        "impact_of_gwp_per_capita_on_energy_demand_steepness": 3,
        "reference_gwp_per_capita_for_energy_demand": 1,
        "smoothed_gwp_per_capita": 1,
    },
)
def impact_of_gwp_on_energy_demand_per_capita():
    """
    Impact of population wealth on energy demand per capita.
    """
    return (
        1
        - impact_of_gwp_per_capita_on_energy_demand_inflection()
        ** impact_of_gwp_per_capita_on_energy_demand_steepness()
        / (
            impact_of_gwp_per_capita_on_energy_demand_inflection()
            ** impact_of_gwp_per_capita_on_energy_demand_steepness()
            + (smoothed_gwp_per_capita() / reference_gwp_per_capita_for_energy_demand())
            ** impact_of_gwp_per_capita_on_energy_demand_steepness()
        )
    )


@component.add(
    name="Wind Price toe",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"wind_energy_price": 1, "toe_per_mtoe": 1},
)
def wind_price_toe():
    """
    Actual wind energy price in dollars per toe.
    """
    return wind_energy_price() / toe_per_mtoe()


@component.add(
    name="Biomass Price toe",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"biomass_energy_price": 1, "toe_per_mtoe": 1},
)
def biomass_price_toe():
    """
    Actual biomass energy price in dollars per toe.
    """
    return biomass_energy_price() / toe_per_mtoe()


@component.add(
    name="Coal Price toe",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coal_price": 1, "toe_per_mtoe": 1},
)
def coal_price_toe():
    """
    Actual coal price in dollars per toe.
    """
    return coal_price() / toe_per_mtoe()


@component.add(
    name="Gas Price toe",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_price": 1, "toe_per_mtoe": 1},
)
def gas_price_toe():
    """
    Actual gas price in dollars per toe.
    """
    return gas_price() / toe_per_mtoe()


@component.add(
    name="Oil Price toe",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_price": 1, "toe_per_mtoe": 1},
)
def oil_price_toe():
    """
    Actual oil price in dollars per toe.
    """
    return oil_price() / toe_per_mtoe()


@component.add(
    name="Solar Price toe",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"solar_energy_price": 1, "toe_per_mtoe": 1},
)
def solar_price_toe():
    """
    Actual solar energy price in dollars per toe.
    """
    return solar_energy_price() / toe_per_mtoe()


@component.add(
    name="Energy Demand 1900 Calibration",
    units="Mtoe/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def energy_demand_1900_calibration():
    """
    Energy demand calibration factor for year 1900.
    """
    return 120


@component.add(
    name="Energy Demand per Capita",
    units="Mtoe/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_energy_demand_per_capita": 1,
        "impact_of_gwp_on_energy_demand_per_capita": 1,
    },
)
def energy_demand_per_capita():
    """
    Energy demand per capita taking into consideration the change in population wealth.
    """
    return max_energy_demand_per_capita() * impact_of_gwp_on_energy_demand_per_capita()


@component.add(
    name="Impact of GWP per Capita on Energy Demand Steepness",
    units="Dmnl",
    limits=(0.5, 3.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_gwp_per_capita_on_energy_demand_steepness():
    """
    A parameter determining the steepness of the nonlinear function representing the impact of population wealth on energy demand.
    """
    return 0.7946


@component.add(
    name="Reference GWP per Capita for Energy Demand",
    units="$/(Year*Person)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_gwp_per_capita_for_energy_demand():
    """
    A reference value against which the GDP per Capita is compared to in order to calculate the impact of population wealth on energy demand.
    """
    return 16000


@component.add(
    name="Impact of GWP per Capita on Energy Demand Inflection",
    units="Dmnl",
    limits=(0.4, 1.0, 0.05),
    comp_type="Constant",
    comp_subtype="Normal",
)
def impact_of_gwp_per_capita_on_energy_demand_inflection():
    """
    A parameter determining the inflection point of the nonlinear function representing the impact of population wealth on energy demand.
    """
    return 1.1


@component.add(
    name="Factor of Carbon Price Change",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def factor_of_carbon_price_change():
    """
    WWF Scenario variable. Further development required.
    """
    return 99


@component.add(
    name="Carbon Price Change",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "scenario_bioenergyplus": 2,
        "time": 1,
        "factor_of_carbon_price_change": 1,
    },
)
def carbon_price_change():
    """
    WWF Scenario variable. Further development required.
    """
    return (1 - scenario_bioenergyplus()) * 1 + scenario_bioenergyplus() * (
        1 + step(__data["time"], factor_of_carbon_price_change(), 2010)
    )


@component.add(
    name="SCENARIO BioenergyPlus",
    units="Dmnl",
    limits=(0.0, 1.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def scenario_bioenergyplus():
    """
    WWF Scenario variable. Further development required.
    """
    return 0


@component.add(
    name="Energy Demand Fulfillment Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_production": 1, "energy_demand": 1},
)
def energy_demand_fulfillment_ratio():
    """
    Ratio of energy production to energy demand indicating a level of energy demand fulfillment.
    """
    return energy_production() / energy_demand()


@component.add(
    name="Price Competitiveness Factor Biomass",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_price_biomass": 1, "average_energy_price": 1},
)
def price_competitiveness_factor_biomass():
    """
    Biomass energy price competitiveness as a ratio of biomass energy market price to average market energy price.
    """
    return average_price_biomass() / average_energy_price()


@component.add(
    name="Price Competitiveness Factor Gas",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "carbon_price_change": 1,
        "average_price_gas": 1,
        "average_energy_price": 1,
    },
)
def price_competitiveness_factor_gas():
    """
    Gas price competitiveness as a ratio of gas market price to average market energy price.
    """
    return carbon_price_change() * average_price_gas() / average_energy_price()


@component.add(
    name="Price Competitiveness Factor Oil",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "carbon_price_change": 1,
        "average_price_oil": 1,
        "average_energy_price": 1,
    },
)
def price_competitiveness_factor_oil():
    """
    Oil price competitiveness as a ratio of oil market price to average market energy price.
    """
    return carbon_price_change() * average_price_oil() / average_energy_price()


@component.add(
    name="Price Competitiveness Factor Solar",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_price_solar": 1, "average_energy_price": 1},
)
def price_competitiveness_factor_solar():
    """
    Solar energy price competitiveness as a ratio of solar energy market price to average market energy price.
    """
    return average_price_solar() / average_energy_price()


@component.add(
    name="Price Competitiveness Factor Wind",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"average_price_wind": 1, "average_energy_price": 1},
)
def price_competitiveness_factor_wind():
    """
    Wind energy price competitiveness as a ratio of wind energy market price to average market energy price.
    """
    return average_price_wind() / average_energy_price()


@component.add(
    name="Price Competitiveness Factor Coal",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "carbon_price_change": 1,
        "average_price_coal": 1,
        "average_energy_price": 1,
    },
)
def price_competitiveness_factor_coal():
    """
    Coal price competitiveness as a ratio of coal market price to average market energy price.
    """
    return carbon_price_change() * average_price_coal() / average_energy_price()


@component.add(
    name="Change in Price Wind",
    units="$/(toe*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_price_toe": 1,
        "average_price_wind": 1,
        "time_to_average_price_wind": 1,
    },
)
def change_in_price_wind():
    """
    Change in average market wind energy price.
    """
    return (wind_price_toe() - average_price_wind()) / time_to_average_price_wind()


@component.add(
    name="Change in Price Biomass",
    units="$/(toe*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_price_toe": 1,
        "average_price_biomass": 1,
        "time_to_average_price_biomass": 1,
    },
)
def change_in_price_biomass():
    """
    Change in average market biomass energy price.
    """
    return (
        biomass_price_toe() - average_price_biomass()
    ) / time_to_average_price_biomass()


@component.add(
    name="Change in Price Coal",
    units="$/(toe*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coal_price_toe": 1,
        "average_price_coal": 1,
        "time_to_average_price_coal": 1,
    },
)
def change_in_price_coal():
    """
    Change in average market coal price.
    """
    return (coal_price_toe() - average_price_coal()) / time_to_average_price_coal()


@component.add(
    name="Change in Price Gas",
    units="$/(toe*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gas_price_toe": 1,
        "average_price_gas": 1,
        "time_to_average_price_gas": 1,
    },
)
def change_in_price_gas():
    """
    Change in average market gas price.
    """
    return (gas_price_toe() - average_price_gas()) / time_to_average_price_gas()


@component.add(
    name="Change in Price Oil",
    units="$/(Year*toe)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oil_price_toe": 1,
        "average_price_oil": 1,
        "time_to_average_price_oil": 1,
    },
)
def change_in_price_oil():
    """
    Change in average market oil price.
    """
    return (oil_price_toe() - average_price_oil()) / time_to_average_price_oil()


@component.add(
    name="Change in Price Solar",
    units="$/(toe*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_price_toe": 1,
        "average_price_solar": 1,
        "time_to_average_price_solar": 1,
    },
)
def change_in_price_solar():
    """
    Change in average market solar energy price.
    """
    return (solar_price_toe() - average_price_solar()) / time_to_average_price_solar()


@component.add(
    name="Market Share Biomass Crops",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"market_share_biomass": 1, "market_share_biomass_allocation": 1},
)
def market_share_biomass_crops():
    """
    Energy crops specific biomass energy market share among other energy sources.
    """
    return market_share_biomass() * (1 - market_share_biomass_allocation())


@component.add(
    name="Market Share Biomass Forest",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"market_share_biomass": 1, "market_share_biomass_allocation": 1},
)
def market_share_biomass_forest():
    """
    Forest specific biomass energy market share among other energy sources.
    """
    return market_share_biomass() * market_share_biomass_allocation()


@component.add(
    name="Market Share Biomass Allocation",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def market_share_biomass_allocation():
    """
    Market share allocation between forest and energy crops biomass.
    """
    return 0.7


@component.add(
    name="Energy Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coal_production": 1,
        "gas_production": 1,
        "oil_production": 1,
        "biomass_energy_production": 1,
        "solar_energy_production": 1,
        "wind_energy_production": 1,
    },
)
def energy_production():
    """
    Total energy production per year.
    """
    return (
        coal_production()
        + gas_production()
        + oil_production()
        + biomass_energy_production()
        + solar_energy_production()
        + wind_energy_production()
    )


@component.add(
    name="Reference Change in Total Market Share",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_oil": 1,
        "change_in_market_share_gas": 1,
        "change_in_market_share_coal": 1,
        "change_in_market_share_solar": 1,
        "change_in_market_share_wind": 1,
        "change_in_market_share_biomass": 1,
    },
)
def reference_change_in_total_market_share():
    """
    Reference Change in Total Market Share taking into account changes in specific energy sectors.
    """
    return (
        change_in_market_share_oil()
        + change_in_market_share_gas()
        + change_in_market_share_coal()
        + change_in_market_share_solar()
        + change_in_market_share_wind()
        + change_in_market_share_biomass()
    )


@component.add(
    name="Average Energy Price",
    units="$/toe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "average_price_oil": 1,
        "average_price_gas": 1,
        "average_price_coal": 1,
        "average_price_solar": 1,
        "average_price_wind": 1,
        "average_price_biomass": 1,
        "number_of_energy_sources": 1,
    },
)
def average_energy_price():
    """
    Average market energy price.
    """
    return (
        average_price_oil()
        + average_price_gas()
        + average_price_coal()
        + average_price_solar()
        + average_price_wind()
        + average_price_biomass()
    ) / number_of_energy_sources()


@component.add(
    name="Total Energy Market",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "market_share_oil": 1,
        "market_share_gas": 1,
        "market_share_coal": 1,
        "market_share_solar": 1,
        "market_share_wind": 1,
        "market_share_biomass": 1,
    },
)
def total_energy_market():
    """
    Total energy market share.
    """
    return (
        market_share_oil()
        + market_share_gas()
        + market_share_coal()
        + market_share_solar()
        + market_share_wind()
        + market_share_biomass()
    )


@component.add(
    name="Average Price Oil",
    units="$/toe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_price_oil": 1},
    other_deps={
        "_integ_average_price_oil": {
            "initial": {"init_apo": 1},
            "step": {"change_in_price_oil": 1},
        }
    },
)
def average_price_oil():
    """
    Average market oil price.
    """
    return _integ_average_price_oil()


_integ_average_price_oil = Integ(
    lambda: change_in_price_oil(), lambda: init_apo(), "_integ_average_price_oil"
)


@component.add(
    name="Average Price Solar",
    units="$/toe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_price_solar": 1},
    other_deps={
        "_integ_average_price_solar": {
            "initial": {"init_aps": 1},
            "step": {"change_in_price_solar": 1},
        }
    },
)
def average_price_solar():
    """
    Average market solar energy price.
    """
    return _integ_average_price_solar()


_integ_average_price_solar = Integ(
    lambda: change_in_price_solar(), lambda: init_aps(), "_integ_average_price_solar"
)


@component.add(
    name="Average Price Wind",
    units="$/toe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_price_wind": 1},
    other_deps={
        "_integ_average_price_wind": {
            "initial": {"init_apw": 1},
            "step": {"change_in_price_wind": 1},
        }
    },
)
def average_price_wind():
    """
    Average market wind energy price.
    """
    return _integ_average_price_wind()


_integ_average_price_wind = Integ(
    lambda: change_in_price_wind(), lambda: init_apw(), "_integ_average_price_wind"
)


@component.add(
    name="Average Price Coal",
    units="$/toe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_price_coal": 1},
    other_deps={
        "_integ_average_price_coal": {
            "initial": {"init_apc": 1},
            "step": {"change_in_price_coal": 1},
        }
    },
)
def average_price_coal():
    """
    Average market coal price.
    """
    return _integ_average_price_coal()


_integ_average_price_coal = Integ(
    lambda: change_in_price_coal(), lambda: init_apc(), "_integ_average_price_coal"
)


@component.add(
    name="Average Price Gas",
    units="$/toe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_price_gas": 1},
    other_deps={
        "_integ_average_price_gas": {
            "initial": {"init_apg": 1},
            "step": {"change_in_price_gas": 1},
        }
    },
)
def average_price_gas():
    """
    Average market gas price.
    """
    return _integ_average_price_gas()


_integ_average_price_gas = Integ(
    lambda: change_in_price_gas(), lambda: init_apg(), "_integ_average_price_gas"
)


@component.add(
    name="Average Price Biomass",
    units="$/toe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_price_biomass": 1},
    other_deps={
        "_integ_average_price_biomass": {
            "initial": {"init_apb": 1},
            "step": {"change_in_price_biomass": 1},
        }
    },
)
def average_price_biomass():
    """
    Average market biomass energy price.
    """
    return _integ_average_price_biomass()


_integ_average_price_biomass = Integ(
    lambda: change_in_price_biomass(),
    lambda: init_apb(),
    "_integ_average_price_biomass",
)


@component.add(
    name="Time to Average Price Biomass",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_price_biomass():
    """
    Time to average market biomass energy price.
    """
    return 18


@component.add(
    name="Effect of Price on Market Share Biomass",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "price_competitiveness_factor_biomass": 1,
        "price_elasticity_of_demand_biomass": 1,
    },
)
def effect_of_price_on_market_share_biomass():
    """
    Effect of biomass energy price competitiveness on market share.
    """
    return (
        price_competitiveness_factor_biomass() ** -price_elasticity_of_demand_biomass()
    )


@component.add(
    name="Market Share Biomass",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_biomass": 1,
        "reference_change_in_total_market_share": 1,
    },
)
def market_share_biomass():
    """
    Biomass energy market share among other energy sources.
    """
    return change_in_market_share_biomass() / reference_change_in_total_market_share()


@component.add(
    name="Change in Market Share Biomass",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_change_in_market_share_biomass": 1},
    other_deps={
        "_integ_change_in_market_share_biomass": {
            "initial": {
                "reference_change_in_market_share_biomass": 1,
                "effect_of_price_on_market_share_biomass": 1,
            },
            "step": {"change_rate_due_to_price_biomass": 1},
        }
    },
)
def change_in_market_share_biomass():
    """
    Change in biomass energy market share due to price competitiveness.
    """
    return _integ_change_in_market_share_biomass()


_integ_change_in_market_share_biomass = Integ(
    lambda: change_rate_due_to_price_biomass(),
    lambda: reference_change_in_market_share_biomass()
    * effect_of_price_on_market_share_biomass(),
    "_integ_change_in_market_share_biomass",
)


@component.add(
    name="INIT APB", units="$/toe", comp_type="Constant", comp_subtype="Normal"
)
def init_apb():
    """
    Initial average market biomass energy price.
    """
    return 500


@component.add(
    name="Change Rate Due to Price Biomass",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_change_in_market_share_biomass": 1,
        "effect_of_price_on_market_share_biomass": 1,
        "change_in_market_share_biomass": 1,
        "time_to_adjust_market_share": 1,
    },
)
def change_rate_due_to_price_biomass():
    """
    Ratio of change in biomass energy market share.
    """
    return (
        reference_change_in_market_share_biomass()
        * effect_of_price_on_market_share_biomass()
        - change_in_market_share_biomass()
    ) / time_to_adjust_market_share()


@component.add(
    name="Time to Adjust Market Share",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_adjust_market_share():
    """
    Time to adjust changes in market share.
    """
    return 10


@component.add(
    name="Mtoe per Ton", units="Mtoe/Ton", comp_type="Constant", comp_subtype="Normal"
)
def mtoe_per_ton():
    """
    Coefficient to convert million tons of oil equivalent unit (Mtoe) into coal tons (Ton).
    """
    return 4.9e-07


@component.add(
    name="Time to Average Price Oil",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_price_oil():
    """
    Time to average market oil price.
    """
    return 5


@component.add(
    name="kW into TW", units="kW/TW", comp_type="Constant", comp_subtype="Normal"
)
def kw_into_tw():
    """
    Coefficient to convert kilowatts into terawatts.
    """
    return 10000000000.0


@component.add(
    name="INIT APS", units="$/toe", comp_type="Constant", comp_subtype="Normal"
)
def init_aps():
    """
    Initial average market solar energy price.
    """
    return 50000


@component.add(
    name="INIT APW", units="$/toe", comp_type="Constant", comp_subtype="Normal"
)
def init_apw():
    """
    Initial average market wind energy price.
    """
    return 50000


@component.add(
    name="kW into GW", units="kW/GW", comp_type="Constant", comp_subtype="Normal"
)
def kw_into_gw():
    """
    Coefficient to convert kilowatts into gigawatts.
    """
    return 1000000.0


@component.add(
    name="W into GW", units="W/GW", comp_type="Constant", comp_subtype="Normal"
)
def w_into_gw():
    """
    Coefficient to convert watts into gigawatts
    """
    return 1000000000.0


@component.add(
    name="kWh into Mtoe peak hour",
    units="Mtoe/kW",
    comp_type="Constant",
    comp_subtype="Normal",
)
def kwh_into_mtoe_peak_hour():
    """
    Coefficient to convert kWh into Mtoe peak hour.
    """
    return 8.6e-11


@component.add(
    name="INIT APG", units="$/toe", comp_type="Constant", comp_subtype="Normal"
)
def init_apg():
    """
    Initial average market gas price.
    """
    return 50000


@component.add(
    name="INIT APO", units="$/toe", comp_type="Constant", comp_subtype="Normal"
)
def init_apo():
    """
    Initial average market oil price.
    """
    return 35


@component.add(
    name="INIT APC", units="$/toe", comp_type="Constant", comp_subtype="Normal"
)
def init_apc():
    """
    Initial average market coal price.
    """
    return 4


@component.add(
    name="kWh into Mtoe",
    units="Mtoe/(kW*Hour)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def kwh_into_mtoe():
    """
    Coefficient to convert kWh into Mtoe.
    """
    return 8.6e-11


@component.add(
    name="Hours per Year",
    units="Hour/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def hours_per_year():
    """
    Assumed total number of hours per year.
    """
    return 8760


@component.add(
    name="Market Share Solar",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_solar": 1,
        "reference_change_in_total_market_share": 1,
    },
)
def market_share_solar():
    """
    Solar energy market share among other energy sources.
    """
    return change_in_market_share_solar() / reference_change_in_total_market_share()


@component.add(
    name="Change in Market Share Solar",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_change_in_market_share_solar": 1},
    other_deps={
        "_integ_change_in_market_share_solar": {
            "initial": {
                "reference_change_in_market_share_solar": 1,
                "effect_of_price_on_market_share_solar": 1,
            },
            "step": {"change_rate_due_to_price_solar": 1},
        }
    },
)
def change_in_market_share_solar():
    """
    Change in solar energy market share due to price competitiveness.
    """
    return _integ_change_in_market_share_solar()


_integ_change_in_market_share_solar = Integ(
    lambda: change_rate_due_to_price_solar(),
    lambda: reference_change_in_market_share_solar()
    * effect_of_price_on_market_share_solar(),
    "_integ_change_in_market_share_solar",
)


@component.add(
    name="Effect of Price on Market Share Solar",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "price_competitiveness_factor_solar": 1,
        "price_elasticity_of_demand_solar": 1,
    },
)
def effect_of_price_on_market_share_solar():
    """
    Effect of solar energy price competitiveness on market share.
    """
    return price_competitiveness_factor_solar() ** -price_elasticity_of_demand_solar()


@component.add(
    name="Time to Average Price Solar",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_price_solar():
    """
    Time to average market solar energy price.
    """
    return 15


@component.add(
    name="Change Rate Due to Price Solar",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_change_in_market_share_solar": 1,
        "effect_of_price_on_market_share_solar": 1,
        "change_in_market_share_solar": 1,
        "time_to_adjust_market_share": 1,
    },
)
def change_rate_due_to_price_solar():
    """
    Ratio of change in solar energy market share.
    """
    return (
        reference_change_in_market_share_solar()
        * effect_of_price_on_market_share_solar()
        - change_in_market_share_solar()
    ) / time_to_adjust_market_share()


@component.add(
    name="Market Share Wind",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_wind": 1,
        "reference_change_in_total_market_share": 1,
    },
)
def market_share_wind():
    """
    Wind energy market share among other energy sources.
    """
    return change_in_market_share_wind() / reference_change_in_total_market_share()


@component.add(
    name="Change Rate Due to Price Wind",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_change_in_market_share_wind": 1,
        "effect_of_price_on_market_share_wind": 1,
        "change_in_market_share_wind": 1,
        "time_to_adjust_market_share": 1,
    },
)
def change_rate_due_to_price_wind():
    """
    Ratio of change in wind energy market share.
    """
    return (
        reference_change_in_market_share_wind() * effect_of_price_on_market_share_wind()
        - change_in_market_share_wind()
    ) / time_to_adjust_market_share()


@component.add(
    name="Change Rate Due to Price Gas",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_change_in_market_share_gas": 1,
        "effect_of_price_on_market_share_gas": 1,
        "change_in_market_share_gas": 1,
        "time_to_adjust_market_share": 1,
    },
)
def change_rate_due_to_price_gas():
    """
    Ratio of change in gas energy market share.
    """
    return (
        reference_change_in_market_share_gas() * effect_of_price_on_market_share_gas()
        - change_in_market_share_gas()
    ) / time_to_adjust_market_share()


@component.add(
    name="Time to Average Price Wind",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_price_wind():
    """
    Time to average market wind energy price.
    """
    return 20


@component.add(
    name="Change Rate Due to Price Coal",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_change_in_market_share_coal": 1,
        "effect_of_price_on_market_share_coal": 1,
        "change_in_market_share_coal": 1,
        "time_to_adjust_market_share": 1,
    },
)
def change_rate_due_to_price_coal():
    """
    Ratio of change in coal energy market share.
    """
    return (
        reference_change_in_market_share_coal() * effect_of_price_on_market_share_coal()
        - change_in_market_share_coal()
    ) / time_to_adjust_market_share()


@component.add(
    name="Effect of Price on Market Share Oil",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "price_competitiveness_factor_oil": 1,
        "price_elasticity_of_demand_oil": 1,
    },
)
def effect_of_price_on_market_share_oil():
    """
    Effect of oil energy price competitiveness on market share.
    """
    return price_competitiveness_factor_oil() ** -price_elasticity_of_demand_oil()


@component.add(
    name="Effect of Price on Market Share Coal",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "price_competitiveness_factor_coal": 1,
        "price_elasticity_of_demand_coal": 1,
    },
)
def effect_of_price_on_market_share_coal():
    """
    Effect of coal energy price competitiveness on market share.
    """
    return price_competitiveness_factor_coal() ** -price_elasticity_of_demand_coal()


@component.add(
    name="Change in Market Share Wind",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_change_in_market_share_wind": 1},
    other_deps={
        "_integ_change_in_market_share_wind": {
            "initial": {
                "reference_change_in_market_share_wind": 1,
                "effect_of_price_on_market_share_wind": 1,
            },
            "step": {"change_rate_due_to_price_wind": 1},
        }
    },
)
def change_in_market_share_wind():
    """
    Change in wind energy market share due to price competitiveness.
    """
    return _integ_change_in_market_share_wind()


_integ_change_in_market_share_wind = Integ(
    lambda: change_rate_due_to_price_wind(),
    lambda: reference_change_in_market_share_wind()
    * effect_of_price_on_market_share_wind(),
    "_integ_change_in_market_share_wind",
)


@component.add(
    name="Change in Market Share Gas",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_change_in_market_share_gas": 1},
    other_deps={
        "_integ_change_in_market_share_gas": {
            "initial": {
                "reference_change_in_market_share_gas": 1,
                "effect_of_price_on_market_share_gas": 1,
            },
            "step": {"change_rate_due_to_price_gas": 1},
        }
    },
)
def change_in_market_share_gas():
    """
    Change in gas energy market share due to price competitiveness.
    """
    return _integ_change_in_market_share_gas()


_integ_change_in_market_share_gas = Integ(
    lambda: change_rate_due_to_price_gas(),
    lambda: reference_change_in_market_share_gas()
    * effect_of_price_on_market_share_gas(),
    "_integ_change_in_market_share_gas",
)


@component.add(
    name="Effect of Price on Market Share Wind",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "price_competitiveness_factor_wind": 1,
        "price_elasticity_of_demand_wind": 1,
    },
)
def effect_of_price_on_market_share_wind():
    """
    Effect of wind energy price competitiveness on market share.
    """
    return price_competitiveness_factor_wind() ** -price_elasticity_of_demand_wind()


@component.add(
    name="Effect of Price on Market Share Gas",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "price_competitiveness_factor_gas": 1,
        "price_elasticity_of_demand_gas": 1,
    },
)
def effect_of_price_on_market_share_gas():
    """
    Effect of gas energy price competitiveness on market share.
    """
    return price_competitiveness_factor_gas() ** -price_elasticity_of_demand_gas()


@component.add(
    name="Change in Market Share Coal",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_change_in_market_share_coal": 1},
    other_deps={
        "_integ_change_in_market_share_coal": {
            "initial": {
                "reference_change_in_market_share_coal": 1,
                "effect_of_price_on_market_share_coal": 1,
            },
            "step": {"change_rate_due_to_price_coal": 1},
        }
    },
)
def change_in_market_share_coal():
    """
    Change in coal energy market share due to price competitiveness.
    """
    return _integ_change_in_market_share_coal()


_integ_change_in_market_share_coal = Integ(
    lambda: change_rate_due_to_price_coal(),
    lambda: reference_change_in_market_share_coal()
    * effect_of_price_on_market_share_coal(),
    "_integ_change_in_market_share_coal",
)


@component.add(
    name="Time to Average Price Gas",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_price_gas():
    """
    Time to average market gas price.
    """
    return 5


@component.add(
    name="Market Share Coal",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_coal": 1,
        "reference_change_in_total_market_share": 1,
    },
)
def market_share_coal():
    """
    Coal market share among other energy sources.
    """
    return change_in_market_share_coal() / reference_change_in_total_market_share()


@component.add(
    name="Change Rate Due to Price Oil",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_change_in_market_share_oil": 1,
        "effect_of_price_on_market_share_oil": 1,
        "change_in_market_share_oil": 1,
        "time_to_adjust_market_share": 1,
    },
)
def change_rate_due_to_price_oil():
    """
    Ratio of change in oil energy market share.
    """
    return (
        reference_change_in_market_share_oil() * effect_of_price_on_market_share_oil()
        - change_in_market_share_oil()
    ) / time_to_adjust_market_share()


@component.add(
    name="Number of Energy Sources",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def number_of_energy_sources():
    """
    Number of various energy sources to average energy price.
    """
    return 6


@component.add(
    name="Change in Market Share Oil",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_change_in_market_share_oil": 1},
    other_deps={
        "_integ_change_in_market_share_oil": {
            "initial": {
                "reference_change_in_market_share_oil": 1,
                "effect_of_price_on_market_share_oil": 1,
            },
            "step": {"change_rate_due_to_price_oil": 1},
        }
    },
)
def change_in_market_share_oil():
    """
    Change in oil energy market share due to price competitiveness.
    """
    return _integ_change_in_market_share_oil()


_integ_change_in_market_share_oil = Integ(
    lambda: change_rate_due_to_price_oil(),
    lambda: reference_change_in_market_share_oil()
    * effect_of_price_on_market_share_oil(),
    "_integ_change_in_market_share_oil",
)


@component.add(
    name="Time to Average Price Coal",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_price_coal():
    """
    Time to average market coal price.
    """
    return 5


@component.add(
    name="Market Share Gas",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_gas": 1,
        "reference_change_in_total_market_share": 1,
    },
)
def market_share_gas():
    """
    Gas market share among other energy sources.
    """
    return change_in_market_share_gas() / reference_change_in_total_market_share()


@component.add(
    name="Market Share Oil",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "change_in_market_share_oil": 1,
        "reference_change_in_total_market_share": 1,
    },
)
def market_share_oil():
    """
    Oil market share among other energy sources.
    """
    return change_in_market_share_oil() / reference_change_in_total_market_share()


@component.add(
    name="Reference Other Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_other_technology_baseline": 2,
        "reference_other_technology_variation": 1,
        "time": 1,
        "current_year": 2,
        "year2100": 2,
    },
)
def reference_other_technology():
    """
    Reference factor productivity in other than energy sectors.
    """
    return reference_other_technology_baseline() + ramp(
        __data["time"],
        (reference_other_technology_variation() - reference_other_technology_baseline())
        / (year2100() - current_year()),
        current_year(),
        year2100(),
    )


@component.add(
    name="OLDReference Economy Output",
    units="$/Year",
    subscripts=["Gender", "WorkingAge", "Labor force type"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oldoutput_in_1900": 1,
        "oldtechnology": 1,
        "oldcapital_elasticity_output": 2,
        "oldinit_capital": 1,
        "indicative_labor_force_participation_fraction": 1,
        "initial_labor_force": 1,
        "labor_force": 1,
        "oldcapital": 1,
    },
)
def oldreference_economy_output():
    """
    Reference Output before effects of climate damage and emissions abatement are considered. Calculated as Cobb-Douglas functional form of production functions.
    """
    return (
        oldoutput_in_1900()
        * oldtechnology()
        * (
            (oldcapital() / oldinit_capital()) ** oldcapital_elasticity_output()
            * labor_force()
            / initial_labor_force()
            * indicative_labor_force_participation_fraction()
        )
        ** (1 - oldcapital_elasticity_output())
    )


@component.add(
    name="OLDGross World Product",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oldreference_economy_output": 1,
        "net_climate_change_impact_on_economy": 1,
        "impact_of_biodiversity_on_economy": 1,
    },
)
def oldgross_world_product():
    """
    Gross World Product taking into account climate change impact. Source of historical data: http://www.ggdc.net/MADDISON/oriindex.htm
    """
    return (
        sum(
            oldreference_economy_output().rename(
                {
                    "Gender": "Gender!",
                    "WorkingAge": "WorkingAge!",
                    "Labor force type": "Labor force type!",
                }
            ),
            dim=["Gender!", "WorkingAge!", "Labor force type!"],
        )
        * net_climate_change_impact_on_economy()
        * impact_of_biodiversity_on_economy()
    )


@component.add(
    name="OLDGWP Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oldgross_world_product": 1, "oldoutput_in_1900": 1},
)
def oldgwp_ratio():
    """
    Gross World Product compared to Output in 1900 as a reference indicator.
    """
    return oldgross_world_product() / oldoutput_in_1900()


@component.add(
    name="OLDGWP per Capita",
    units="$/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oldgross_world_product": 1, "population": 1},
)
def oldgwp_per_capita():
    """
    Gross World Product per Capita. Source of historical data: http://www.ggdc.net/MADDISON/oriindex.htm
    """
    return oldgross_world_product() / population()


@component.add(
    name="Other Technology Inflection Point",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"other_technology_inflection_point_variation": 1, "time": 1},
)
def other_technology_inflection_point():
    """
    Parameter determining inflection point of reference factor productivity in other than energy sectors.
    """
    return 100 + step(
        __data["time"], other_technology_inflection_point_variation() - 100, 2020
    )


@component.add(
    name="Other Technologies",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "reference_other_technology": 1,
        "time": 1,
        "year_period": 1,
        "initial_time": 1,
        "other_technology_inflection_point": 2,
        "other_technology_steepness": 3,
    },
)
def other_technologies():
    """
    Factor productivity in other than energy sectors.
    """
    return reference_other_technology() * (
        1
        - other_technology_inflection_point() ** other_technology_steepness()
        / (
            other_technology_inflection_point() ** other_technology_steepness()
            + ((time() - initial_time()) / year_period())
            ** other_technology_steepness()
        )
    )


@component.add(
    name="Other Technology Steepness",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"variable16_technology": 1},
)
def other_technology_steepness():
    """
    Parameter determining intensity of reference factor productivity in other than energy sectors.
    """
    return variable16_technology()


@component.add(
    name="GDP per Capita GLOBIOM usd",
    units="$/(Year*Person)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gwp_per_capita": 1},
)
def gdp_per_capita_globiom_usd():
    """
    Projection of GDP per Capita according to GLOBIOM model. Source of projection data: GLOBIOM model, IIASA.
    """
    return gwp_per_capita()


@component.add(
    name="Impact of Biodiversity on Economy",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "min_impact_of_biodiversity_on_economy": 2,
        "mean_species_abundance": 1,
        "max_impact_of_biodiversity_on_economy": 1,
        "init_species_abundance": 1,
    },
)
def impact_of_biodiversity_on_economy():
    """
    The fraction of ecomomy output loss due to changes in biodiversity.
    """
    return min_impact_of_biodiversity_on_economy() + (
        max_impact_of_biodiversity_on_economy()
        - min_impact_of_biodiversity_on_economy()
    ) * (mean_species_abundance() / init_species_abundance())


@component.add(
    name="Min Impact of Biodiversity on Economy",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def min_impact_of_biodiversity_on_economy():
    """
    Scaling factor indicating minimal impact of changes in biodiversity on economy output.
    """
    return 0.98


@component.add(
    name="Max Impact of Biodiversity on Economy",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def max_impact_of_biodiversity_on_economy():
    """
    Scaling factor indicating maximum impact of changes in biodiversity on economy output.
    """
    return 1


@component.add(
    name="Current to Max Other Capital",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "other_capital_change_ratio": 1,
        "reference_other_capital_change": 1,
        "other_capital_change": 1,
    },
)
def current_to_max_other_capital():
    """
    Adjustment of current to reference other capital change.
    """
    return other_capital_change_ratio() * (
        1 - other_capital_change() / reference_other_capital_change()
    )


@component.add(
    name="Other Capital Change",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_other_capital_change": 1},
    other_deps={
        "_integ_other_capital_change": {
            "initial": {"init_other_capital_change": 1},
            "step": {"net_change_in_other_capital": 1},
        }
    },
)
def other_capital_change():
    """
    Capital change from other sector.
    """
    return _integ_other_capital_change()


_integ_other_capital_change = Integ(
    lambda: net_change_in_other_capital(),
    lambda: init_other_capital_change(),
    "_integ_other_capital_change",
)


@component.add(
    name="Other Capital Change Ratio",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def other_capital_change_ratio():
    """
    Strength of adjustment of current to reference capital change related to sectors other than energy.
    """
    return 0.77


@component.add(
    name="INIT Other Capital Change",
    units="$/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_other_capital_change():
    """
    Inital capital in other sectors.
    """
    return 40000000000.0


@component.add(
    name="Time to Adjust Other Capital",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_adjust_other_capital():
    """
    Time required to adjust capital changes in sectors other than energy.
    """
    return 20


@component.add(
    name="Net Change in Other Capital",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "other_capital_change": 1,
        "current_to_max_other_capital": 1,
        "time_to_adjust_other_capital": 1,
    },
)
def net_change_in_other_capital():
    """
    Adjustment of capital changes in sectors other than energy.
    """
    return (
        other_capital_change()
        * current_to_max_other_capital()
        / time_to_adjust_other_capital()
    )


@component.add(
    name="Reference Other Capital Change",
    units="$/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def reference_other_capital_change():
    """
    Reference other capital change than from energy sector.
    """
    return 1000000000000000.0


@component.add(
    name="OLDNet Capital Change",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"net_energy_capital_change": 1, "other_capital_change": 1},
)
def oldnet_capital_change():
    """
    Net capital change.
    """
    return net_energy_capital_change() + other_capital_change()


@component.add(
    name="OLDTechnology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_technology": 1, "other_technologies": 1},
)
def oldtechnology():
    """
    Total factor productivity.
    """
    return energy_technology() + other_technologies()


@component.add(
    name="OLDNet Capital Change Rate",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oldnet_capital_change": 1},
)
def oldnet_capital_change_rate():
    """
    Net Capital Stock change rate.
    """
    return oldnet_capital_change()


@component.add(
    name="Net Energy Capital Change",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_exploration": 1,
        "investment_in_oil_production": 1,
        "investment_in_oil_technology": 1,
        "investment_in_coal_exploration": 1,
        "investment_in_coal_production": 1,
        "investment_in_coal_technology": 1,
        "investment_in_gas_exploration": 1,
        "investment_in_gas_production": 1,
        "investment_in_gas_technology": 1,
        "investment_in_biomass_capacity": 1,
        "investment_in_biomass_energy_technology": 1,
        "investment_in_solar_capacity": 1,
        "investment_in_solar_energy_technology": 1,
        "investment_in_wind_capacity": 1,
        "investment_in_wind_energy_technology": 1,
    },
)
def net_energy_capital_change():
    """
    Capital change from energy sector.
    """
    return (
        investment_in_oil_exploration()
        + investment_in_oil_production()
        + investment_in_oil_technology()
        + investment_in_coal_exploration()
        + investment_in_coal_production()
        + investment_in_coal_technology()
        + investment_in_gas_exploration()
        + investment_in_gas_production()
        + investment_in_gas_technology()
        + investment_in_biomass_capacity()
        + investment_in_biomass_energy_technology()
        + investment_in_solar_capacity()
        + investment_in_solar_energy_technology()
        + investment_in_wind_capacity()
        + investment_in_wind_energy_technology()
    )


@component.add(
    name="Energy Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oil_technology": 1,
        "coal_technology": 1,
        "gas_technology": 1,
        "biomass_technology": 1,
        "solar_technology": 1,
        "wind_technology": 1,
    },
)
def energy_technology():
    """
    Factor productivity in energy sector.
    """
    return (
        oil_technology()
        + coal_technology()
        + gas_technology()
        + biomass_technology()
        + solar_technology()
        + wind_technology()
    )


@component.add(
    name="Biomass Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "biomass_capacity_factor": 1,
        "maxbcf": 1,
        "maxbie": 1,
        "biomass_installation_efficiency": 1,
    },
)
def biomass_technology():
    """
    Factor productivity in Biomass energy sector.
    """
    return (
        biomass_capacity_factor() / maxbcf()
        + biomass_installation_efficiency() / maxbie()
    ) / 2


@component.add(
    name="Gas Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gas_fraction_discoverable": 1,
        "maxgfd": 1,
        "gas_fraction_recoverable": 1,
        "maxgfr": 1,
    },
)
def gas_technology():
    """
    Factor productivity in Gas energy sector.
    """
    return (
        gas_fraction_discoverable() / maxgfd() + gas_fraction_recoverable() / maxgfr()
    ) / 2


@component.add(
    name="OLDCapital",
    units="$",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_oldcapital": 1},
    other_deps={
        "_integ_oldcapital": {
            "initial": {"oldinit_capital": 1},
            "step": {"oldnet_capital_change_rate": 1},
        }
    },
)
def oldcapital():
    """
    Capital stock. Source of historical data: http://www.ggdc.net/MADDISON/oriindex.htm
    """
    return _integ_oldcapital()


_integ_oldcapital = Integ(
    lambda: oldnet_capital_change_rate(), lambda: oldinit_capital(), "_integ_oldcapital"
)


@component.add(
    name="OLDCapital Elasticity Output",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def oldcapital_elasticity_output():
    """
    Capital Elasticity of Output.
    """
    return 0.35


@component.add(
    name="Coal Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coal_fraction_discoverable": 1,
        "maxcfd": 1,
        "coal_fraction_recoverable": 1,
        "maxcfr": 1,
    },
)
def coal_technology():
    """
    Factor productivity in Coal energy sector.
    """
    return (
        coal_fraction_discoverable() / maxcfd() + coal_fraction_recoverable() / maxcfr()
    ) / 2


@component.add(
    name="OLDOutput in 1900",
    units="$/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def oldoutput_in_1900():
    """
    Economy output in 1900.
    """
    return 1300000000000.0


@component.add(
    name="Wind Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "wind_capacity_factor": 1,
        "maxwcf": 1,
        "wind_installation_efficiency": 1,
        "maxwie": 1,
    },
)
def wind_technology():
    """
    Factor productivity in Wind energy sector.
    """
    return (
        wind_capacity_factor() / maxwcf() + wind_installation_efficiency() / maxwie()
    ) / 2


@component.add(
    name="OLDINIT Capital", units="$", comp_type="Constant", comp_subtype="Normal"
)
def oldinit_capital():
    """
    Initial Capital Stock.
    """
    return 1300000000000.0


@component.add(
    name="Oil Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oil_fraction_discoverable": 1,
        "maxofd": 1,
        "oil_fraction_recoverable": 1,
        "maxofr": 1,
    },
)
def oil_technology():
    """
    Factor productivity in Oil energy sector.
    """
    return (
        oil_fraction_discoverable() / maxofd() + oil_fraction_recoverable() / maxofr()
    ) / 2


@component.add(
    name="Solar Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "solar_conversion_efficiency": 1,
        "maxsce": 1,
        "maxsie": 1,
        "solar_installation_efficiency": 1,
    },
)
def solar_technology():
    """
    Factor productivity in Solar energy sector.
    """
    return (
        solar_conversion_efficiency() / maxsce()
        + solar_installation_efficiency() / maxsie()
    ) / 2


@component.add(
    name="Investment in Gas Production Delay",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"ig_var_s": 1, "_smooth_investment_in_gas_production_delay": 1},
    other_deps={
        "_smooth_investment_in_gas_production_delay": {
            "initial": {
                "investment_in_gas_exploration_and_production_delay_variation": 1,
                "ig_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "investment_in_gas_exploration_and_production_delay_variation": 1,
                "ig_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def investment_in_gas_production_delay():
    """
    Time delay to make investments in gas production effective.
    """
    return ig_var_s() + _smooth_investment_in_gas_production_delay()


_smooth_investment_in_gas_production_delay = Smooth(
    lambda: step(
        __data["time"],
        investment_in_gas_exploration_and_production_delay_variation() - ig_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        investment_in_gas_exploration_and_production_delay_variation() - ig_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_investment_in_gas_production_delay",
)


@component.add(
    name="Productivity of Investment in Gas Production",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_gas_production_to_exploration": 1,
        "gas_productivity_of_investment": 1,
    },
)
def productivity_of_investment_in_gas_production():
    """
    Parameter indicating the amount of gas resources possible to be recovered per unit investment spent.
    """
    return (
        relative_productivity_of_investment_in_gas_production_to_exploration()
        * gas_productivity_of_investment()
    )


@component.add(
    name="Effect of Gas Demand and Supply on Price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "sg_init": 1,
        "potential_gas_production": 1,
        "total_gas_demand": 1,
        "sensitivity_of_gas_price_to_supply_and_demand": 1,
    },
)
def effect_of_gas_demand_and_supply_on_price():
    """
    Effect of Gas Demand and Supply ratio on actual gas price.
    """
    return (
        sg_init()
        * (total_gas_demand() / potential_gas_production())
        ** sensitivity_of_gas_price_to_supply_and_demand()
    )


@component.add(
    name="Investment in Gas Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_of_gas_revenues_invested_in_technology": 1, "gas_revenue": 1},
)
def investment_in_gas_technology():
    """
    Investments in development of gas exploration and production technology.
    """
    return fraction_of_gas_revenues_invested_in_technology() * gas_revenue()


@component.add(
    name="Productivity of Investment in Gas Exploration",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_gas_exploration": 1,
        "effect_of_technology_on_gas_discoveries": 1,
    },
)
def productivity_of_investment_in_gas_exploration():
    """
    Parameter indicating the amount of gas resources possible to be explored per unit investment spent.
    """
    return float(
        np.maximum(
            0,
            relative_productivity_of_investment_in_gas_exploration()
            * effect_of_technology_on_gas_discoveries(),
        )
    )


@component.add(
    name="Increase in Ratio of Gas Fraction Recoverable to Unrecoverable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irgfrulv3": 1},
)
def increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable():
    """
    Increase in Ratio of Gas Fraction Recoverable to Unrecoverable due to investments in recovery technology and their productivity.
    """
    return outflow_irgfrulv3()


@component.add(
    name="Increase in Ratio of Gas Fraction Discoverable to Undiscoverable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irgfdulv3": 1},
)
def increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable():
    """
    Increase in Ratio of Gas Fraction Discoverable to Undiscoverable due to investments in discovery technology and their productivity.
    """
    return outflow_irgfdulv3()


@component.add(
    name="Unit Cost of Gas Production",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_gas_production": 1,
        "toe_per_mtoe": 1,
        "carbon_price": 1,
        "co2_intensity_of_fuels": 1,
        "climate_policy_scenario": 1,
    },
)
def unit_cost_of_gas_production():
    """
    Unit cost of gas production.
    """
    return (
        1 / productivity_of_investment_in_gas_production() * toe_per_mtoe()
        + climate_policy_scenario()
        * float(co2_intensity_of_fuels().loc["Gas"])
        * carbon_price()
    )


@component.add(
    name="Unit Cost of Gas Exploration",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_unit_cost_of_gas_exploration": 1,
        "toe_per_mtoe": 1,
        "productivity_of_investment_in_gas_exploration": 2,
    },
)
def unit_cost_of_gas_exploration():
    """
    Unit cost of gas exploration. Depends on remaining undiscovered gas resources and advances in exploration technologies.
    """
    return float(
        np.minimum(
            max_unit_cost_of_gas_exploration(),
            if_then_else(
                productivity_of_investment_in_gas_exploration() == 0,
                lambda: 0,
                lambda: 1
                / productivity_of_investment_in_gas_exploration()
                * toe_per_mtoe(),
            ),
        )
    )


@component.add(
    name="INIT UGRN",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "initial_world_stock_of_gas_billion_cubic_meter": 1,
        "mtoe_per_billion_cubic_meter": 1,
    },
)
def init_ugrn():
    """
    Initial amount of Undiscovered Gas Resources.
    """
    return (
        initial_world_stock_of_gas_billion_cubic_meter()
        * mtoe_per_billion_cubic_meter()
    )


@component.add(
    name="Undiscovered Gas Resources",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_undiscovered_gas_resources": 1},
    other_deps={
        "_integ_undiscovered_gas_resources": {
            "initial": {"init_ugrn": 1},
            "step": {"rate_of_new_discovery_gas": 1, "gas_exploration": 1},
        }
    },
)
def undiscovered_gas_resources():
    """
    Existing Gas Resources but not discovered yet.
    """
    return _integ_undiscovered_gas_resources()


_integ_undiscovered_gas_resources = Integ(
    lambda: rate_of_new_discovery_gas() - gas_exploration(),
    lambda: init_ugrn(),
    "_integ_undiscovered_gas_resources",
)


@component.add(
    name="Fraction of Gas Revenues Invested in Technology",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "fg_var_s": 1,
        "_smooth_fraction_of_gas_revenues_invested_in_technology": 1,
    },
    other_deps={
        "_smooth_fraction_of_gas_revenues_invested_in_technology": {
            "initial": {
                "fraction_of_gas_revenues_invested_in_technology_variation": 1,
                "fg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "fraction_of_gas_revenues_invested_in_technology_variation": 1,
                "fg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def fraction_of_gas_revenues_invested_in_technology():
    """
    Percentage of total gas sector revenue dedicated to exploration and production technology development.
    """
    return fg_var_s() + _smooth_fraction_of_gas_revenues_invested_in_technology()


_smooth_fraction_of_gas_revenues_invested_in_technology = Smooth(
    lambda: step(
        __data["time"],
        fraction_of_gas_revenues_invested_in_technology_variation() - fg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        fraction_of_gas_revenues_invested_in_technology_variation() - fg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_fraction_of_gas_revenues_invested_in_technology",
)


@component.add(
    name="Effectiveness of Investment in Gas Recovery Technology",
    units="1/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "eigr_var_s": 1,
        "_smooth_effectiveness_of_investment_in_gas_recovery_technology": 1,
    },
    other_deps={
        "_smooth_effectiveness_of_investment_in_gas_recovery_technology": {
            "initial": {
                "effectiveness_of_investment_in_gas_recovery_technology_variation": 1,
                "eigr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "effectiveness_of_investment_in_gas_recovery_technology_variation": 1,
                "eigr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def effectiveness_of_investment_in_gas_recovery_technology():
    """
    Effectiveness of resources dedicated to gas recovery technology development.
    """
    return (
        eigr_var_s() + _smooth_effectiveness_of_investment_in_gas_recovery_technology()
    )


_smooth_effectiveness_of_investment_in_gas_recovery_technology = Smooth(
    lambda: step(
        __data["time"],
        effectiveness_of_investment_in_gas_recovery_technology_variation()
        - eigr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        effectiveness_of_investment_in_gas_recovery_technology_variation()
        - eigr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_effectiveness_of_investment_in_gas_recovery_technology",
)


@component.add(
    name="Effectiveness of Investment in Gas Discovery Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_gas_discovery_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_gas_discovery_technology():
    """
    Effectiveness of resources dedicated to gas discovery technology development.
    """
    return 1.86e-09 + step(
        __data["time"],
        effectiveness_of_investment_in_gas_discovery_technology_variation() - 1.86e-09,
        2020,
    )


@component.add(
    name="Relative Productivity of Investment in Gas Exploration",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_gas_exploration_variation": 1,
        "time": 1,
    },
)
def relative_productivity_of_investment_in_gas_exploration():
    """
    Relative Productivity of Investment in Gas Exploration without taking into account remaining undiscovered gas resources and advances in exploration technologies.
    """
    return 0.1 + step(
        __data["time"],
        relative_productivity_of_investment_in_gas_exploration_variation() - 0.1,
        2020,
    )


@component.add(
    name="Sensitivity of Gas Price to Supply and Demand",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "sg_var_s": 1,
        "_smooth_sensitivity_of_gas_price_to_supply_and_demand": 1,
    },
    other_deps={
        "_smooth_sensitivity_of_gas_price_to_supply_and_demand": {
            "initial": {
                "sensitivity_of_gas_price_to_supply_and_demand_variation": 1,
                "sg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "sensitivity_of_gas_price_to_supply_and_demand_variation": 1,
                "sg_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def sensitivity_of_gas_price_to_supply_and_demand():
    """
    Sensitivity of Gas Price to Supply and Demand ratio.
    """
    return sg_var_s() + _smooth_sensitivity_of_gas_price_to_supply_and_demand()


_smooth_sensitivity_of_gas_price_to_supply_and_demand = Smooth(
    lambda: step(
        __data["time"],
        sensitivity_of_gas_price_to_supply_and_demand_variation() - sg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        sensitivity_of_gas_price_to_supply_and_demand_variation() - sg_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_sensitivity_of_gas_price_to_supply_and_demand",
)


@component.add(
    name="Gas Discovery Technology Development Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"gdr_var_s": 1, "_smooth_gas_discovery_technology_development_time": 1},
    other_deps={
        "_smooth_gas_discovery_technology_development_time": {
            "initial": {
                "gas_discovery_and_recovery_technology_development_time_variation": 1,
                "gdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "gas_discovery_and_recovery_technology_development_time_variation": 1,
                "gdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def gas_discovery_technology_development_time():
    """
    Average time required to turn investments into concrete gas discovery developments.
    """
    return gdr_var_s() + _smooth_gas_discovery_technology_development_time()


_smooth_gas_discovery_technology_development_time = Smooth(
    lambda: step(
        __data["time"],
        gas_discovery_and_recovery_technology_development_time_variation()
        - gdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        gas_discovery_and_recovery_technology_development_time_variation()
        - gdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_gas_discovery_technology_development_time",
)


@component.add(
    name="Max Unit Cost of Gas Exploration",
    units="$/Mtoe",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"mfc_var_s": 1, "_smooth_max_unit_cost_of_gas_exploration": 1},
    other_deps={
        "_smooth_max_unit_cost_of_gas_exploration": {
            "initial": {
                "max_unit_cost_of_fossil_fuel_exploration_variation": 1,
                "mfc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "max_unit_cost_of_fossil_fuel_exploration_variation": 1,
                "mfc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def max_unit_cost_of_gas_exploration():
    """
    Upper level limit for unit cost of gas exploration.
    """
    return mfc_var_s() + _smooth_max_unit_cost_of_gas_exploration()


_smooth_max_unit_cost_of_gas_exploration = Smooth(
    lambda: step(
        __data["time"],
        max_unit_cost_of_fossil_fuel_exploration_variation() - mfc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        max_unit_cost_of_fossil_fuel_exploration_variation() - mfc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_max_unit_cost_of_gas_exploration",
)


@component.add(
    name="Gas Recovery Technology Development Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"gdr_var_s": 1, "_smooth_gas_recovery_technology_development_time": 1},
    other_deps={
        "_smooth_gas_recovery_technology_development_time": {
            "initial": {
                "gas_discovery_and_recovery_technology_development_time_variation": 1,
                "gdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "gas_discovery_and_recovery_technology_development_time_variation": 1,
                "gdr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def gas_recovery_technology_development_time():
    """
    Average time required to turn investments into concrete gas recovery developments.
    """
    return gdr_var_s() + _smooth_gas_recovery_technology_development_time()


_smooth_gas_recovery_technology_development_time = Smooth(
    lambda: step(
        __data["time"],
        gas_discovery_and_recovery_technology_development_time_variation()
        - gdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        gas_discovery_and_recovery_technology_development_time_variation()
        - gdr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_gas_recovery_technology_development_time",
)


@component.add(
    name="Relative Productivity of Investment in Gas Production to Exploration",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "rpgpe_var_s": 1,
        "_smooth_relative_productivity_of_investment_in_gas_production_to_exploration": 1,
    },
    other_deps={
        "_smooth_relative_productivity_of_investment_in_gas_production_to_exploration": {
            "initial": {
                "relative_productivity_of_investment_in_gas_production_compared_to_exploration_variation": 1,
                "rpgpe_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "relative_productivity_of_investment_in_gas_production_compared_to_exploration_variation": 1,
                "rpgpe_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def relative_productivity_of_investment_in_gas_production_to_exploration():
    """
    Relative Productivity of Investment in Gas Production as a multiplier of Productivity of Investment in Gas Exploration.
    """
    return (
        rpgpe_var_s()
        + _smooth_relative_productivity_of_investment_in_gas_production_to_exploration()
    )


_smooth_relative_productivity_of_investment_in_gas_production_to_exploration = Smooth(
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_gas_production_compared_to_exploration_variation()
        - rpgpe_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_gas_production_compared_to_exploration_variation()
        - rpgpe_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_relative_productivity_of_investment_in_gas_production_to_exploration",
)


@component.add(
    name="Investment in Gas Exploration Delay",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"ig_var_s": 1, "_smooth_investment_in_gas_exploration_delay": 1},
    other_deps={
        "_smooth_investment_in_gas_exploration_delay": {
            "initial": {
                "investment_in_gas_exploration_and_production_delay_variation": 1,
                "ig_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "investment_in_gas_exploration_and_production_delay_variation": 1,
                "ig_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def investment_in_gas_exploration_delay():
    """
    Time delay to make investments in gas exploration effective.
    """
    return ig_var_s() + _smooth_investment_in_gas_exploration_delay()


_smooth_investment_in_gas_exploration_delay = Smooth(
    lambda: step(
        __data["time"],
        investment_in_gas_exploration_and_production_delay_variation() - ig_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        investment_in_gas_exploration_and_production_delay_variation() - ig_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_investment_in_gas_exploration_delay",
)


@component.add(
    name="Potential Gas Exploration",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effective_investment_in_gas_exploration": 1,
        "productivity_of_investment_in_gas_exploration": 1,
        "toe_per_mtoe": 1,
    },
)
def potential_gas_exploration():
    """
    Potential Gas exploration due to available investments in gas resources discovery.
    """
    return (
        effective_investment_in_gas_exploration()
        * productivity_of_investment_in_gas_exploration()
        / toe_per_mtoe()
    )


@component.add(
    name="Desired Investment in Gas Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_gas_production_from_resources": 1,
        "total_gas_demand": 1,
        "productivity_of_investment_in_gas_production": 1,
        "toe_per_mtoe": 1,
    },
)
def desired_investment_in_gas_production():
    """
    Desired Investment in Gas Production due to Total Gas Demand and Productivity of Investment in Gas Production.
    """
    return (
        float(np.minimum(potential_gas_production_from_resources(), total_gas_demand()))
        / productivity_of_investment_in_gas_production()
        * toe_per_mtoe()
    )


@component.add(
    name="Potential Gas Production from Investment",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_gas_production": 1,
        "effective_investment_in_gas_production": 1,
        "toe_per_mtoe": 1,
    },
)
def potential_gas_production_from_investment():
    """
    Potential Gas Production due to available investments in gas resources recovery.
    """
    return (
        productivity_of_investment_in_gas_production()
        * effective_investment_in_gas_production()
        / toe_per_mtoe()
    )


@component.add(
    name="Gas Productivity of Investment",
    units="toe/$",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_gas_productivity_of_investment": 1},
    other_deps={
        "_integ_gas_productivity_of_investment": {
            "initial": {"init_gpi": 1},
            "step": {"change_in_gas_productivity_of_investment": 1},
        }
    },
)
def gas_productivity_of_investment():
    """
    Factor indicating productivity of investments in gas production.
    """
    return _integ_gas_productivity_of_investment()


_integ_gas_productivity_of_investment = Integ(
    lambda: change_in_gas_productivity_of_investment(),
    lambda: init_gpi(),
    "_integ_gas_productivity_of_investment",
)


@component.add(
    name="Change in Gas Productivity of Investment",
    units="toe/(Year*$)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_gas_exploration": 1,
        "gas_productivity_of_investment": 1,
        "gas_production_coverage": 1,
    },
)
def change_in_gas_productivity_of_investment():
    """
    Change in Gas Productivity of Investment.
    """
    return (
        productivity_of_investment_in_gas_exploration()
        - gas_productivity_of_investment()
    ) / gas_production_coverage()


@component.add(
    name="Change in Average Gas Production",
    units="Mtoe/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "gas_production": 1,
        "average_gas_production": 1,
        "time_to_average_gas_production": 1,
    },
)
def change_in_average_gas_production():
    """
    Change in Average Gas Production.
    """
    return (
        gas_production() - average_gas_production()
    ) / time_to_average_gas_production()


@component.add(
    name="Change in Effective Investment in Gas Exploration",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_exploration": 1,
        "effective_investment_in_gas_exploration": 1,
        "investment_in_gas_exploration_delay": 1,
    },
)
def change_in_effective_investment_in_gas_exploration():
    """
    Change in Effective Investment in Gas Exploration.
    """
    return (
        investment_in_gas_exploration() - effective_investment_in_gas_exploration()
    ) / investment_in_gas_exploration_delay()


@component.add(
    name="Change in Effective Investment in Gas Production",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_production": 1,
        "effective_investment_in_gas_production": 1,
        "investment_in_gas_production_delay": 1,
    },
)
def change_in_effective_investment_in_gas_production():
    """
    Change in Effective Investment in Gas Production.
    """
    return (
        investment_in_gas_production() - effective_investment_in_gas_production()
    ) / investment_in_gas_production_delay()


@component.add(
    name="Effective Investment in Gas Production",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_effective_investment_in_gas_production": 1},
    other_deps={
        "_integ_effective_investment_in_gas_production": {
            "initial": {"init_eigp": 1},
            "step": {"change_in_effective_investment_in_gas_production": 1},
        }
    },
)
def effective_investment_in_gas_production():
    """
    Effective investments dedicated for gas resources production.
    """
    return _integ_effective_investment_in_gas_production()


_integ_effective_investment_in_gas_production = Integ(
    lambda: change_in_effective_investment_in_gas_production(),
    lambda: init_eigp(),
    "_integ_effective_investment_in_gas_production",
)


@component.add(
    name="Average Gas Production",
    units="Mtoe/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_gas_production": 1},
    other_deps={
        "_integ_average_gas_production": {
            "initial": {"init_average_gas_production": 1},
            "step": {"change_in_average_gas_production": 1},
        }
    },
)
def average_gas_production():
    """
    Average total gas production per year.
    """
    return _integ_average_gas_production()


_integ_average_gas_production = Integ(
    lambda: change_in_average_gas_production(),
    lambda: init_average_gas_production(),
    "_integ_average_gas_production",
)


@component.add(
    name="Effective Investment in Gas Exploration",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_effective_investment_in_gas_exploration": 1},
    other_deps={
        "_integ_effective_investment_in_gas_exploration": {
            "initial": {"init_eige": 1},
            "step": {"change_in_effective_investment_in_gas_exploration": 1},
        }
    },
)
def effective_investment_in_gas_exploration():
    """
    Effective investments dedicated for gas resources exploration.
    """
    return _integ_effective_investment_in_gas_exploration()


_integ_effective_investment_in_gas_exploration = Integ(
    lambda: change_in_effective_investment_in_gas_exploration(),
    lambda: init_eige(),
    "_integ_effective_investment_in_gas_exploration",
)


@component.add(
    name="Gas Fraction Discoverable",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mingfd": 2,
        "ratio_of_gas_fraction_discoverable_to_undiscoverable": 2,
        "maxgfd": 1,
    },
)
def gas_fraction_discoverable():
    """
    Percentage of gas resources that can be still explored due to current state of discovery technology.
    """
    return mingfd() + (maxgfd() - mingfd()) * (
        ratio_of_gas_fraction_discoverable_to_undiscoverable()
        / (ratio_of_gas_fraction_discoverable_to_undiscoverable() + 1)
    )


@component.add(
    name="Gas Price per MBtu",
    units="$/MBtu",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_price": 1, "mtoe_per_btu": 1},
)
def gas_price_per_mbtu():
    """
    Actual Gas Price per Barrel.
    """
    return gas_price() * mtoe_per_btu()


@component.add(
    name="Mtoe per Btu", units="Mtoe/MBtu", comp_type="Constant", comp_subtype="Normal"
)
def mtoe_per_btu():
    """
    Coefficient to convert million tons of oil equivalent unit (Mtoe) into British thermal unit (Btu).
    """
    return 2.5e-08


@component.add(
    name="Identified Gas Resources",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_identified_gas_resources": 1},
    other_deps={
        "_integ_identified_gas_resources": {
            "initial": {
                "total_gas_demand": 1,
                "normal_gas_production_ratio": 1,
                "gas_fraction_recoverable": 2,
                "cumulative_gas_production": 1,
            },
            "step": {"gas_exploration": 1, "gas_production": 1},
        }
    },
)
def identified_gas_resources():
    """
    Gas Resources discovered thanks to developments in exploration technology.
    """
    return _integ_identified_gas_resources()


_integ_identified_gas_resources = Integ(
    lambda: gas_exploration() - gas_production(),
    lambda: (
        total_gas_demand() * normal_gas_production_ratio()
        + cumulative_gas_production() * (1 - gas_fraction_recoverable())
    )
    / gas_fraction_recoverable(),
    "_integ_identified_gas_resources",
)


@component.add(
    name="Total Gas Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "market_share_gas": 1},
)
def total_gas_demand():
    """
    Total demand for gas resources.
    """
    return energy_demand() * market_share_gas()


@component.add(
    name="Investment in Gas Exploration",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_investment_in_gas_exploration": 1},
)
def investment_in_gas_exploration():
    """
    Amount of resources dedicated to gas exploration.
    """
    return desired_investment_in_gas_exploration()


@component.add(
    name="Indicated Gas Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_cost": 1, "desired_gas_gross_margin": 1},
)
def indicated_gas_price():
    """
    Indicated gas price accounting for exploration and production cost and gross margin.
    """
    return gas_cost() * (1 + desired_gas_gross_margin())


@component.add(
    name="Ratio of Gas Fraction Discoverable to Undiscoverable",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ratio_of_gas_fraction_discoverable_to_undiscoverable": 1},
    other_deps={
        "_integ_ratio_of_gas_fraction_discoverable_to_undiscoverable": {
            "initial": {"init_rgdu": 1},
            "step": {
                "increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable": 1
            },
        }
    },
)
def ratio_of_gas_fraction_discoverable_to_undiscoverable():
    """
    Ratio of Gas Fraction Discoverable to Undiscoverable increased due to investments in discovery technology and their productivity.
    """
    return _integ_ratio_of_gas_fraction_discoverable_to_undiscoverable()


_integ_ratio_of_gas_fraction_discoverable_to_undiscoverable = Integ(
    lambda: increase_in_ratio_of_gas_fraction_discoverable_to_undiscoverable(),
    lambda: init_rgdu(),
    "_integ_ratio_of_gas_fraction_discoverable_to_undiscoverable",
)


@component.add(
    name="Ratio of Gas Fraction Recoverable to Unrecoverable",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ratio_of_gas_fraction_recoverable_to_unrecoverable": 1},
    other_deps={
        "_integ_ratio_of_gas_fraction_recoverable_to_unrecoverable": {
            "initial": {"init_rgru": 1},
            "step": {
                "increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable": 1
            },
        }
    },
)
def ratio_of_gas_fraction_recoverable_to_unrecoverable():
    """
    Ratio of Gas Fraction Recoverable to Unrecoverable increased due to investments in recovery technology and their productivity.
    """
    return _integ_ratio_of_gas_fraction_recoverable_to_unrecoverable()


_integ_ratio_of_gas_fraction_recoverable_to_unrecoverable = Integ(
    lambda: increase_in_ratio_of_gas_fraction_recoverable_to_unrecoverable(),
    lambda: init_rgru(),
    "_integ_ratio_of_gas_fraction_recoverable_to_unrecoverable",
)


@component.add(
    name="Adjustment for Identified Gas Resource",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_identified_gas_resources": 1,
        "identified_gas_resources": 1,
        "identified_gas_resources_adjustment_time": 1,
    },
)
def adjustment_for_identified_gas_resource():
    """
    Adjustment of Identified Gas Resource to the desired level over a specified adjustment time.
    """
    return (
        required_identified_gas_resources() - identified_gas_resources()
    ) / identified_gas_resources_adjustment_time()


@component.add(
    name="INIT RGDU",
    units="Dmnl",
    limits=(0.0, 0.2),
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_rgdu():
    """
    Initial Ratio of Gas Fraction Discoverable to Undiscoverable.
    """
    return 0.15


@component.add(
    name="Desired Investment in Gas Exploration",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_gas_exploration_rate": 1, "unit_cost_of_gas_exploration": 1},
)
def desired_investment_in_gas_exploration():
    """
    Desired amount of resources that need to be invested in order to secure desired gas exploration.
    """
    return desired_gas_exploration_rate() * unit_cost_of_gas_exploration()


@component.add(
    name="INIT CGPN", units="Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def init_cgpn():
    """
    Cumulative Gas Production
    """
    return 0


@component.add(
    name="Gas Exploration",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_exploration_rate": 1},
)
def gas_exploration():
    """
    Gas resources discovery rate.
    """
    return float(np.maximum(0, gas_exploration_rate()))


@component.add(
    name="Gas Fraction Recoverable",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mingfr": 2,
        "maxgfr": 1,
        "ratio_of_gas_fraction_recoverable_to_unrecoverable": 2,
    },
)
def gas_fraction_recoverable():
    """
    Percentage of gas resources that can be produced due to current state of recovery technology.
    """
    return mingfr() + (maxgfr() - mingfr()) * (
        ratio_of_gas_fraction_recoverable_to_unrecoverable()
        / (ratio_of_gas_fraction_recoverable_to_unrecoverable() + 1)
    )


@component.add(
    name="Effect of Technology on Gas Discoveries",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_gas_discoverable_resources": 1, "init_ugrn": 1},
)
def effect_of_technology_on_gas_discoveries():
    """
    Impact of technology development on gas exploration taking into account remaining undiscovered gas resources (the less remaining undiscovered gas resources the more expensive it is to discover them).
    """
    return total_gas_discoverable_resources() / init_ugrn()


@component.add(
    name="Investment in Gas Discovery Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_technology": 1,
        "fraction_invested_in_gas_discovery_technology": 1,
    },
)
def investment_in_gas_discovery_technology():
    """
    Total investments in gas exploration technology.
    """
    return (
        investment_in_gas_technology() * fraction_invested_in_gas_discovery_technology()
    )


@component.add(
    name="Investment in Gas Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_investment_in_gas_production": 1},
)
def investment_in_gas_production():
    """
    Amount of resources dedicated to gas production.
    """
    return desired_investment_in_gas_production()


@component.add(
    name="Investment in Gas Recovery Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_gas_technology": 1,
        "fraction_invested_in_gas_discovery_technology": 1,
    },
)
def investment_in_gas_recovery_technology():
    """
    Total investments in gas production technology.
    """
    return investment_in_gas_technology() * (
        1 - fraction_invested_in_gas_discovery_technology()
    )


@component.add(
    name="Required Identified Gas Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "identified_gas_resources": 1,
        "total_gas_recoverable_resource_remaining": 1,
        "normal_gas_production_ratio": 1,
        "total_gas_demand": 1,
    },
)
def required_identified_gas_resources():
    """
    The desired Identified Gas Resources level sought by the gas sector.
    """
    return (identified_gas_resources() / total_gas_recoverable_resource_remaining()) * (
        normal_gas_production_ratio() * total_gas_demand()
    )


@component.add(
    name="Total Gas Recoverable Resource Remaining",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cumulative_additions_to_gas_production": 1,
        "gas_fraction_recoverable": 1,
        "cumulative_gas_production": 1,
    },
)
def total_gas_recoverable_resource_remaining():
    """
    Total Gas Recoverable Resources Remaining as a percentage of Cumulative Additions to Gas Production. It excludes already produced resources. The percentage is determined by production technology developments.
    """
    return (
        cumulative_additions_to_gas_production() * gas_fraction_recoverable()
        - cumulative_gas_production()
    )


@component.add(
    name="INIT RGRU", units="Dmnl", comp_type="Constant", comp_subtype="Normal"
)
def init_rgru():
    """
    Initial Ratio of Gas Fraction Recoverable to Unrecoverable.
    """
    return 0


@component.add(
    name="Cumulative Additions to Gas Production",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"identified_gas_resources": 1, "cumulative_gas_production": 1},
)
def cumulative_additions_to_gas_production():
    """
    Identified and already produced gas resources.
    """
    return identified_gas_resources() + cumulative_gas_production()


@component.add(name="MAXGFR", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxgfr():
    """
    Maximal possible percentage of gas resources to be recovered.
    """
    return 1


@component.add(name="MINGFD", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def mingfd():
    """
    Initial and minimal possible percentage of gas resources to be discovered.
    """
    return 0.02


@component.add(name="MINGFR", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def mingfr():
    """
    Initial and minimal possible percentage of gas resources to be recovered.
    """
    return 0.008


@component.add(
    name="Desired Gas Gross Margin",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def desired_gas_gross_margin():
    """
    Desired Gross Margin per unit gas resources.
    """
    return 0.2


@component.add(
    name="Table for FIGDT",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_figdt"},
)
def table_for_figdt(x, final_subs=None):
    """
    Table determining order by which technology investments are dedicated to gas exploration and production technologies. For small Gas Fraction Discoverable, in order to make sufficient resources available to be produced, more investments are directed to exploration technologies. Once the Gas Fraction Discoverable increases the investments are redirected to production technologies.
    """
    return _hardcodedlookup_table_for_figdt(x, final_subs)


_hardcodedlookup_table_for_figdt = HardcodedLookups(
    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
    [0.8, 0.8, 0.7, 0.5, 0.2, 0.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_figdt",
)


@component.add(
    name="Gas Shortage",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_gas_demand": 1, "gas_production": 1},
)
def gas_shortage():
    """
    Difference between demand and the gas production rate.
    """
    return total_gas_demand() - gas_production()


@component.add(
    name="Gas Revenue",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_price": 1, "average_gas_production": 1},
)
def gas_revenue():
    """
    Total revenue in gas market.
    """
    return gas_price() * average_gas_production()


@component.add(
    name="Time to Average Gas Production",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_gas_production():
    """
    Time to average total gas production per year.
    """
    return 1


@component.add(
    name="Total Gas Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "undiscovered_gas_resources": 1,
        "cumulative_additions_to_gas_production": 1,
    },
)
def total_gas_resources():
    """
    Total gas resources including Undiscovered Gas Resources, Identified Gas Resources and resources already produced i.e. Cumulative Gas Production.
    """
    return undiscovered_gas_resources() + cumulative_additions_to_gas_production()


@component.add(
    name="Normal Gas Production Ratio",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_gas_production_ratio():
    """
    Safety stock coverage as a number of years of the total gas demand the gas sector would like to maintain in identified gas resources. It secures the market against possibility of unforeseen variations in demand. It is also a stimulus for gas exploration.
    """
    return 5


@component.add(
    name="Gas Cost",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"unit_cost_of_gas_exploration": 1, "unit_cost_of_gas_production": 1},
)
def gas_cost():
    """
    Cost of unit gas resources as a sum of unit exploration and production costs.
    """
    return unit_cost_of_gas_exploration() + unit_cost_of_gas_production()


@component.add(
    name="Gas Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_production_rate": 1},
)
def gas_production():
    """
    Total gas energy production per year. Source of historical data: International Energy Agency – Key World Energy Statistics 2007; BP Statistical Review of World Energy June 2008
    """
    return gas_production_rate()


@component.add(
    name="Gas Demand to Supply Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_gas_demand": 1, "potential_gas_production": 1},
)
def gas_demand_to_supply_ratio():
    """
    Gas Demand to Supply Ratio.
    """
    return total_gas_demand() / potential_gas_production()


@component.add(
    name="Potential Gas Production from Resources",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_gas_recoverable_resource_remaining": 1,
        "normal_gas_production_ratio": 1,
    },
)
def potential_gas_production_from_resources():
    """
    Potential Gas Production rate due to Total Oil Recoverable Resource Remaining adjusted by oil production safety coverage.
    """
    return total_gas_recoverable_resource_remaining() / normal_gas_production_ratio()


@component.add(
    name="Gas Exploration Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_gas_exploration_rate": 1, "potential_gas_exploration": 1},
)
def gas_exploration_rate():
    """
    Gas Exploration Rate accounting for potential and desired gas exploration rates.
    """
    return float(
        np.minimum(desired_gas_exploration_rate(), potential_gas_exploration())
    )


@component.add(name="MAXGFD", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxgfd():
    """
    Maximal possible percentage of gas resources to be discovered.
    """
    return 1


@component.add(
    name="Gas Gross Margin",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_price": 1, "gas_cost": 2},
)
def gas_gross_margin():
    """
    Actual gas gross margin.
    """
    return (gas_price() - gas_cost()) / gas_cost()


@component.add(
    name="Gas Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicated_gas_price": 1,
        "effect_of_gas_demand_and_supply_on_price": 1,
    },
)
def gas_price():
    """
    Actual gas price accounting for indicated gas price and effect of demand and supply.
    """
    return indicated_gas_price() * effect_of_gas_demand_and_supply_on_price()


@component.add(
    name="Potential Gas Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_gas_production_from_investment": 1,
        "potential_gas_production_from_resources": 1,
    },
)
def potential_gas_production():
    """
    Potential Gas Production due to available investments in gas resources recovery and recovery technology.
    """
    return float(
        np.minimum(
            potential_gas_production_from_investment(),
            potential_gas_production_from_resources(),
        )
    )


@component.add(
    name="Total Gas Discoverable Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_gas_resources": 1,
        "gas_fraction_discoverable": 1,
        "cumulative_additions_to_gas_production": 1,
    },
)
def total_gas_discoverable_resources():
    """
    Total Gas Discoverable Resources as a percentage of Total Gas Resources. It excludes identified and already produced resources. The percentage is determined by exploration technology developments.
    """
    return (
        total_gas_resources() * gas_fraction_discoverable()
        - cumulative_additions_to_gas_production()
    )


@component.add(
    name="Gas Production Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_gas_demand": 1, "potential_gas_production": 1},
)
def gas_production_rate():
    """
    Total gas energy production per year due to available resources, developments in production technology and gas energy demand.
    """
    return float(np.minimum(total_gas_demand(), potential_gas_production()))


@component.add(
    name="Cumulative Gas Production",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_gas_production": 1},
    other_deps={
        "_integ_cumulative_gas_production": {
            "initial": {"init_cgpn": 1},
            "step": {"gas_production": 1},
        }
    },
)
def cumulative_gas_production():
    """
    Cumulative Gas resources that has been produced.
    """
    return _integ_cumulative_gas_production()


_integ_cumulative_gas_production = Integ(
    lambda: gas_production(), lambda: init_cgpn(), "_integ_cumulative_gas_production"
)


@component.add(
    name="Desired Gas Exploration Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"adjustment_for_identified_gas_resource": 1, "gas_production": 1},
)
def desired_gas_exploration_rate():
    """
    Desired Gas exploration rate due to Total Gas Demand and Identified Gas Resources safety coverage.
    """
    return float(
        np.maximum(0, adjustment_for_identified_gas_resource() + gas_production())
    )


@component.add(
    name="Identified Gas Resources Adjustment Time",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def identified_gas_resources_adjustment_time():
    """
    Time to adjust Identified Gas Resource to the desired level.
    """
    return 5


@component.add(
    name="Fraction Invested in Gas Discovery Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"gas_fraction_discoverable": 1, "table_for_figdt": 1},
)
def fraction_invested_in_gas_discovery_technology():
    """
    Fraction of investments in gas technology dedicated to discovery technology.
    """
    return table_for_figdt(gas_fraction_discoverable())


@component.add(
    name="Gas Production Coverage",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"identified_gas_resources": 1, "average_gas_production": 1},
)
def gas_production_coverage():
    """
    Ratio indicating gas coverage in years for discovered resources and at the current average gas production.
    """
    return identified_gas_resources() / average_gas_production()


@component.add(
    name="Sensitivity of Oil Price to Supply and Demand",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "so_var_s": 1,
        "_smooth_sensitivity_of_oil_price_to_supply_and_demand": 1,
    },
    other_deps={
        "_smooth_sensitivity_of_oil_price_to_supply_and_demand": {
            "initial": {
                "sensitivity_of_oil_price_to_supply_and_demand_variation": 1,
                "so_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "sensitivity_of_oil_price_to_supply_and_demand_variation": 1,
                "so_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_demand_variation_time": 1,
            },
        }
    },
)
def sensitivity_of_oil_price_to_supply_and_demand():
    """
    Sensitivity of Oil Price to Supply and Demand ratio.
    """
    return so_var_s() + _smooth_sensitivity_of_oil_price_to_supply_and_demand()


_smooth_sensitivity_of_oil_price_to_supply_and_demand = Smooth(
    lambda: step(
        __data["time"],
        sensitivity_of_oil_price_to_supply_and_demand_variation() - so_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_demand_variation_time(),
    lambda: step(
        __data["time"],
        sensitivity_of_oil_price_to_supply_and_demand_variation() - so_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_sensitivity_of_oil_price_to_supply_and_demand",
)


@component.add(
    name="Effect of Technology on Oil Discoveries",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_oil_discoverable_resources": 1, "init_uorn": 1},
)
def effect_of_technology_on_oil_discoveries():
    """
    Impact of technology development on oil exploration taking into account remaining undiscovered oil resources (the less remaining undiscovered oil resources the more expensive it to discover them).
    """
    return total_oil_discoverable_resources() / init_uorn()


@component.add(
    name="Investment in Oil Production Delay",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"io_var_s": 1, "_smooth_investment_in_oil_production_delay": 1},
    other_deps={
        "_smooth_investment_in_oil_production_delay": {
            "initial": {
                "investment_in_oil_exploration_and_production_delay_variation": 1,
                "io_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "investment_in_oil_exploration_and_production_delay_variation": 1,
                "io_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def investment_in_oil_production_delay():
    """
    Time delay to make investments in oil production effective.
    """
    return io_var_s() + _smooth_investment_in_oil_production_delay()


_smooth_investment_in_oil_production_delay = Smooth(
    lambda: step(
        __data["time"],
        investment_in_oil_exploration_and_production_delay_variation() - io_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        investment_in_oil_exploration_and_production_delay_variation() - io_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_investment_in_oil_production_delay",
)


@component.add(
    name="Increase in Ratio of Oil Fraction Discoverable to Undiscoverable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irofdulv3": 1},
)
def increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable():
    """
    Increase in Ratio of Oil Fraction Discoverable to Undiscoverable due to investments in discovery technology and their productivity.
    """
    return outflow_irofdulv3()


@component.add(
    name="Increase in Ratio of Oil Fraction Recoverable to Unrecoverable",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"outflow_irofrulv3": 1},
)
def increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable():
    """
    Increase in Ratio of Oil Fraction Recoverable to Unrecoverable due to investments in recovery technology and their productivity.
    """
    return outflow_irofrulv3()


@component.add(
    name="Effect of Oil Demand and Supply on Price",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "so_init": 1,
        "potential_oil_production": 1,
        "total_oil_demand": 1,
        "sensitivity_of_oil_price_to_supply_and_demand": 1,
    },
)
def effect_of_oil_demand_and_supply_on_price():
    """
    Effect of Oil Demand and Supply ratio on actual oil price.
    """
    return (
        so_init()
        * (total_oil_demand() / potential_oil_production())
        ** sensitivity_of_oil_price_to_supply_and_demand()
    )


@component.add(
    name="Unit Cost of Oil Exploration",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "max_unit_cost_of_oil_exploration": 1,
        "toe_per_mtoe": 1,
        "productivity_of_investment_in_oil_exploration": 2,
    },
)
def unit_cost_of_oil_exploration():
    """
    Unit cost of oil exploration. Depends on remaining undiscovered oil resources and advances in exploration technologies.
    """
    return float(
        np.minimum(
            max_unit_cost_of_oil_exploration(),
            if_then_else(
                productivity_of_investment_in_oil_exploration() == 0,
                lambda: 0,
                lambda: 1
                / productivity_of_investment_in_oil_exploration()
                * toe_per_mtoe(),
            ),
        )
    )


@component.add(
    name="Change in Effective Investment in Oil Production",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_production": 1,
        "effective_investment_in_oil_production": 1,
        "investment_in_oil_production_delay": 1,
    },
)
def change_in_effective_investment_in_oil_production():
    """
    Change in Effective Investment in Oil Production.
    """
    return (
        investment_in_oil_production() - effective_investment_in_oil_production()
    ) / investment_in_oil_production_delay()


@component.add(
    name="Change in Effective Investment in Oil Exploration",
    units="$/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_exploration": 1,
        "effective_investment_in_oil_exploration": 1,
        "investment_in_oil_exploration_delay": 1,
    },
)
def change_in_effective_investment_in_oil_exploration():
    """
    Change in Effective Investment in Oil Exploration.
    """
    return (
        investment_in_oil_exploration() - effective_investment_in_oil_exploration()
    ) / investment_in_oil_exploration_delay()


@component.add(
    name="Investment in Oil Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fraction_of_oil_revenues_invested_in_technology": 1, "oil_revenue": 1},
)
def investment_in_oil_technology():
    """
    Investments in development of exploration and production technology.
    """
    return fraction_of_oil_revenues_invested_in_technology() * oil_revenue()


@component.add(
    name="Productivity of Investment in Oil Production",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_oil_production_compared_to_exploration": 1,
        "oil_productivity_of_investment": 1,
    },
)
def productivity_of_investment_in_oil_production():
    """
    Parameter indicating the amount of oil resources possible to be recovered per unit investment spent.
    """
    return (
        relative_productivity_of_investment_in_oil_production_compared_to_exploration()
        * oil_productivity_of_investment()
    )


@component.add(
    name="Productivity of Investment in Oil Exploration",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_oil_exploration": 1,
        "effect_of_technology_on_oil_discoveries": 1,
    },
)
def productivity_of_investment_in_oil_exploration():
    """
    Parameter indicating the amount of oil resources possible to be explored per unit investment spent.
    """
    return float(
        np.maximum(
            0,
            relative_productivity_of_investment_in_oil_exploration()
            * effect_of_technology_on_oil_discoveries(),
        )
    )


@component.add(
    name="Unit Cost of Oil Production",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_oil_production": 1,
        "toe_per_mtoe": 1,
        "carbon_price": 1,
        "co2_intensity_of_fuels": 1,
        "climate_policy_scenario": 1,
    },
)
def unit_cost_of_oil_production():
    """
    Unit cost of oil production.
    """
    return (
        1 / productivity_of_investment_in_oil_production() * toe_per_mtoe()
        + climate_policy_scenario()
        * float(co2_intensity_of_fuels().loc["Oil"])
        * carbon_price()
    )


@component.add(
    name="INIT UORN",
    units="Mtoe",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_uorn():
    """
    Initial amount of Undiscovered Oil Resources.
    """
    return 500000


@component.add(
    name="Undiscovered Oil Resources",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_undiscovered_oil_resources": 1},
    other_deps={
        "_integ_undiscovered_oil_resources": {
            "initial": {"init_uorn": 1},
            "step": {"rate_of_new_discovery_oil": 1, "oil_exploration": 1},
        }
    },
)
def undiscovered_oil_resources():
    """
    Existing Oil Resources but not discovered yet.
    """
    return _integ_undiscovered_oil_resources()


_integ_undiscovered_oil_resources = Integ(
    lambda: rate_of_new_discovery_oil() - oil_exploration(),
    lambda: init_uorn(),
    "_integ_undiscovered_oil_resources",
)


@component.add(
    name="Fraction of Oil Revenues Invested in Technology",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "fo_var_s": 1,
        "_smooth_fraction_of_oil_revenues_invested_in_technology": 1,
    },
    other_deps={
        "_smooth_fraction_of_oil_revenues_invested_in_technology": {
            "initial": {
                "fraction_of_oil_revenues_invested_in_technology_variation": 1,
                "fo_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "fraction_of_oil_revenues_invested_in_technology_variation": 1,
                "fo_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def fraction_of_oil_revenues_invested_in_technology():
    """
    Percentage of total oil sector revenue dedicated to exploration and production technology development.
    """
    return fo_var_s() + _smooth_fraction_of_oil_revenues_invested_in_technology()


_smooth_fraction_of_oil_revenues_invested_in_technology = Smooth(
    lambda: step(
        __data["time"],
        fraction_of_oil_revenues_invested_in_technology_variation() - fo_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        fraction_of_oil_revenues_invested_in_technology_variation() - fo_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_fraction_of_oil_revenues_invested_in_technology",
)


@component.add(
    name="Investment in Oil Exploration Delay",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"io_var_s": 1, "_smooth_investment_in_oil_exploration_delay": 1},
    other_deps={
        "_smooth_investment_in_oil_exploration_delay": {
            "initial": {
                "investment_in_oil_exploration_and_production_delay_variation": 1,
                "io_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "investment_in_oil_exploration_and_production_delay_variation": 1,
                "io_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def investment_in_oil_exploration_delay():
    """
    Time delay to make investments in oil exploration effective.
    """
    return io_var_s() + _smooth_investment_in_oil_exploration_delay()


_smooth_investment_in_oil_exploration_delay = Smooth(
    lambda: step(
        __data["time"],
        investment_in_oil_exploration_and_production_delay_variation() - io_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        investment_in_oil_exploration_and_production_delay_variation() - io_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_investment_in_oil_exploration_delay",
)


@component.add(
    name="Oil Recovery Technology Development Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"odr_var_s": 1, "_smooth_oil_recovery_technology_development_time": 1},
    other_deps={
        "_smooth_oil_recovery_technology_development_time": {
            "initial": {
                "oil_discovery_and_recovery_technology_development_time_variation": 1,
                "odr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "oil_discovery_and_recovery_technology_development_time_variation": 1,
                "odr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def oil_recovery_technology_development_time():
    """
    Average time required to turn investments into concrete oil recovery developments.
    """
    return odr_var_s() + _smooth_oil_recovery_technology_development_time()


_smooth_oil_recovery_technology_development_time = Smooth(
    lambda: step(
        __data["time"],
        oil_discovery_and_recovery_technology_development_time_variation()
        - odr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        oil_discovery_and_recovery_technology_development_time_variation()
        - odr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_oil_recovery_technology_development_time",
)


@component.add(
    name="Oil Discovery Technology Development Time",
    units="Year",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"odr_var_s": 1, "_smooth_oil_discovery_technology_development_time": 1},
    other_deps={
        "_smooth_oil_discovery_technology_development_time": {
            "initial": {
                "oil_discovery_and_recovery_technology_development_time_variation": 1,
                "odr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "oil_discovery_and_recovery_technology_development_time_variation": 1,
                "odr_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def oil_discovery_technology_development_time():
    """
    Average time required to turn investments into concrete oil discovery developments.
    """
    return odr_var_s() + _smooth_oil_discovery_technology_development_time()


_smooth_oil_discovery_technology_development_time = Smooth(
    lambda: step(
        __data["time"],
        oil_discovery_and_recovery_technology_development_time_variation()
        - odr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        oil_discovery_and_recovery_technology_development_time_variation()
        - odr_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_oil_discovery_technology_development_time",
)


@component.add(
    name="Relative Productivity of Investment in Oil Production Compared to Exploration",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "rpope_var_s": 1,
        "_smooth_relative_productivity_of_investment_in_oil_production_compared_to_exploration": 1,
    },
    other_deps={
        "_smooth_relative_productivity_of_investment_in_oil_production_compared_to_exploration": {
            "initial": {
                "relative_productivity_of_investment_in_oil_production_compared_to_exploration_variation": 1,
                "rpope_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "relative_productivity_of_investment_in_oil_production_compared_to_exploration_variation": 1,
                "rpope_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def relative_productivity_of_investment_in_oil_production_compared_to_exploration():
    """
    Relative Productivity of Investment in Oil Production as a multiplier of Productivity of Investment in Oil Exploration.
    """
    return (
        rpope_var_s()
        + _smooth_relative_productivity_of_investment_in_oil_production_compared_to_exploration()
    )


_smooth_relative_productivity_of_investment_in_oil_production_compared_to_exploration = Smooth(
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_oil_production_compared_to_exploration_variation()
        - rpope_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        relative_productivity_of_investment_in_oil_production_compared_to_exploration_variation()
        - rpope_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_relative_productivity_of_investment_in_oil_production_compared_to_exploration",
)


@component.add(
    name="Effectiveness of Investment in Oil Recovery Technology",
    units="1/$",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={
        "eior_var_s": 1,
        "_smooth_effectiveness_of_investment_in_oil_recovery_technology": 1,
    },
    other_deps={
        "_smooth_effectiveness_of_investment_in_oil_recovery_technology": {
            "initial": {
                "effectiveness_of_investment_in_oil_recovery_technology_variation": 1,
                "eior_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "effectiveness_of_investment_in_oil_recovery_technology_variation": 1,
                "eior_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_technology_variation_time": 1,
            },
        }
    },
)
def effectiveness_of_investment_in_oil_recovery_technology():
    """
    Effectiveness of resources dedicated to recovery technology development.
    """
    return (
        eior_var_s() + _smooth_effectiveness_of_investment_in_oil_recovery_technology()
    )


_smooth_effectiveness_of_investment_in_oil_recovery_technology = Smooth(
    lambda: step(
        __data["time"],
        effectiveness_of_investment_in_oil_recovery_technology_variation()
        - eior_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_technology_variation_time(),
    lambda: step(
        __data["time"],
        effectiveness_of_investment_in_oil_recovery_technology_variation()
        - eior_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_effectiveness_of_investment_in_oil_recovery_technology",
)


@component.add(
    name="Relative Productivity of Investment in Oil Exploration",
    units="toe/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "relative_productivity_of_investment_in_oil_exploration_variation": 1,
        "time": 1,
    },
)
def relative_productivity_of_investment_in_oil_exploration():
    """
    Relative Productivity of Investment in Oil Exploration without taking into account remaining undiscovered oil resources and advances in exploration technologies.
    """
    return 0.05 + step(
        __data["time"],
        relative_productivity_of_investment_in_oil_exploration_variation() - 0.05,
        2020,
    )


@component.add(
    name="Effectiveness of Investment in Oil Discovery Technology",
    units="1/$",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effectiveness_of_investment_in_oil_discovery_technology_variation": 1,
        "time": 1,
    },
)
def effectiveness_of_investment_in_oil_discovery_technology():
    """
    Effectiveness of resources dedicated to oil discovery technology development.
    """
    return 4.48e-09 + step(
        __data["time"],
        effectiveness_of_investment_in_oil_discovery_technology_variation() - 4.48e-09,
        2020,
    )


@component.add(
    name="Max Unit Cost of Oil Exploration",
    units="$/Mtoe",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"mfc_var_s": 1, "_smooth_max_unit_cost_of_oil_exploration": 1},
    other_deps={
        "_smooth_max_unit_cost_of_oil_exploration": {
            "initial": {
                "max_unit_cost_of_fossil_fuel_exploration_variation": 1,
                "mfc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
            },
            "step": {
                "max_unit_cost_of_fossil_fuel_exploration_variation": 1,
                "mfc_var_s": 1,
                "e_var_t": 1,
                "time": 1,
                "ssp_energy_production_variation_time": 1,
            },
        }
    },
)
def max_unit_cost_of_oil_exploration():
    """
    Upper level limit for unit cost of oil exploration.
    """
    return mfc_var_s() + _smooth_max_unit_cost_of_oil_exploration()


_smooth_max_unit_cost_of_oil_exploration = Smooth(
    lambda: step(
        __data["time"],
        max_unit_cost_of_fossil_fuel_exploration_variation() - mfc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: ssp_energy_production_variation_time(),
    lambda: step(
        __data["time"],
        max_unit_cost_of_fossil_fuel_exploration_variation() - mfc_var_s(),
        2020 + e_var_t(),
    ),
    lambda: 1,
    "_smooth_max_unit_cost_of_oil_exploration",
)


@component.add(
    name="toe per Mtoe", units="toe/Mtoe", comp_type="Constant", comp_subtype="Normal"
)
def toe_per_mtoe():
    """
    Conversion from Mtoe to toe.
    """
    return 1000000.0


@component.add(
    name="Potential Oil Exploration",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "effective_investment_in_oil_exploration": 1,
        "productivity_of_investment_in_oil_exploration": 1,
        "toe_per_mtoe": 1,
    },
)
def potential_oil_exploration():
    """
    Potential Oil exploration due to available investments in oil resources discovery.
    """
    return (
        effective_investment_in_oil_exploration()
        * productivity_of_investment_in_oil_exploration()
        / toe_per_mtoe()
    )


@component.add(
    name="Potential Oil Production from Investment",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_oil_production": 1,
        "effective_investment_in_oil_production": 1,
        "toe_per_mtoe": 1,
    },
)
def potential_oil_production_from_investment():
    """
    Potential Oil Production due to available investments in oil resources recovery.
    """
    return (
        productivity_of_investment_in_oil_production()
        * effective_investment_in_oil_production()
        / toe_per_mtoe()
    )


@component.add(
    name="Oil Productivity of Investment",
    units="toe/$",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_oil_productivity_of_investment": 1},
    other_deps={
        "_integ_oil_productivity_of_investment": {
            "initial": {"init_opi": 1},
            "step": {"change_in_oil_productivity_of_investment": 1},
        }
    },
)
def oil_productivity_of_investment():
    """
    Factor indicating productivity of investments in oil production.
    """
    return _integ_oil_productivity_of_investment()


_integ_oil_productivity_of_investment = Integ(
    lambda: change_in_oil_productivity_of_investment(),
    lambda: init_opi(),
    "_integ_oil_productivity_of_investment",
)


@component.add(
    name="Change in Oil Productivity of Investment",
    units="toe/(Year*$)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "productivity_of_investment_in_oil_exploration": 1,
        "oil_productivity_of_investment": 1,
        "oil_production_coverage": 1,
    },
)
def change_in_oil_productivity_of_investment():
    """
    Change in Oil Productivity of Investment.
    """
    return (
        productivity_of_investment_in_oil_exploration()
        - oil_productivity_of_investment()
    ) / oil_production_coverage()


@component.add(
    name="Change in Average Oil Production",
    units="Mtoe/(Year*Year)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "oil_production": 1,
        "average_oil_production": 1,
        "time_to_average_oil_production": 1,
    },
)
def change_in_average_oil_production():
    """
    Change in Average Oil Production.
    """
    return (
        oil_production() - average_oil_production()
    ) / time_to_average_oil_production()


@component.add(
    name="Effective Investment in Oil Production",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_effective_investment_in_oil_production": 1},
    other_deps={
        "_integ_effective_investment_in_oil_production": {
            "initial": {"init_eiop": 1},
            "step": {"change_in_effective_investment_in_oil_production": 1},
        }
    },
)
def effective_investment_in_oil_production():
    """
    Effective investments dedicated for oil resources production.
    """
    return _integ_effective_investment_in_oil_production()


_integ_effective_investment_in_oil_production = Integ(
    lambda: change_in_effective_investment_in_oil_production(),
    lambda: init_eiop(),
    "_integ_effective_investment_in_oil_production",
)


@component.add(
    name="Effective Investment in Oil Exploration",
    units="$/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_effective_investment_in_oil_exploration": 1},
    other_deps={
        "_integ_effective_investment_in_oil_exploration": {
            "initial": {"init_eioe": 1},
            "step": {"change_in_effective_investment_in_oil_exploration": 1},
        }
    },
)
def effective_investment_in_oil_exploration():
    """
    Effective investments dedicated for oil resources exploration.
    """
    return _integ_effective_investment_in_oil_exploration()


_integ_effective_investment_in_oil_exploration = Integ(
    lambda: change_in_effective_investment_in_oil_exploration(),
    lambda: init_eioe(),
    "_integ_effective_investment_in_oil_exploration",
)


@component.add(
    name="Average Oil Production",
    units="Mtoe/Year",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_average_oil_production": 1},
    other_deps={
        "_integ_average_oil_production": {
            "initial": {"init_average_oil_production": 1},
            "step": {"change_in_average_oil_production": 1},
        }
    },
)
def average_oil_production():
    """
    Average total oil production per year.
    """
    return _integ_average_oil_production()


_integ_average_oil_production = Integ(
    lambda: change_in_average_oil_production(),
    lambda: init_average_oil_production(),
    "_integ_average_oil_production",
)


@component.add(
    name="Oil Fraction Discoverable",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "minofd": 2,
        "maxofd": 1,
        "ratio_of_oil_fraction_discoverable_to_undiscoverable": 2,
    },
)
def oil_fraction_discoverable():
    """
    Percentage of oil resources that can be still explored due to current state of discovery technology.
    """
    return minofd() + (maxofd() - minofd()) * (
        ratio_of_oil_fraction_discoverable_to_undiscoverable()
        / (ratio_of_oil_fraction_discoverable_to_undiscoverable() + 1)
    )


@component.add(
    name="Oil Price per Barrel",
    units="$/Barrel",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_price": 1, "mtoe_per_barrel": 1},
)
def oil_price_per_barrel():
    """
    Actual Oil Price per Barrel.
    """
    return oil_price() * mtoe_per_barrel()


@component.add(
    name="Mtoe per Barrel",
    units="Mtoe/Barrel",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mtoe_per_barrel():
    """
    Coefficient to convert million tons of oil equivalent unit (Mtoe) into barrels.
    """
    return 1.364e-07


@component.add(
    name="Identified Oil Resources",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_identified_oil_resources": 1},
    other_deps={
        "_integ_identified_oil_resources": {
            "initial": {
                "total_oil_demand": 1,
                "normal_oil_production_ratio": 1,
                "cumulative_oil_production": 1,
                "oil_fraction_recoverable": 2,
            },
            "step": {"oil_exploration": 1, "oil_production": 1},
        }
    },
)
def identified_oil_resources():
    """
    Oil Resources discovered thanks to developments in exploration technology.
    """
    return _integ_identified_oil_resources()


_integ_identified_oil_resources = Integ(
    lambda: oil_exploration() - oil_production(),
    lambda: (
        total_oil_demand() * normal_oil_production_ratio()
        + cumulative_oil_production() * (1 - oil_fraction_recoverable())
    )
    / oil_fraction_recoverable(),
    "_integ_identified_oil_resources",
)


@component.add(
    name="Indicated Oil Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_cost": 1, "oil_desired_gross_margin": 1},
)
def indicated_oil_price():
    """
    Indicated oil price accounting for exploration and production cost and gross margin.
    """
    return oil_cost() * (1 + oil_desired_gross_margin())


@component.add(
    name="Total Oil Demand",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_demand": 1, "market_share_oil": 1},
)
def total_oil_demand():
    """
    Total demand for oil resources.
    """
    return energy_demand() * market_share_oil()


@component.add(name="MINOFR", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minofr():
    """
    Initial and minimal possible percentage of oil resources to be recovered.
    """
    return 0.1


@component.add(
    name="Adjustment for Identified Oil Resource",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "required_identified_oil_resources": 1,
        "identified_oil_resources": 1,
        "identified_oil_resources_adjustment_time": 1,
    },
)
def adjustment_for_identified_oil_resource():
    """
    Adjustment of Identified Oil Resource to the desired level over a specified adjustment time.
    """
    return (
        required_identified_oil_resources() - identified_oil_resources()
    ) / identified_oil_resources_adjustment_time()


@component.add(
    name="Total Oil Recoverable Resource Remaining",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "cumulative_additions_to_oil_production": 1,
        "oil_fraction_recoverable": 1,
        "cumulative_oil_production": 1,
    },
)
def total_oil_recoverable_resource_remaining():
    """
    Total Oil Recoverable Resources Remaining as a percentage of Cumulative Additions to Oil Production. It already produced resources. The percentage is determined by production technology developments.
    """
    return (
        cumulative_additions_to_oil_production() * oil_fraction_recoverable()
        - cumulative_oil_production()
    )


@component.add(
    name="Cumulative Oil Production",
    units="Mtoe",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_cumulative_oil_production": 1},
    other_deps={
        "_integ_cumulative_oil_production": {
            "initial": {"init_copn": 1},
            "step": {"oil_production": 1},
        }
    },
)
def cumulative_oil_production():
    """
    Cumulative Oil Resources that has been produced.
    """
    return _integ_cumulative_oil_production()


_integ_cumulative_oil_production = Integ(
    lambda: oil_production(), lambda: init_copn(), "_integ_cumulative_oil_production"
)


@component.add(
    name="Total Oil Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "undiscovered_oil_resources": 1,
        "cumulative_additions_to_oil_production": 1,
    },
)
def total_oil_resources():
    """
    Total oil resources including Undiscovered Oil Resources, Identified Oil Resources and resources already produced i.e. Cumulative Oil Production.
    """
    return undiscovered_oil_resources() + cumulative_additions_to_oil_production()


@component.add(
    name="Investment in Oil Discovery Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_technology": 1,
        "fraction_invested_in_oil_discovery_technology": 1,
    },
)
def investment_in_oil_discovery_technology():
    """
    Total investments in oil exploration technology.
    """
    return (
        investment_in_oil_technology() * fraction_invested_in_oil_discovery_technology()
    )


@component.add(
    name="Desired Oil Exploration Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"adjustment_for_identified_oil_resource": 1, "oil_production": 1},
)
def desired_oil_exploration_rate():
    """
    Desired Oil exploration rate due to Total Oil Demand and Identified Oil Resources safety coverage.
    """
    return float(
        np.maximum(0, adjustment_for_identified_oil_resource() + oil_production())
    )


@component.add(
    name="Investment in Oil Exploration",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_investment_in_oil_exploration": 1},
)
def investment_in_oil_exploration():
    """
    Amount of resources dedicated to oil exploration.
    """
    return desired_investment_in_oil_exploration()


@component.add(
    name="Oil Exploration",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_exploration_rate": 1},
)
def oil_exploration():
    """
    Oil resources discovery rate.
    """
    return float(np.maximum(0, oil_exploration_rate()))


@component.add(
    name="Investment in Oil Production",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_investment_in_oil_production": 1},
)
def investment_in_oil_production():
    """
    Amount of resources dedicated to oil production.
    """
    return desired_investment_in_oil_production()


@component.add(
    name="Ratio of Oil Fraction Discoverable to Undiscoverable",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ratio_of_oil_fraction_discoverable_to_undiscoverable": 1},
    other_deps={
        "_integ_ratio_of_oil_fraction_discoverable_to_undiscoverable": {
            "initial": {"init_rodu": 1},
            "step": {
                "increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable": 1
            },
        }
    },
)
def ratio_of_oil_fraction_discoverable_to_undiscoverable():
    """
    Ratio of Oil Fraction Discoverable to Undiscoverable increased due to investments in discovery technology and their productivity.
    """
    return _integ_ratio_of_oil_fraction_discoverable_to_undiscoverable()


_integ_ratio_of_oil_fraction_discoverable_to_undiscoverable = Integ(
    lambda: increase_in_ratio_of_oil_fraction_discoverable_to_undiscoverable(),
    lambda: init_rodu(),
    "_integ_ratio_of_oil_fraction_discoverable_to_undiscoverable",
)


@component.add(
    name="Ratio of Oil Fraction Recoverable to Unrecoverable",
    units="Dmnl",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_ratio_of_oil_fraction_recoverable_to_unrecoverable": 1},
    other_deps={
        "_integ_ratio_of_oil_fraction_recoverable_to_unrecoverable": {
            "initial": {"init_roru": 1},
            "step": {
                "increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable": 1
            },
        }
    },
)
def ratio_of_oil_fraction_recoverable_to_unrecoverable():
    """
    Ratio of Oil Fraction Recoverable to Unrecoverable increased due to investments in recovery technology and their productivity.
    """
    return _integ_ratio_of_oil_fraction_recoverable_to_unrecoverable()


_integ_ratio_of_oil_fraction_recoverable_to_unrecoverable = Integ(
    lambda: increase_in_ratio_of_oil_fraction_recoverable_to_unrecoverable(),
    lambda: init_roru(),
    "_integ_ratio_of_oil_fraction_recoverable_to_unrecoverable",
)


@component.add(
    name="Investment in Oil Recovery Technology",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "investment_in_oil_technology": 1,
        "fraction_invested_in_oil_discovery_technology": 1,
    },
)
def investment_in_oil_recovery_technology():
    """
    Total investments in oil production technology.
    """
    return investment_in_oil_technology() * (
        1 - fraction_invested_in_oil_discovery_technology()
    )


@component.add(
    name="Time to Average Oil Production",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def time_to_average_oil_production():
    """
    Time to average total oil production per year.
    """
    return 1


@component.add(
    name="INIT RORU",
    units="Dmnl",
    limits=(0.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_roru():
    """
    Initial Ratio of Oil Fraction Recoverable to Unrecoverable.
    """
    return 0.2


@component.add(
    name="Cumulative Additions to Oil Production",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"identified_oil_resources": 1, "cumulative_oil_production": 1},
)
def cumulative_additions_to_oil_production():
    """
    Identified and already produced resources.
    """
    return identified_oil_resources() + cumulative_oil_production()


@component.add(
    name="Oil Desired Gross Margin",
    units="Dmnl",
    comp_type="Constant",
    comp_subtype="Normal",
)
def oil_desired_gross_margin():
    """
    Desired Gross Margin per unit oil resources.
    """
    return 0.2


@component.add(name="MAXOFR", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxofr():
    """
    Maximal possible percentage of oil resources to be recovered.
    """
    return 1


@component.add(
    name="Table for FIODT",
    units="Dmnl",
    comp_type="Lookup",
    comp_subtype="Normal",
    depends_on={"__lookup__": "_hardcodedlookup_table_for_fiodt"},
)
def table_for_fiodt(x, final_subs=None):
    """
    Table determining order by which technology investments are dedicated to exploration and production technologies. For small Oil Fraction Discoverable, in order to make sufficient resources available to be produced, more investments are directed to exploration technologies. Once the Oil Fraction Discoverable increases the investments are redirected to production technologies.
    """
    return _hardcodedlookup_table_for_fiodt(x, final_subs)


_hardcodedlookup_table_for_fiodt = HardcodedLookups(
    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
    [0.8, 0.8, 0.7, 0.5, 0.2, 0.0],
    {},
    "interpolate",
    {},
    "_hardcodedlookup_table_for_fiodt",
)


@component.add(
    name="Oil Gross Margin",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_price": 1, "oil_cost": 2},
)
def oil_gross_margin():
    """
    Actual oil gross margin.
    """
    return (oil_price() - oil_cost()) / oil_cost()


@component.add(
    name="Oil Price",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "indicated_oil_price": 1,
        "effect_of_oil_demand_and_supply_on_price": 1,
    },
)
def oil_price():
    """
    Actual oil price accounting for indicated oil price and effect of demand and supply.
    """
    return indicated_oil_price() * effect_of_oil_demand_and_supply_on_price()


@component.add(
    name="Oil Demand to Supply Ratio",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_oil_demand": 1, "potential_oil_production": 1},
)
def oil_demand_to_supply_ratio():
    """
    Oil Demand to Supply Ratio.
    """
    return total_oil_demand() / potential_oil_production()


@component.add(name="MAXOFD", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def maxofd():
    """
    Maximal possible percentage of oil resources to be discovered.
    """
    return 1


@component.add(
    name="Oil Cost",
    units="$/Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"unit_cost_of_oil_exploration": 1, "unit_cost_of_oil_production": 1},
)
def oil_cost():
    """
    Cont of unit oil resources as a sum of unit exploration and production costs.
    """
    return unit_cost_of_oil_exploration() + unit_cost_of_oil_production()


@component.add(
    name="Required Identified Oil Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "identified_oil_resources": 1,
        "total_oil_recoverable_resource_remaining": 1,
        "total_oil_demand": 1,
        "normal_oil_production_ratio": 1,
    },
)
def required_identified_oil_resources():
    """
    The desired Identified Oil Resources level sought by the oil sector.
    """
    return (identified_oil_resources() / total_oil_recoverable_resource_remaining()) * (
        normal_oil_production_ratio() * total_oil_demand()
    )


@component.add(
    name="INIT RODU",
    units="Dmnl",
    limits=(0.0, 1.0),
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_rodu():
    """
    Initial Ratio of Oil Fraction Discoverable to Undiscoverable.
    """
    return 0.2


@component.add(
    name="Total Oil Discoverable Resources",
    units="Mtoe",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_oil_resources": 1,
        "oil_fraction_discoverable": 1,
        "cumulative_additions_to_oil_production": 1,
    },
)
def total_oil_discoverable_resources():
    """
    Total Oil Discoverable Resources as a percentage of Total Oil Resources. It excludes identified and already produced resources. The percentage is determined by exploration technology developments.
    """
    return (
        total_oil_resources() * oil_fraction_discoverable()
        - cumulative_additions_to_oil_production()
    )


@component.add(
    name="Normal Oil Production Ratio",
    units="Year",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def normal_oil_production_ratio():
    """
    Safety stock coverage as a number of years of the total oil demand the oil sector would like to maintain in identified oil resources. It secures the market against possibility of unforeseen variations in demand. It is also a stimulus for oil exploration.
    """
    return 2


@component.add(
    name="Desired Investment in Oil Exploration",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_oil_exploration_rate": 1, "unit_cost_of_oil_exploration": 1},
)
def desired_investment_in_oil_exploration():
    """
    Desired amount of resources that need to be invested in order to secure desired oil exploration.
    """
    return desired_oil_exploration_rate() * unit_cost_of_oil_exploration()


@component.add(
    name="Identified Oil Resources Adjustment Time",
    units="Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def identified_oil_resources_adjustment_time():
    """
    Time to adjust Identified Oil Resource to the desired level.
    """
    return 2


@component.add(
    name="Oil Production Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_oil_demand": 1, "potential_oil_production": 1},
)
def oil_production_rate():
    """
    Total oil energy production per year due to available resources, developments in production technology and oil energy demand.
    """
    return float(np.minimum(total_oil_demand(), potential_oil_production()))


@component.add(
    name="Oil Fraction Recoverable",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "minofr": 2,
        "ratio_of_oil_fraction_recoverable_to_unrecoverable": 2,
        "maxofr": 1,
    },
)
def oil_fraction_recoverable():
    """
    Percentage of oil resources that can be produced due to current state of recovery technology.
    """
    return minofr() + (maxofr() - minofr()) * (
        ratio_of_oil_fraction_recoverable_to_unrecoverable()
        / (ratio_of_oil_fraction_recoverable_to_unrecoverable() + 1)
    )


@component.add(
    name="Potential Oil Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "potential_oil_production_from_investment": 1,
        "potential_oil_production_from_resources": 1,
    },
)
def potential_oil_production():
    """
    Potential Oil Production due to available investments in oil resources recovery and recovery technology.
    """
    return float(
        np.minimum(
            potential_oil_production_from_investment(),
            potential_oil_production_from_resources(),
        )
    )


@component.add(
    name="INIT COPN",
    units="Mtoe",
    limits=(0.0, np.nan),
    comp_type="Constant",
    comp_subtype="Normal",
)
def init_copn():
    """
    Cumulative Oil Resources for 2016
    """
    return 0


@component.add(name="MINOFD", units="Dmnl", comp_type="Constant", comp_subtype="Normal")
def minofd():
    """
    Initial and minimal possible percentage of oil resources to be discovered.
    """
    return 0.02


@component.add(
    name="Potential Oil Production from Resources",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "total_oil_recoverable_resource_remaining": 1,
        "normal_oil_production_ratio": 1,
    },
)
def potential_oil_production_from_resources():
    """
    Desired Oil Production rate due to Total Oil Recoverable Resource Remaining adjusted by oil production safety coverage.
    """
    return total_oil_recoverable_resource_remaining() / normal_oil_production_ratio()


@component.add(
    name="Oil Production Coverage",
    units="Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"identified_oil_resources": 1, "average_oil_production": 1},
)
def oil_production_coverage():
    """
    Ratio indicating oil coverage in years for discovered resources and at the current average oil production.
    """
    return identified_oil_resources() / average_oil_production()


@component.add(
    name="Fraction Invested in Oil Discovery Technology",
    units="Dmnl",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_fraction_discoverable": 1, "table_for_fiodt": 1},
)
def fraction_invested_in_oil_discovery_technology():
    """
    Fraction of investments in oil technology dedicated to discovery technology.
    """
    return table_for_fiodt(oil_fraction_discoverable())


@component.add(
    name="Oil Revenue",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_price": 1, "average_oil_production": 1},
)
def oil_revenue():
    """
    Total revenue in oil market.
    """
    return oil_price() * average_oil_production()


@component.add(
    name="Oil Shortage",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"total_oil_demand": 1, "oil_production": 1},
)
def oil_shortage():
    """
    Difference between demand and the oil production rate.
    """
    return total_oil_demand() - oil_production()


@component.add(
    name="Oil Production",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"oil_production_rate": 1},
)
def oil_production():
    """
    Total oil energy production per year. Source of historical data: International Energy Agency – Key World Energy Statistics 2007; BP Statistical Review of World Energy June 2008
    """
    return oil_production_rate()


@component.add(
    name="Oil Exploration Rate",
    units="Mtoe/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"desired_oil_exploration_rate": 1, "potential_oil_exploration": 1},
)
def oil_exploration_rate():
    """
    Oil Exploration Rate accounting for potential and desired oil exploration rates.
    """
    return float(
        np.minimum(desired_oil_exploration_rate(), potential_oil_exploration())
    )
